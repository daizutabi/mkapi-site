{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MkApi Documentation MkApi plugin for MkDocs generates API documentation for Python code. MkApi supports two styles of docstrings: Google and NumPy . The Napoleon package provides complete examples: Example Google Style Python Docstrings Example NumPy Style Python Docstrings Features of MkApi are: Section syntax : Supported section identifiers are Args , Arguments , Attributes , Example[s] , Note[s] , Parameters , Raises , Returns , References , Todo , Warning[s] , Warns , and Yields . Type annotation : If you write your function such as def func(x: int) -> str: , you don't need write type(s) in Parameters, Returns, or Yields section again. You can overwrite the type annotation in the corresponding docstring. Object type inspection : MkApi plugin creates CLASS, DATACLASS, FUNCTION, GENERATOR, METHOD, or PROPERTY prefix for each object. Attribute inspection : If you write attributes with description as comment at module level or in __init__() of class, Attributes section is automatically created. Docstring inheritance : Docstring of a subclass can inherit parameters and attributes description from its superclasses. Page mode : Comprehensive API documentation for your project, in which objects are linked to each other by type annotation. Installation Install the plugin using pip: pip install mkapi Configuration Add the following lines to mkdocs.yml : plugins: - search # necessary for search to work - mkapi Usage MkApi provides two modes to generate API documentation: Embedding mode and Page mode. Embedding Mode To generate the API documentation in a Markdown source, add an exclamation mark (!), followed by mkapi in brackets, and the object full name in parentheses. Yes, this is like adding an image. The object can be a function, class, or module. ![mkapi](<object.full.name>) MkApi imports objects that you specify. If they aren't in the sys.path , configure mkdocs.yml like below: plugins: - search - mkapi: src_dirs: [<path1>, <path2>, ...] Here, pathX s are inserted to sys.path . These pathX s must be relative to the mkdocs.yml directory. The embedding mode is useful to embed an object interface in an arbitrary position of a Markdown source. For more details, see: Google style examples NumPy style examples Page Mode Using the page mode, you can construct a comprehensive API documentation for your project. You can get this powerful feature by just one line: nav: - index.md - API: mkapi/api/mkapi For more details, see Page Mode and Internal Links","title":"MkApi Documentation"},{"location":"#mkapi-documentation","text":"MkApi plugin for MkDocs generates API documentation for Python code. MkApi supports two styles of docstrings: Google and NumPy . The Napoleon package provides complete examples: Example Google Style Python Docstrings Example NumPy Style Python Docstrings Features of MkApi are: Section syntax : Supported section identifiers are Args , Arguments , Attributes , Example[s] , Note[s] , Parameters , Raises , Returns , References , Todo , Warning[s] , Warns , and Yields . Type annotation : If you write your function such as def func(x: int) -> str: , you don't need write type(s) in Parameters, Returns, or Yields section again. You can overwrite the type annotation in the corresponding docstring. Object type inspection : MkApi plugin creates CLASS, DATACLASS, FUNCTION, GENERATOR, METHOD, or PROPERTY prefix for each object. Attribute inspection : If you write attributes with description as comment at module level or in __init__() of class, Attributes section is automatically created. Docstring inheritance : Docstring of a subclass can inherit parameters and attributes description from its superclasses. Page mode : Comprehensive API documentation for your project, in which objects are linked to each other by type annotation.","title":"MkApi Documentation"},{"location":"#installation","text":"Install the plugin using pip: pip install mkapi","title":"Installation"},{"location":"#configuration","text":"Add the following lines to mkdocs.yml : plugins: - search # necessary for search to work - mkapi","title":"Configuration"},{"location":"#usage","text":"MkApi provides two modes to generate API documentation: Embedding mode and Page mode.","title":"Usage"},{"location":"#embedding-mode","text":"To generate the API documentation in a Markdown source, add an exclamation mark (!), followed by mkapi in brackets, and the object full name in parentheses. Yes, this is like adding an image. The object can be a function, class, or module. ![mkapi](<object.full.name>) MkApi imports objects that you specify. If they aren't in the sys.path , configure mkdocs.yml like below: plugins: - search - mkapi: src_dirs: [<path1>, <path2>, ...] Here, pathX s are inserted to sys.path . These pathX s must be relative to the mkdocs.yml directory. The embedding mode is useful to embed an object interface in an arbitrary position of a Markdown source. For more details, see: Google style examples NumPy style examples","title":"Embedding Mode"},{"location":"#page-mode","text":"Using the page mode, you can construct a comprehensive API documentation for your project. You can get this powerful feature by just one line: nav: - index.md - API: mkapi/api/mkapi For more details, see Page Mode and Internal Links","title":"Page Mode"},{"location":"api/mkapi.core.base/","text":"MODULE MKAPI.CORE . BASE This module provides entity classes to represent docstring structure. Classes Base \u2014 Base class. Inline \u2014 Inline class. Type \u2014 Type class represents type of Item , Section , Docstring , or Object . Item \u2014 Item class represents an item in Parameters, Attributes, and Raises sections, etc. Section \u2014 Section class represents a section in docstring. Docstring \u2014 Docstring class represents a docstring of an object. Object \u2014 Object class represents an object. DATACLASS mkapi.core.base . Base (name='', markdown='') Base class. Parameters name (str, optional) \u2014 Name of self. markdown (str, optional) \u2014 Markdown source. Attributes name (str) \u2014 Name of self. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML string after conversion. Methods set_html (html) \u2014 Sets html attribute. METHOD set_html (html) Sets html attribute. Parameters html (str) \u2014 HTML string. DATACLASS mkapi.core.base . Inline (name='', markdown='') Bases mkapi.core.base.Base Inline class. Parameters name (str, optional) \u2014 Name of self. markdown (str, optional) \u2014 Markdown source. Attributes name (str) \u2014 Name of self. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML string after conversion. Examples >>> inline = Inline() >>> bool(inline) False >>> inline = Inline('markdown') >>> inline.name == inline.markdown True >>> bool(inline) True >>> next(iter(inline)) is inline True >>> inline.set_html(\"<p>p1</p><p>p2</p>\") >>> inline.html 'p1<br>p2' Methods __bool__ () (bool) \u2014 Returns True if name is not empty. __iter__ () ( Base ) \u2014 Yields self if the markdown attribute has link form. set_html (html) \u2014 Sets html attribute cleaning p tags. METHOD __bool__ () \u2192 bool Returns True if name is not empty. GENERATOR __iter__ () \u2192 Base Yields self if the markdown attribute has link form. METHOD set_html (html) Sets html attribute cleaning p tags. Parameters html (str) \u2014 HTML string. DATACLASS mkapi.core.base . Type (name='', markdown='') Bases mkapi.core.base.Inline mkapi.core.base.Base Type class represents type of Item , Section , Docstring , or Object . Parameters name (str, optional) \u2014 Name of self. markdown (str, optional) \u2014 Markdown source. Attributes name (str) \u2014 Name of self. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML string after conversion. Examples >>> a = Type('str') >>> a Type(name='str', markdown='', html='str') >>> list(a) [] >>> b = Type('[Object](base.Object)') >>> b Type(name='[Object](base.Object)', markdown='[Object](base.Object)', html='') >>> list(b) == [b] True Methods __bool__ () (bool) \u2014 Returns True if name is not empty. __iter__ () ( Base ) \u2014 Yields self if the markdown attribute has link form. set_html (html) \u2014 Sets html attribute cleaning p tags. METHOD __bool__ () \u2192 bool Returns True if name is not empty. GENERATOR __iter__ () \u2192 Base Yields self if the markdown attribute has link form. METHOD set_html (html) Sets html attribute cleaning p tags. Parameters html (str) \u2014 HTML string. DATACLASS mkapi.core.base . Item (name='', markdown='', type=<factory>, kind='') Bases mkapi.core.base.Type mkapi.core.base.Inline mkapi.core.base.Base Item class represents an item in Parameters, Attributes, and Raises sections, etc. Parameters name (str, optional) \u2014 Name of self. markdown (str, optional) \u2014 Markdown source. type ( Type , optional) \u2014 Type of self. kind (str, optional) \u2014 Kind of self, for example readonly_property . This value is rendered as a class attribute in HTML. Attributes name (str) \u2014 Name of self. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML string after conversion. type ( Type ) \u2014 Type of self. desc ( Inline ) \u2014 Description of self. kind (str) \u2014 Kind of self, for example readonly_property . This value is rendered as a class attribute in HTML. Examples >>> item = Item('[x](x)', 'A parameter.', Type('int')) >>> item.name, item.markdown, item.html ('[x](x)', '[x](x)', '') >>> item.type Type(name='int', markdown='', html='int') >>> item.desc Inline(name='A parameter.', markdown='A parameter.', html='') >>> it = iter(item) >>> next(it) is item True >>> next(it) is item.desc True >>> item.set_html('<p><strong>init</strong></p>') >>> item.html '__init__' Methods __bool__ () (bool) \u2014 Returns True if name is not empty. __iter__ () ( Base ) \u2014 Yields self if the markdown attribute has link form. set_html (html) \u2014 Sets html attribute cleaning p tags. METHOD __bool__ () \u2192 bool Returns True if name is not empty. GENERATOR __iter__ () \u2192 Base Yields self if the markdown attribute has link form. METHOD set_html (html) Sets html attribute cleaning p tags. Parameters html (str) \u2014 HTML string. DATACLASS mkapi.core.base . Section (name='', markdown='', items=<factory>, type=<factory>) Bases mkapi.core.base.Base Section class represents a section in docstring. Parameters name (str, optional) \u2014 Name of self. markdown (str, optional) \u2014 Markdown source. items (list of Item , optional) \u2014 List for Arguments, Attributes, or Raises sections, etc. type ( Type , optional) \u2014 Type of self. Attributes name (str) \u2014 Name of self. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML string after conversion. items (list of Item ) \u2014 List for Arguments, Attributes, or Raises sections, etc. type ( Type ) \u2014 Type of self. Examples Section is iterable: >>> section = Section('Returns', markdown='An integer.') >>> for x in section: ... assert x is section >>> items = [Item('x'), Item('[y](a)'), Item('z')] >>> section = Section('Parameters', items=items) >>> [item.name for item in section] ['[y](a)'] Indexing: >>> isinstance(section['x'], Item) True >>> section['z'].name 'z' Contains: >>> 'x' in section True Methods set_html (html) \u2014 Sets html attribute. __iter__ () ( Base ) \u2014 Yields a Base instance that has non empty Markdown. __getitem__ (name) ( Item , optional) \u2014 Returns an Item instance whose name is equal to name . If not found, returns None. __delitem__ (name) \u2014 Delete an Item instance whose name is equal to name . __contains__ (name) (bool) \u2014 Returns True if there is an Item instance whose name is name . METHOD set_html (html) Sets html attribute. Parameters html (str) \u2014 HTML string. GENERATOR __iter__ () \u2192 Base Yields a Base instance that has non empty Markdown. Parameters name \u2014 Item name. METHOD __getitem__ (name) \u2192 Item , optional Returns an Item instance whose name is equal to name . If not found, returns None. Parameters name \u2014 Item name. METHOD __delitem__ (name) Delete an Item instance whose name is equal to name . Parameters name \u2014 Item name. METHOD __contains__ (name) \u2192 bool Returns True if there is an Item instance whose name is name . Parameters name \u2014 Item name. DATACLASS mkapi.core.base . Docstring (sections=<factory>, type=<factory>) Docstring class represents a docstring of an object. Parameters sections (list of Section , optional) \u2014 List of Section instance. type ( Type , optional) \u2014 Type for Returns or Yields sections. Attributes sections (list of Section ) \u2014 List of Section instance. type ( Type ) \u2014 Type for Returns or Yields sections. Examples Empty docstring: >>> docstring = Docstring() >>> assert not docstring Docstring with 3 sections: >>> default = Section(\"\", markdown=\"Default\") >>> parameters = Section(\"Parameters\", items=[Item(\"a\"), Item(\"[b](!a)\")]) >>> returns = Section(\"Returns\", markdown=\"Results\") >>> docstring = Docstring([default, parameters, returns]) Docstring is iterable: >>> [base.name for base in docstring] ['', '[b](!a)', 'Returns'] Indexing: >>> docstring[\"Parameters\"].items[0].name 'a' DATACLASS mkapi.core.base . Object (name='', prefix='', qualname='', kind='', signature=<factory>) Bases mkapi.core.base.Base Object class represents an object. Parameters name (str, optional) \u2014 Object name. prefix (str, optional) \u2014 Object prefix. qualname (str, optional) \u2014 Qualified name. kind (str, optional) \u2014 Object kind such as 'class', 'function', etc. signature ( Signature , optional) \u2014 Signature if object is module or callable. Attributes name (str) \u2014 Name of self. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML string after conversion. prefix (str) \u2014 Object prefix. qualname (str) \u2014 Qualified name. id (str) \u2014 ID attribute of HTML. kind (str) \u2014 Object kind such as 'class', 'function', etc. type ( Type ) \u2014 Type for missing Returns and Yields sections. signature ( Signature ) \u2014 Signature if object is module or callable. Methods set_html (html) \u2014 Sets html attribute. METHOD set_html (html) Sets html attribute. Parameters html (str) \u2014 HTML string.","title":"mkapi.core.base"},{"location":"api/mkapi.core.base/#mkapicorebase","text":"This module provides entity classes to represent docstring structure. Classes Base \u2014 Base class. Inline \u2014 Inline class. Type \u2014 Type class represents type of Item , Section , Docstring , or Object . Item \u2014 Item class represents an item in Parameters, Attributes, and Raises sections, etc. Section \u2014 Section class represents a section in docstring. Docstring \u2014 Docstring class represents a docstring of an object. Object \u2014 Object class represents an object.","title":"mkapi.core.base"},{"location":"api/mkapi.core.base/#mkapicorebasebase","text":"Base class. Parameters name (str, optional) \u2014 Name of self. markdown (str, optional) \u2014 Markdown source. Attributes name (str) \u2014 Name of self. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML string after conversion. Methods set_html (html) \u2014 Sets html attribute.","title":"mkapi.core.base.Base"},{"location":"api/mkapi.core.base/#mkapicorebasebaseset_html","text":"Sets html attribute. Parameters html (str) \u2014 HTML string.","title":"mkapi.core.base.Base.set_html"},{"location":"api/mkapi.core.base/#mkapicorebaseinline","text":"Bases mkapi.core.base.Base Inline class. Parameters name (str, optional) \u2014 Name of self. markdown (str, optional) \u2014 Markdown source. Attributes name (str) \u2014 Name of self. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML string after conversion. Examples >>> inline = Inline() >>> bool(inline) False >>> inline = Inline('markdown') >>> inline.name == inline.markdown True >>> bool(inline) True >>> next(iter(inline)) is inline True >>> inline.set_html(\"<p>p1</p><p>p2</p>\") >>> inline.html 'p1<br>p2' Methods __bool__ () (bool) \u2014 Returns True if name is not empty. __iter__ () ( Base ) \u2014 Yields self if the markdown attribute has link form. set_html (html) \u2014 Sets html attribute cleaning p tags.","title":"mkapi.core.base.Inline"},{"location":"api/mkapi.core.base/#mkapicorebaseinlinebool","text":"Returns True if name is not empty.","title":"mkapi.core.base.Inline.bool"},{"location":"api/mkapi.core.base/#mkapicorebaseinlineiter","text":"Yields self if the markdown attribute has link form.","title":"mkapi.core.base.Inline.iter"},{"location":"api/mkapi.core.base/#mkapicorebaseinlineset_html","text":"Sets html attribute cleaning p tags. Parameters html (str) \u2014 HTML string.","title":"mkapi.core.base.Inline.set_html"},{"location":"api/mkapi.core.base/#mkapicorebasetype","text":"Bases mkapi.core.base.Inline mkapi.core.base.Base Type class represents type of Item , Section , Docstring , or Object . Parameters name (str, optional) \u2014 Name of self. markdown (str, optional) \u2014 Markdown source. Attributes name (str) \u2014 Name of self. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML string after conversion. Examples >>> a = Type('str') >>> a Type(name='str', markdown='', html='str') >>> list(a) [] >>> b = Type('[Object](base.Object)') >>> b Type(name='[Object](base.Object)', markdown='[Object](base.Object)', html='') >>> list(b) == [b] True Methods __bool__ () (bool) \u2014 Returns True if name is not empty. __iter__ () ( Base ) \u2014 Yields self if the markdown attribute has link form. set_html (html) \u2014 Sets html attribute cleaning p tags.","title":"mkapi.core.base.Type"},{"location":"api/mkapi.core.base/#mkapicorebaseinlinebool_1","text":"Returns True if name is not empty.","title":"mkapi.core.base.Inline.bool"},{"location":"api/mkapi.core.base/#mkapicorebaseinlineiter_1","text":"Yields self if the markdown attribute has link form.","title":"mkapi.core.base.Inline.iter"},{"location":"api/mkapi.core.base/#mkapicorebaseinlineset_html_1","text":"Sets html attribute cleaning p tags. Parameters html (str) \u2014 HTML string.","title":"mkapi.core.base.Inline.set_html"},{"location":"api/mkapi.core.base/#mkapicorebaseitem","text":"Bases mkapi.core.base.Type mkapi.core.base.Inline mkapi.core.base.Base Item class represents an item in Parameters, Attributes, and Raises sections, etc. Parameters name (str, optional) \u2014 Name of self. markdown (str, optional) \u2014 Markdown source. type ( Type , optional) \u2014 Type of self. kind (str, optional) \u2014 Kind of self, for example readonly_property . This value is rendered as a class attribute in HTML. Attributes name (str) \u2014 Name of self. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML string after conversion. type ( Type ) \u2014 Type of self. desc ( Inline ) \u2014 Description of self. kind (str) \u2014 Kind of self, for example readonly_property . This value is rendered as a class attribute in HTML. Examples >>> item = Item('[x](x)', 'A parameter.', Type('int')) >>> item.name, item.markdown, item.html ('[x](x)', '[x](x)', '') >>> item.type Type(name='int', markdown='', html='int') >>> item.desc Inline(name='A parameter.', markdown='A parameter.', html='') >>> it = iter(item) >>> next(it) is item True >>> next(it) is item.desc True >>> item.set_html('<p><strong>init</strong></p>') >>> item.html '__init__' Methods __bool__ () (bool) \u2014 Returns True if name is not empty. __iter__ () ( Base ) \u2014 Yields self if the markdown attribute has link form. set_html (html) \u2014 Sets html attribute cleaning p tags.","title":"mkapi.core.base.Item"},{"location":"api/mkapi.core.base/#mkapicorebaseinlinebool_2","text":"Returns True if name is not empty.","title":"mkapi.core.base.Inline.bool"},{"location":"api/mkapi.core.base/#mkapicorebaseitemiter","text":"Yields self if the markdown attribute has link form.","title":"mkapi.core.base.Item.iter"},{"location":"api/mkapi.core.base/#mkapicorebaseitemset_html","text":"Sets html attribute cleaning p tags. Parameters html (str) \u2014 HTML string.","title":"mkapi.core.base.Item.set_html"},{"location":"api/mkapi.core.base/#mkapicorebasesection","text":"Bases mkapi.core.base.Base Section class represents a section in docstring. Parameters name (str, optional) \u2014 Name of self. markdown (str, optional) \u2014 Markdown source. items (list of Item , optional) \u2014 List for Arguments, Attributes, or Raises sections, etc. type ( Type , optional) \u2014 Type of self. Attributes name (str) \u2014 Name of self. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML string after conversion. items (list of Item ) \u2014 List for Arguments, Attributes, or Raises sections, etc. type ( Type ) \u2014 Type of self. Examples Section is iterable: >>> section = Section('Returns', markdown='An integer.') >>> for x in section: ... assert x is section >>> items = [Item('x'), Item('[y](a)'), Item('z')] >>> section = Section('Parameters', items=items) >>> [item.name for item in section] ['[y](a)'] Indexing: >>> isinstance(section['x'], Item) True >>> section['z'].name 'z' Contains: >>> 'x' in section True Methods set_html (html) \u2014 Sets html attribute. __iter__ () ( Base ) \u2014 Yields a Base instance that has non empty Markdown. __getitem__ (name) ( Item , optional) \u2014 Returns an Item instance whose name is equal to name . If not found, returns None. __delitem__ (name) \u2014 Delete an Item instance whose name is equal to name . __contains__ (name) (bool) \u2014 Returns True if there is an Item instance whose name is name .","title":"mkapi.core.base.Section"},{"location":"api/mkapi.core.base/#mkapicorebasebaseset_html_1","text":"Sets html attribute. Parameters html (str) \u2014 HTML string.","title":"mkapi.core.base.Base.set_html"},{"location":"api/mkapi.core.base/#mkapicorebasesectioniter","text":"Yields a Base instance that has non empty Markdown. Parameters name \u2014 Item name.","title":"mkapi.core.base.Section.iter"},{"location":"api/mkapi.core.base/#mkapicorebasesectiongetitem","text":"Returns an Item instance whose name is equal to name . If not found, returns None. Parameters name \u2014 Item name.","title":"mkapi.core.base.Section.getitem"},{"location":"api/mkapi.core.base/#mkapicorebasesectiondelitem","text":"Delete an Item instance whose name is equal to name . Parameters name \u2014 Item name.","title":"mkapi.core.base.Section.delitem"},{"location":"api/mkapi.core.base/#mkapicorebasesectioncontains","text":"Returns True if there is an Item instance whose name is name . Parameters name \u2014 Item name.","title":"mkapi.core.base.Section.contains"},{"location":"api/mkapi.core.base/#mkapicorebasedocstring","text":"Docstring class represents a docstring of an object. Parameters sections (list of Section , optional) \u2014 List of Section instance. type ( Type , optional) \u2014 Type for Returns or Yields sections. Attributes sections (list of Section ) \u2014 List of Section instance. type ( Type ) \u2014 Type for Returns or Yields sections. Examples Empty docstring: >>> docstring = Docstring() >>> assert not docstring Docstring with 3 sections: >>> default = Section(\"\", markdown=\"Default\") >>> parameters = Section(\"Parameters\", items=[Item(\"a\"), Item(\"[b](!a)\")]) >>> returns = Section(\"Returns\", markdown=\"Results\") >>> docstring = Docstring([default, parameters, returns]) Docstring is iterable: >>> [base.name for base in docstring] ['', '[b](!a)', 'Returns'] Indexing: >>> docstring[\"Parameters\"].items[0].name 'a'","title":"mkapi.core.base.Docstring"},{"location":"api/mkapi.core.base/#mkapicorebaseobject","text":"Bases mkapi.core.base.Base Object class represents an object. Parameters name (str, optional) \u2014 Object name. prefix (str, optional) \u2014 Object prefix. qualname (str, optional) \u2014 Qualified name. kind (str, optional) \u2014 Object kind such as 'class', 'function', etc. signature ( Signature , optional) \u2014 Signature if object is module or callable. Attributes name (str) \u2014 Name of self. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML string after conversion. prefix (str) \u2014 Object prefix. qualname (str) \u2014 Qualified name. id (str) \u2014 ID attribute of HTML. kind (str) \u2014 Object kind such as 'class', 'function', etc. type ( Type ) \u2014 Type for missing Returns and Yields sections. signature ( Signature ) \u2014 Signature if object is module or callable. Methods set_html (html) \u2014 Sets html attribute.","title":"mkapi.core.base.Object"},{"location":"api/mkapi.core.base/#mkapicorebasebaseset_html_2","text":"Sets html attribute. Parameters html (str) \u2014 HTML string.","title":"mkapi.core.base.Base.set_html"},{"location":"api/mkapi.core.docstring/","text":"MODULE MKAPI.CORE . DOCSTRING This module provides functions that parse docstring. Functions section_heading (line) (str, str) \u2014 Returns a tuple of (section name, style name). split_section (doc) (str, str, str) \u2014 Yields a tuple of (section name, contents, style). split_parameter (doc) (list of str) \u2014 Yields a list of parameter string. parse_parameter (lines,style) (str, str, str) \u2014 Returns a tuple of (name, markdown, type). parse_parameters (doc,style) (list of (str, str, str)) \u2014 Returns a list of (name, markdown, type). parse_returns (doc,style) (str, str) \u2014 Returns a tuple of (markdown, type). get_section (name,doc,style) ( Section ) \u2014 Returns a Section instance. parse_bases (doc,obj) \u2014 Parses base classes to create a Base(s) line. parse_property (doc,obj) \u2014 Parses property's docstring to inspect type. parse_attribute (doc,obj) \u2014 Parses attributes' docstring to inspect type and description from source. get_docstring (obj) ( Docstring ) \u2014 Returns a Docstring instance. FUNCTION mkapi.core.docstring . section_heading (line) \u2192 (str, str) Returns a tuple of (section name, style name). Parameters line (str) \u2014 Docstring line. Examples >>> section_heading(\"Args:\") ('Args', 'google') >>> section_heading(\"Raises\") ('Raises', 'numpy') >>> section_heading(\"other\") ('', '') GENERATOR mkapi.core.docstring . split_section (doc) \u2192 (str, str, str) Yields a tuple of (section name, contents, style). Parameters doc (str) \u2014 Docstring Examples >>> doc = \"abc\\n\\nArgs:\\n x: X\\n\" >>> it = split_section(doc) >>> next(it) ('', 'abc', '') >>> next(it) ('Parameters', 'x: X', 'google') GENERATOR mkapi.core.docstring . split_parameter (doc) \u2192 list of str Yields a list of parameter string. Parameters doc (str) \u2014 Docstring FUNCTION mkapi.core.docstring . parse_parameter (lines, style) \u2192 (str, str, str) Returns a tuple of (name, markdown, type). Parameters lines (list of str) \u2014 Splitted parameter docstring lines. style (str) \u2014 Docstring style. google or numpy . FUNCTION mkapi.core.docstring . parse_parameters (doc, style) \u2192 list of (str, str, str) Returns a list of (name, markdown, type). Parameters doc (str) \u2014 style (str) \u2014 FUNCTION mkapi.core.docstring . parse_returns (doc, style) \u2192 (str, str) Returns a tuple of (markdown, type). Parameters doc (str) \u2014 style (str) \u2014 FUNCTION mkapi.core.docstring . get_section (name, doc, style) \u2192 Section Returns a Section instance. Parameters name (str) \u2014 doc (str) \u2014 style (str) \u2014 FUNCTION mkapi.core.docstring . parse_bases (doc, obj) Parses base classes to create a Base(s) line. Parameters doc ( Docstring ) \u2014 obj (any) \u2014 FUNCTION mkapi.core.docstring . parse_property (doc, obj) Parses property's docstring to inspect type. Parameters doc ( Docstring ) \u2014 obj (any) \u2014 FUNCTION mkapi.core.docstring . parse_attribute (doc, obj) Parses attributes' docstring to inspect type and description from source. Parameters doc ( Docstring ) \u2014 obj (any) \u2014 FUNCTION mkapi.core.docstring . get_docstring (obj) \u2192 Docstring Returns a Docstring instance. Parameters obj (any) \u2014","title":"mkapi.core.docstring"},{"location":"api/mkapi.core.docstring/#mkapicoredocstring","text":"This module provides functions that parse docstring. Functions section_heading (line) (str, str) \u2014 Returns a tuple of (section name, style name). split_section (doc) (str, str, str) \u2014 Yields a tuple of (section name, contents, style). split_parameter (doc) (list of str) \u2014 Yields a list of parameter string. parse_parameter (lines,style) (str, str, str) \u2014 Returns a tuple of (name, markdown, type). parse_parameters (doc,style) (list of (str, str, str)) \u2014 Returns a list of (name, markdown, type). parse_returns (doc,style) (str, str) \u2014 Returns a tuple of (markdown, type). get_section (name,doc,style) ( Section ) \u2014 Returns a Section instance. parse_bases (doc,obj) \u2014 Parses base classes to create a Base(s) line. parse_property (doc,obj) \u2014 Parses property's docstring to inspect type. parse_attribute (doc,obj) \u2014 Parses attributes' docstring to inspect type and description from source. get_docstring (obj) ( Docstring ) \u2014 Returns a Docstring instance.","title":"mkapi.core.docstring"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringsection_heading","text":"Returns a tuple of (section name, style name). Parameters line (str) \u2014 Docstring line. Examples >>> section_heading(\"Args:\") ('Args', 'google') >>> section_heading(\"Raises\") ('Raises', 'numpy') >>> section_heading(\"other\") ('', '')","title":"mkapi.core.docstring.section_heading"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringsplit_section","text":"Yields a tuple of (section name, contents, style). Parameters doc (str) \u2014 Docstring Examples >>> doc = \"abc\\n\\nArgs:\\n x: X\\n\" >>> it = split_section(doc) >>> next(it) ('', 'abc', '') >>> next(it) ('Parameters', 'x: X', 'google')","title":"mkapi.core.docstring.split_section"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringsplit_parameter","text":"Yields a list of parameter string. Parameters doc (str) \u2014 Docstring","title":"mkapi.core.docstring.split_parameter"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringparse_parameter","text":"Returns a tuple of (name, markdown, type). Parameters lines (list of str) \u2014 Splitted parameter docstring lines. style (str) \u2014 Docstring style. google or numpy .","title":"mkapi.core.docstring.parse_parameter"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringparse_parameters","text":"Returns a list of (name, markdown, type). Parameters doc (str) \u2014 style (str) \u2014","title":"mkapi.core.docstring.parse_parameters"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringparse_returns","text":"Returns a tuple of (markdown, type). Parameters doc (str) \u2014 style (str) \u2014","title":"mkapi.core.docstring.parse_returns"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringget_section","text":"Returns a Section instance. Parameters name (str) \u2014 doc (str) \u2014 style (str) \u2014","title":"mkapi.core.docstring.get_section"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringparse_bases","text":"Parses base classes to create a Base(s) line. Parameters doc ( Docstring ) \u2014 obj (any) \u2014","title":"mkapi.core.docstring.parse_bases"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringparse_property","text":"Parses property's docstring to inspect type. Parameters doc ( Docstring ) \u2014 obj (any) \u2014","title":"mkapi.core.docstring.parse_property"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringparse_attribute","text":"Parses attributes' docstring to inspect type and description from source. Parameters doc ( Docstring ) \u2014 obj (any) \u2014","title":"mkapi.core.docstring.parse_attribute"},{"location":"api/mkapi.core.docstring/#mkapicoredocstringget_docstring","text":"Returns a Docstring instance. Parameters obj (any) \u2014","title":"mkapi.core.docstring.get_docstring"},{"location":"api/mkapi.core.inherit/","text":"MODULE MKAPI.CORE . INHERIT This module implements the functionality of docstring inheritance. Functions get_params (node,name) (dict(str: str), dict(str: str)) \u2014 Returns a tuple of (docstring params, signature params). is_complete (node,name) (bool) \u2014 Returns True if docstring is complete. inherit_base (node,base,name) \u2014 Inherits Parameters or Attributes section from base class. inherit_signature (node,name) \u2014 Inherits Parameters or Attributes section from signature. inherit_parameters (node) \u2014 Attributes section inherits items' markdown from Parameters section. get_bases (node) ( Node , iterator of Node ) \u2014 Yields a tuple of (Node instance, iterator of Node). inherit (node,strict) \u2014 Inherits Parameters and Attributes from superclasses. inherit_by_filters (node,filters) \u2014 Inherits Parameters and Attributes from superclasses. FUNCTION mkapi.core.inherit . get_params (node, name) \u2192 (dict(str: str), dict(str: str)) Returns a tuple of (docstring params, signature params). Each params is a dictionary of name-type mapping. Parameters node ( Node ) \u2014 Node instance. name (str) \u2014 Section name: Parameters or Attributes . Examples >>> node = get_node('mkapi.core.base.Type') >>> doc_params, sig_params = get_params(node, 'Parameters') >>> doc_params {} >>> sig_params {'name': 'str, optional', 'markdown': 'str, optional'} FUNCTION mkapi.core.inherit . is_complete (node, name='') \u2192 bool Returns True if docstring is complete. Parameters node ( Node ) \u2014 Node instance. name (str, optional) \u2014 Section name: 'Parameters' or 'Attributes', or ''. If name is '', both sections are checked. Examples >>> from mkapi.core.object import get_object >>> node = Node(get_object('mkapi.core.base.Base')) >>> is_complete(node, 'Parameters') True >>> node = Node(get_object('mkapi.core.base.Type')) >>> is_complete(node) False FUNCTION mkapi.core.inherit . inherit_base (node, base, name='') Inherits Parameters or Attributes section from base class. Parameters node ( Node ) \u2014 Node instance. base ( Node ) \u2014 Node instance of a super class. name (str, optional) \u2014 Section name: 'Parameters' or 'Attributes', or ''. If name is '', both sections are inherited. Examples >>> from mkapi.core.object import get_object >>> base = Node(get_object('mkapi.core.base.Base')) >>> node = Node(get_object('mkapi.core.base.Type')) >>> [item.name for item in base.docstring['Parameters'].items] ['name', 'markdown'] >>> node.docstring['Parameters'] is None True >>> inherit_base(node, base) >>> [item.name for item in node.docstring['Parameters'].items] ['name', 'markdown'] FUNCTION mkapi.core.inherit . inherit_signature (node, name='') Inherits Parameters or Attributes section from signature. Parameters node ( Node ) \u2014 Node instance. name (str, optional) \u2014 Section name: 'Parameters' or 'Attributes', or ''. If name is '', both sections are inherited. Examples >>> from mkapi.core.object import get_object >>> base = Node(get_object('mkapi.core.base.Base')) >>> [item.name for item in base.docstring['Attributes'].items] ['html'] >>> inherit_signature(base) >>> [item.name for item in base.docstring['Attributes'].items] ['name', 'markdown', 'html'] FUNCTION mkapi.core.inherit . inherit_parameters (node) Attributes section inherits items' markdown from Parameters section. Parameters node ( Node ) \u2014 Node instance. Note This function does not create any items. Call inherit_signature () first. Examples >>> from mkapi.core.object import get_object >>> base = Node(get_object('mkapi.core.base.Base')) >>> node = Node(get_object('mkapi.core.base.Type')) >>> [item.name for item in base.docstring['Parameters'].items] ['name', 'markdown'] >>> inherit_signature(base) >>> section = base.docstring['Attributes'] >>> [item.name for item in section.items] ['name', 'markdown', 'html'] >>> section['name'].desc.html '' >>> inherit_parameters(base) >>> section['name'].desc.markdown != '' True GENERATOR mkapi.core.inherit . get_bases (node) \u2192 ( Node , iterator of Node ) Yields a tuple of (Node instance, iterator of Node). Parameters node ( Node ) \u2014 Node instance. Examples >>> from mkapi.core.object import get_object >>> node = Node(get_object('mkapi.core.base.Type')) >>> it = get_bases(node) >>> n, gen = next(it) >>> n is node True >>> [x.object.name for x in gen] ['Inline', 'Base'] >>> for n, gen in it: ... if n.object.name == 'set_html': ... break >>> [x.object.name for x in gen] ['set_html', 'set_html'] FUNCTION mkapi.core.inherit . inherit (node, strict=False) Inherits Parameters and Attributes from superclasses. This function calls inherit_base (), inherit_signature (), inherit_parameters (). Parameters node ( Node ) \u2014 Node instance. strict (bool, optional) \u2014 If True, inherits from signature, too. FUNCTION mkapi.core.inherit . inherit_by_filters (node, filters) Inherits Parameters and Attributes from superclasses. Parameters node ( Node ) \u2014 Node instance. filters (list of str) \u2014 Chose fileters. 'inherit' for superclass inheritance or 'strict' for signature inheritance.","title":"mkapi.core.inherit"},{"location":"api/mkapi.core.inherit/#mkapicoreinherit","text":"This module implements the functionality of docstring inheritance. Functions get_params (node,name) (dict(str: str), dict(str: str)) \u2014 Returns a tuple of (docstring params, signature params). is_complete (node,name) (bool) \u2014 Returns True if docstring is complete. inherit_base (node,base,name) \u2014 Inherits Parameters or Attributes section from base class. inherit_signature (node,name) \u2014 Inherits Parameters or Attributes section from signature. inherit_parameters (node) \u2014 Attributes section inherits items' markdown from Parameters section. get_bases (node) ( Node , iterator of Node ) \u2014 Yields a tuple of (Node instance, iterator of Node). inherit (node,strict) \u2014 Inherits Parameters and Attributes from superclasses. inherit_by_filters (node,filters) \u2014 Inherits Parameters and Attributes from superclasses.","title":"mkapi.core.inherit"},{"location":"api/mkapi.core.inherit/#mkapicoreinheritget_params","text":"Returns a tuple of (docstring params, signature params). Each params is a dictionary of name-type mapping. Parameters node ( Node ) \u2014 Node instance. name (str) \u2014 Section name: Parameters or Attributes . Examples >>> node = get_node('mkapi.core.base.Type') >>> doc_params, sig_params = get_params(node, 'Parameters') >>> doc_params {} >>> sig_params {'name': 'str, optional', 'markdown': 'str, optional'}","title":"mkapi.core.inherit.get_params"},{"location":"api/mkapi.core.inherit/#mkapicoreinheritis_complete","text":"Returns True if docstring is complete. Parameters node ( Node ) \u2014 Node instance. name (str, optional) \u2014 Section name: 'Parameters' or 'Attributes', or ''. If name is '', both sections are checked. Examples >>> from mkapi.core.object import get_object >>> node = Node(get_object('mkapi.core.base.Base')) >>> is_complete(node, 'Parameters') True >>> node = Node(get_object('mkapi.core.base.Type')) >>> is_complete(node) False","title":"mkapi.core.inherit.is_complete"},{"location":"api/mkapi.core.inherit/#mkapicoreinheritinherit_base","text":"Inherits Parameters or Attributes section from base class. Parameters node ( Node ) \u2014 Node instance. base ( Node ) \u2014 Node instance of a super class. name (str, optional) \u2014 Section name: 'Parameters' or 'Attributes', or ''. If name is '', both sections are inherited. Examples >>> from mkapi.core.object import get_object >>> base = Node(get_object('mkapi.core.base.Base')) >>> node = Node(get_object('mkapi.core.base.Type')) >>> [item.name for item in base.docstring['Parameters'].items] ['name', 'markdown'] >>> node.docstring['Parameters'] is None True >>> inherit_base(node, base) >>> [item.name for item in node.docstring['Parameters'].items] ['name', 'markdown']","title":"mkapi.core.inherit.inherit_base"},{"location":"api/mkapi.core.inherit/#mkapicoreinheritinherit_signature","text":"Inherits Parameters or Attributes section from signature. Parameters node ( Node ) \u2014 Node instance. name (str, optional) \u2014 Section name: 'Parameters' or 'Attributes', or ''. If name is '', both sections are inherited. Examples >>> from mkapi.core.object import get_object >>> base = Node(get_object('mkapi.core.base.Base')) >>> [item.name for item in base.docstring['Attributes'].items] ['html'] >>> inherit_signature(base) >>> [item.name for item in base.docstring['Attributes'].items] ['name', 'markdown', 'html']","title":"mkapi.core.inherit.inherit_signature"},{"location":"api/mkapi.core.inherit/#mkapicoreinheritinherit_parameters","text":"Attributes section inherits items' markdown from Parameters section. Parameters node ( Node ) \u2014 Node instance. Note This function does not create any items. Call inherit_signature () first. Examples >>> from mkapi.core.object import get_object >>> base = Node(get_object('mkapi.core.base.Base')) >>> node = Node(get_object('mkapi.core.base.Type')) >>> [item.name for item in base.docstring['Parameters'].items] ['name', 'markdown'] >>> inherit_signature(base) >>> section = base.docstring['Attributes'] >>> [item.name for item in section.items] ['name', 'markdown', 'html'] >>> section['name'].desc.html '' >>> inherit_parameters(base) >>> section['name'].desc.markdown != '' True","title":"mkapi.core.inherit.inherit_parameters"},{"location":"api/mkapi.core.inherit/#mkapicoreinheritget_bases","text":"Yields a tuple of (Node instance, iterator of Node). Parameters node ( Node ) \u2014 Node instance. Examples >>> from mkapi.core.object import get_object >>> node = Node(get_object('mkapi.core.base.Type')) >>> it = get_bases(node) >>> n, gen = next(it) >>> n is node True >>> [x.object.name for x in gen] ['Inline', 'Base'] >>> for n, gen in it: ... if n.object.name == 'set_html': ... break >>> [x.object.name for x in gen] ['set_html', 'set_html']","title":"mkapi.core.inherit.get_bases"},{"location":"api/mkapi.core.inherit/#mkapicoreinheritinherit","text":"Inherits Parameters and Attributes from superclasses. This function calls inherit_base (), inherit_signature (), inherit_parameters (). Parameters node ( Node ) \u2014 Node instance. strict (bool, optional) \u2014 If True, inherits from signature, too.","title":"mkapi.core.inherit.inherit"},{"location":"api/mkapi.core.inherit/#mkapicoreinheritinherit_by_filters","text":"Inherits Parameters and Attributes from superclasses. Parameters node ( Node ) \u2014 Node instance. filters (list of str) \u2014 Chose fileters. 'inherit' for superclass inheritance or 'strict' for signature inheritance.","title":"mkapi.core.inherit.inherit_by_filters"},{"location":"api/mkapi.core.linker/","text":"MODULE MKAPI.CORE . LINKER This module provides functions that relate to link. Functions link (name,href) (str) \u2014 Reutrns Markdown link with a mark that indicates this link was created by MkApi. get_link (obj,include_module) (str) \u2014 Returns Markdown link for object, if possible. resolve_link (markdown,abs_src_path,abs_api_paths) (str) \u2014 Reutrns resolved link. resolve_object (html) (dict(str: any)) \u2014 Reutrns an object context dictionary. replace_link (obj,markdown) (str) \u2014 Returns a replaced link with object full name. FUNCTION mkapi.core.linker . link (name, href) \u2192 str Reutrns Markdown link with a mark that indicates this link was created by MkApi. Parameters name (str) \u2014 Link name. href (str) \u2014 Reference. Examples >>> link('abc', 'xyz') '[abc](!xyz)' FUNCTION mkapi.core.linker . get_link (obj, include_module=False) \u2192 str Returns Markdown link for object, if possible. Parameters obj (any) \u2014 Object include_module (bool, optional) \u2014 If True, link text includes module path. Examples >>> get_link(get_fullname) '[get_fullname](!mkapi.core.object.get_fullname)' >>> get_link(get_fullname, include_module=True) '[mkapi.core.object.get_fullname](!mkapi.core.object.get_fullname)' FUNCTION mkapi.core.linker . resolve_link (markdown, abs_src_path, abs_api_paths) \u2192 str Reutrns resolved link. Parameters markdown (str) \u2014 Markdown source. abs_src_path (str) \u2014 Absolute source path of Markdown. abs_api_paths (list of str) \u2014 A list of API paths. Examples >>> abs_src_path = '/src/examples/example.md' >>> abs_api_paths = ['/api/a','/api/b', '/api/b.c'] >>> resolve_link('[abc](!b.c.d)', abs_src_path, abs_api_paths) '[abc](../../api/b.c#b.c.d)' FUNCTION mkapi.core.linker . resolve_object (html) \u2192 dict(str: any) Reutrns an object context dictionary. Parameters html (str) \u2014 HTML source. Examples >>> resolve_object(\"<p><a href='a'>p</a><a href='b'>n</a></p>\") {'heading_id': '', 'level': 0, 'prefix_url': 'a', 'name_url': 'b'} >>> resolve_object(\"<h2 id='i'><a href='a'>p</a><a href='b'>n</a></h2>\") {'heading_id': 'i', 'level': 2, 'prefix_url': 'a', 'name_url': 'b'} FUNCTION mkapi.core.linker . replace_link (obj, markdown) \u2192 str Returns a replaced link with object full name. Parameters obj (any) \u2014 Object that has a module. markdown (str) \u2014 Markdown Examples >>> from mkapi.core.object import get_object >>> obj = get_object('mkapi.core.base.Object') >>> replace_link(obj, '[Signature]()') '[Signature](!mkapi.core.signature.Signature)' >>> replace_link(obj, '[dummy.Dummy]()') '[dummy.Dummy]()'","title":"mkapi.core.linker"},{"location":"api/mkapi.core.linker/#mkapicorelinker","text":"This module provides functions that relate to link. Functions link (name,href) (str) \u2014 Reutrns Markdown link with a mark that indicates this link was created by MkApi. get_link (obj,include_module) (str) \u2014 Returns Markdown link for object, if possible. resolve_link (markdown,abs_src_path,abs_api_paths) (str) \u2014 Reutrns resolved link. resolve_object (html) (dict(str: any)) \u2014 Reutrns an object context dictionary. replace_link (obj,markdown) (str) \u2014 Returns a replaced link with object full name.","title":"mkapi.core.linker"},{"location":"api/mkapi.core.linker/#mkapicorelinkerlink","text":"Reutrns Markdown link with a mark that indicates this link was created by MkApi. Parameters name (str) \u2014 Link name. href (str) \u2014 Reference. Examples >>> link('abc', 'xyz') '[abc](!xyz)'","title":"mkapi.core.linker.link"},{"location":"api/mkapi.core.linker/#mkapicorelinkerget_link","text":"Returns Markdown link for object, if possible. Parameters obj (any) \u2014 Object include_module (bool, optional) \u2014 If True, link text includes module path. Examples >>> get_link(get_fullname) '[get_fullname](!mkapi.core.object.get_fullname)' >>> get_link(get_fullname, include_module=True) '[mkapi.core.object.get_fullname](!mkapi.core.object.get_fullname)'","title":"mkapi.core.linker.get_link"},{"location":"api/mkapi.core.linker/#mkapicorelinkerresolve_link","text":"Reutrns resolved link. Parameters markdown (str) \u2014 Markdown source. abs_src_path (str) \u2014 Absolute source path of Markdown. abs_api_paths (list of str) \u2014 A list of API paths. Examples >>> abs_src_path = '/src/examples/example.md' >>> abs_api_paths = ['/api/a','/api/b', '/api/b.c'] >>> resolve_link('[abc](!b.c.d)', abs_src_path, abs_api_paths) '[abc](../../api/b.c#b.c.d)'","title":"mkapi.core.linker.resolve_link"},{"location":"api/mkapi.core.linker/#mkapicorelinkerresolve_object","text":"Reutrns an object context dictionary. Parameters html (str) \u2014 HTML source. Examples >>> resolve_object(\"<p><a href='a'>p</a><a href='b'>n</a></p>\") {'heading_id': '', 'level': 0, 'prefix_url': 'a', 'name_url': 'b'} >>> resolve_object(\"<h2 id='i'><a href='a'>p</a><a href='b'>n</a></h2>\") {'heading_id': 'i', 'level': 2, 'prefix_url': 'a', 'name_url': 'b'}","title":"mkapi.core.linker.resolve_object"},{"location":"api/mkapi.core.linker/#mkapicorelinkerreplace_link","text":"Returns a replaced link with object full name. Parameters obj (any) \u2014 Object that has a module. markdown (str) \u2014 Markdown Examples >>> from mkapi.core.object import get_object >>> obj = get_object('mkapi.core.base.Object') >>> replace_link(obj, '[Signature]()') '[Signature](!mkapi.core.signature.Signature)' >>> replace_link(obj, '[dummy.Dummy]()') '[dummy.Dummy]()'","title":"mkapi.core.linker.replace_link"},{"location":"api/mkapi.core/","text":"PACKAGE MKAPI. CORE Package level documentation is written in __init__.py .","title":"mkapi.core"},{"location":"api/mkapi.core/#mkapicore","text":"Package level documentation is written in __init__.py .","title":"mkapi.core"},{"location":"api/mkapi.core.module/","text":"MODULE MKAPI.CORE . MODULE This modules provides Module class that has tree structure. Classes Module \u2014 Module class represents an module. Functions get_module (name) ( Module ) \u2014 Returns a Module instace by name or object. DATACLASS mkapi.core.module . Module (obj, recursive=True) Bases mkapi.core.tree.Tree Module class represents an module. Parameters obj (any) \u2014 Object. recursive (bool, optional) \u2014 Attributes obj (any) \u2014 Object. sourcefile (str) \u2014 Source file path. lineno (int) \u2014 Line number. object ( Object ) \u2014 Object instance. docstring ( Docstring ) \u2014 Docstring instance. parent (Module, optional) \u2014 Parent Module instance. members (list of Module) \u2014 Member Module instances. recursive (bool) \u2014 objects (list of str) \u2014 If self is module, object member names are collected in this list. Methods get_kind () (str) \u2014 Returns kind of self. get_members () (list of Module) \u2014 Returns a list of members. get_markdown (filters) (str) \u2014 Returns a Markdown source for docstring of this object. METHOD get_kind () \u2192 str Returns kind of self. METHOD get_members () \u2192 list of Module Returns a list of members. METHOD get_markdown (filters) \u2192 str Returns a Markdown source for docstring of this object. Parameters filters (list of str) \u2014 A list of filters. Avaiable filters: upper , inherit , strict . FUNCTION mkapi.core.module . get_module (name) \u2192 Module Returns a Module instace by name or object. Parameters name \u2014 Object name or object itself.","title":"mkapi.core.module"},{"location":"api/mkapi.core.module/#mkapicoremodule","text":"This modules provides Module class that has tree structure. Classes Module \u2014 Module class represents an module. Functions get_module (name) ( Module ) \u2014 Returns a Module instace by name or object.","title":"mkapi.core.module"},{"location":"api/mkapi.core.module/#mkapicoremodulemodule","text":"Bases mkapi.core.tree.Tree Module class represents an module. Parameters obj (any) \u2014 Object. recursive (bool, optional) \u2014 Attributes obj (any) \u2014 Object. sourcefile (str) \u2014 Source file path. lineno (int) \u2014 Line number. object ( Object ) \u2014 Object instance. docstring ( Docstring ) \u2014 Docstring instance. parent (Module, optional) \u2014 Parent Module instance. members (list of Module) \u2014 Member Module instances. recursive (bool) \u2014 objects (list of str) \u2014 If self is module, object member names are collected in this list. Methods get_kind () (str) \u2014 Returns kind of self. get_members () (list of Module) \u2014 Returns a list of members. get_markdown (filters) (str) \u2014 Returns a Markdown source for docstring of this object.","title":"mkapi.core.module.Module"},{"location":"api/mkapi.core.module/#mkapicoremodulemoduleget_kind","text":"Returns kind of self.","title":"mkapi.core.module.Module.get_kind"},{"location":"api/mkapi.core.module/#mkapicoremodulemoduleget_members","text":"Returns a list of members.","title":"mkapi.core.module.Module.get_members"},{"location":"api/mkapi.core.module/#mkapicoremodulemoduleget_markdown","text":"Returns a Markdown source for docstring of this object. Parameters filters (list of str) \u2014 A list of filters. Avaiable filters: upper , inherit , strict .","title":"mkapi.core.module.Module.get_markdown"},{"location":"api/mkapi.core.module/#mkapicoremoduleget_module","text":"Returns a Module instace by name or object. Parameters name \u2014 Object name or object itself.","title":"mkapi.core.module.get_module"},{"location":"api/mkapi.core.node/","text":"MODULE MKAPI.CORE . NODE This modules provides Node class that has tree structure. Classes Node \u2014 Node class represents an object. Functions is_member (name,obj,sourcefiles) (int) \u2014 Returns an integer thats indicates if obj is a member or not. get_node (name,recursive,sourcefile_index) ( Node ) \u2014 Returns a Node instace by name or object. DATACLASS mkapi.core.node . Node (obj, recursive=True, sourcefile_index=0) Bases mkapi.core.tree.Tree Node class represents an object. Parameters obj (any) \u2014 Object. recursive (bool, optional) \u2014 sourcefile_index (int, optional) \u2014 If obj is a member of class, this value is the index of unique source files given by mro() of the class. Otherwise, 0. Attributes obj (any) \u2014 Object. sourcefile (str) \u2014 Source file path. lineno (int) \u2014 Line number. object ( Object ) \u2014 Object instance. docstring ( Docstring ) \u2014 Docstring instance. parent (Node, optional) \u2014 Parent Node instance. members (list of Node) \u2014 Member Node instances. recursive (bool) \u2014 sourcefile_index (int) \u2014 If obj is a member of class, this value is the index of unique source files given by mro() of the class. Otherwise, 0. Methods get_kind () (str) \u2014 Returns kind of self. get_members () (list of Node) \u2014 Returns a list of members. get_markdown (level,callback) (str) \u2014 Returns a Markdown source for docstring of this object. set_html (html) \u2014 Sets HTML to Base instances recursively. render () (str) \u2014 Renders and returns HTML. METHOD get_kind () \u2192 str Returns kind of self. METHOD get_members () \u2192 list of Node Returns a list of members. METHOD get_markdown (level=0, callback=None) \u2192 str Returns a Markdown source for docstring of this object. Parameters level (int, optional) \u2014 Heading level. If 0, <div> tags are used. callback (callable, optional) \u2014 To modify Markdown source. METHOD set_html (html) Sets HTML to Base instances recursively. Parameters html (str) \u2014 HTML that is provided by a Markdown converter. METHOD render () \u2192 str Renders and returns HTML. FUNCTION mkapi.core.node . is_member (name, obj, sourcefiles) \u2192 int Returns an integer thats indicates if obj is a member or not. -1 -1 : Is not a member. >0 >0 : Is a member. If the value is larger than 0, obj is defined in different file and the value is corresponding to the index of unique source files of superclasses. Parameters name (str) \u2014 Object name. obj (any) \u2014 Object sourcefiles (list of str) \u2014 Parent source files. If the parent is a class, those of the superclasses should be included in the order of mro() . FUNCTION mkapi.core.node . get_node (name, recursive=True, sourcefile_index=0) \u2192 Node Returns a Node instace by name or object. Parameters name \u2014 Object name or object itself. recursive (bool, optional) \u2014 sourcefile_index (int, optional) \u2014 If obj is a member of class, this value is the index of unique source files given by mro() of the class. Otherwise, 0.","title":"mkapi.core.node"},{"location":"api/mkapi.core.node/#mkapicorenode","text":"This modules provides Node class that has tree structure. Classes Node \u2014 Node class represents an object. Functions is_member (name,obj,sourcefiles) (int) \u2014 Returns an integer thats indicates if obj is a member or not. get_node (name,recursive,sourcefile_index) ( Node ) \u2014 Returns a Node instace by name or object.","title":"mkapi.core.node"},{"location":"api/mkapi.core.node/#mkapicorenodenode","text":"Bases mkapi.core.tree.Tree Node class represents an object. Parameters obj (any) \u2014 Object. recursive (bool, optional) \u2014 sourcefile_index (int, optional) \u2014 If obj is a member of class, this value is the index of unique source files given by mro() of the class. Otherwise, 0. Attributes obj (any) \u2014 Object. sourcefile (str) \u2014 Source file path. lineno (int) \u2014 Line number. object ( Object ) \u2014 Object instance. docstring ( Docstring ) \u2014 Docstring instance. parent (Node, optional) \u2014 Parent Node instance. members (list of Node) \u2014 Member Node instances. recursive (bool) \u2014 sourcefile_index (int) \u2014 If obj is a member of class, this value is the index of unique source files given by mro() of the class. Otherwise, 0. Methods get_kind () (str) \u2014 Returns kind of self. get_members () (list of Node) \u2014 Returns a list of members. get_markdown (level,callback) (str) \u2014 Returns a Markdown source for docstring of this object. set_html (html) \u2014 Sets HTML to Base instances recursively. render () (str) \u2014 Renders and returns HTML.","title":"mkapi.core.node.Node"},{"location":"api/mkapi.core.node/#mkapicorenodenodeget_kind","text":"Returns kind of self.","title":"mkapi.core.node.Node.get_kind"},{"location":"api/mkapi.core.node/#mkapicorenodenodeget_members","text":"Returns a list of members.","title":"mkapi.core.node.Node.get_members"},{"location":"api/mkapi.core.node/#mkapicorenodenodeget_markdown","text":"Returns a Markdown source for docstring of this object. Parameters level (int, optional) \u2014 Heading level. If 0, <div> tags are used. callback (callable, optional) \u2014 To modify Markdown source.","title":"mkapi.core.node.Node.get_markdown"},{"location":"api/mkapi.core.node/#mkapicorenodenodeset_html","text":"Sets HTML to Base instances recursively. Parameters html (str) \u2014 HTML that is provided by a Markdown converter.","title":"mkapi.core.node.Node.set_html"},{"location":"api/mkapi.core.node/#mkapicorenodenoderender","text":"Renders and returns HTML.","title":"mkapi.core.node.Node.render"},{"location":"api/mkapi.core.node/#mkapicorenodeis_member","text":"Returns an integer thats indicates if obj is a member or not. -1 -1 : Is not a member. >0 >0 : Is a member. If the value is larger than 0, obj is defined in different file and the value is corresponding to the index of unique source files of superclasses. Parameters name (str) \u2014 Object name. obj (any) \u2014 Object sourcefiles (list of str) \u2014 Parent source files. If the parent is a class, those of the superclasses should be included in the order of mro() .","title":"mkapi.core.node.is_member"},{"location":"api/mkapi.core.node/#mkapicorenodeget_node","text":"Returns a Node instace by name or object. Parameters name \u2014 Object name or object itself. recursive (bool, optional) \u2014 sourcefile_index (int, optional) \u2014 If obj is a member of class, this value is the index of unique source files given by mro() of the class. Otherwise, 0.","title":"mkapi.core.node.get_node"},{"location":"api/mkapi.core.object/","text":"MODULE MKAPI.CORE . OBJECT This module provides utility functions that relates to object. Functions get_object (name) (any) \u2014 Reutrns an object specified by name . get_fullname (obj,name) (str) \u2014 Reutrns an object full name specified by name . split_prefix_and_name (obj) (str, str) \u2014 Splits an object full name into prefix and name. get_sourcefiles (obj) (list of str) \u2014 Returns a list of source file. from_object (obj) (bool) \u2014 Returns True, if the docstring of obj is the same as that of object . FUNCTION mkapi.core.object . get_object (name) \u2192 any Reutrns an object specified by name . Parameters name (str) \u2014 Object name. Examples >>> import inspect >>> obj = get_object('mkapi.core') >>> inspect.ismodule(obj) True >>> obj = get_object('mkapi.core.base') >>> inspect.ismodule(obj) True >>> obj = get_object('mkapi.core.node.Node') >>> inspect.isclass(obj) True >>> obj = get_object('mkapi.core.node.Node.get_markdown') >>> inspect.isfunction(obj) True FUNCTION mkapi.core.object . get_fullname (obj, name) \u2192 str Reutrns an object full name specified by name . Parameters obj (any) \u2014 Object that has a module. name (str) \u2014 Object name in the module. Examples >>> import inspect >>> obj = get_object('mkapi.core.base.Item') >>> get_fullname(obj, 'Section') 'mkapi.core.base.Section' >>> get_fullname(obj, 'linker.link') 'mkapi.core.linker.link' >>> get_fullname(obj, 'abc') '' FUNCTION mkapi.core.object . split_prefix_and_name (obj) \u2192 (str, str) Splits an object full name into prefix and name. Parameters obj (any) \u2014 Object that has a module. Examples >>> import inspect >>> obj = get_object('mkapi.core') >>> split_prefix_and_name(obj) ('mkapi', 'core') >>> obj = get_object('mkapi.core.base') >>> split_prefix_and_name(obj) ('mkapi.core', 'base') >>> obj = get_object('mkapi.core.node.Node') >>> split_prefix_and_name(obj) ('mkapi.core.node', 'Node') >>> obj = get_object('mkapi.core.node.Node.get_markdown') >>> split_prefix_and_name(obj) ('mkapi.core.node.Node', 'get_markdown') FUNCTION mkapi.core.object . get_sourcefiles (obj) \u2192 list of str Returns a list of source file. If obj is a class, source files of its superclasses are also included. Parameters obj (any) \u2014 Object name. FUNCTION mkapi.core.object . from_object (obj) \u2192 bool Returns True, if the docstring of obj is the same as that of object . Parameters obj (any) \u2014 Object. Examples >>> class A: pass >>> from_object(A.__call__) True >>> from_object(A.__eq__) True >>> from_object(A.__getattribute__) True","title":"mkapi.core.object"},{"location":"api/mkapi.core.object/#mkapicoreobject","text":"This module provides utility functions that relates to object. Functions get_object (name) (any) \u2014 Reutrns an object specified by name . get_fullname (obj,name) (str) \u2014 Reutrns an object full name specified by name . split_prefix_and_name (obj) (str, str) \u2014 Splits an object full name into prefix and name. get_sourcefiles (obj) (list of str) \u2014 Returns a list of source file. from_object (obj) (bool) \u2014 Returns True, if the docstring of obj is the same as that of object .","title":"mkapi.core.object"},{"location":"api/mkapi.core.object/#mkapicoreobjectget_object","text":"Reutrns an object specified by name . Parameters name (str) \u2014 Object name. Examples >>> import inspect >>> obj = get_object('mkapi.core') >>> inspect.ismodule(obj) True >>> obj = get_object('mkapi.core.base') >>> inspect.ismodule(obj) True >>> obj = get_object('mkapi.core.node.Node') >>> inspect.isclass(obj) True >>> obj = get_object('mkapi.core.node.Node.get_markdown') >>> inspect.isfunction(obj) True","title":"mkapi.core.object.get_object"},{"location":"api/mkapi.core.object/#mkapicoreobjectget_fullname","text":"Reutrns an object full name specified by name . Parameters obj (any) \u2014 Object that has a module. name (str) \u2014 Object name in the module. Examples >>> import inspect >>> obj = get_object('mkapi.core.base.Item') >>> get_fullname(obj, 'Section') 'mkapi.core.base.Section' >>> get_fullname(obj, 'linker.link') 'mkapi.core.linker.link' >>> get_fullname(obj, 'abc') ''","title":"mkapi.core.object.get_fullname"},{"location":"api/mkapi.core.object/#mkapicoreobjectsplit_prefix_and_name","text":"Splits an object full name into prefix and name. Parameters obj (any) \u2014 Object that has a module. Examples >>> import inspect >>> obj = get_object('mkapi.core') >>> split_prefix_and_name(obj) ('mkapi', 'core') >>> obj = get_object('mkapi.core.base') >>> split_prefix_and_name(obj) ('mkapi.core', 'base') >>> obj = get_object('mkapi.core.node.Node') >>> split_prefix_and_name(obj) ('mkapi.core.node', 'Node') >>> obj = get_object('mkapi.core.node.Node.get_markdown') >>> split_prefix_and_name(obj) ('mkapi.core.node.Node', 'get_markdown')","title":"mkapi.core.object.split_prefix_and_name"},{"location":"api/mkapi.core.object/#mkapicoreobjectget_sourcefiles","text":"Returns a list of source file. If obj is a class, source files of its superclasses are also included. Parameters obj (any) \u2014 Object name.","title":"mkapi.core.object.get_sourcefiles"},{"location":"api/mkapi.core.object/#mkapicoreobjectfrom_object","text":"Returns True, if the docstring of obj is the same as that of object . Parameters obj (any) \u2014 Object. Examples >>> class A: pass >>> from_object(A.__call__) True >>> from_object(A.__eq__) True >>> from_object(A.__getattribute__) True","title":"mkapi.core.object.from_object"},{"location":"api/mkapi.core.page/","text":"MODULE MKAPI.CORE . PAGE This module provides a Page class that works with other converter. Classes Page \u2014 Page class works with MkapiPlugin . DATACLASS mkapi.core.page . Page (source, abs_src_path, abs_api_paths=<factory>) Page class works with MkapiPlugin . Parameters source (str) \u2014 Markdown source. abs_src_path (str) \u2014 Absolute source path of Markdown. abs_api_paths (list of str, optional) \u2014 A list of API paths. Attributes abs_src_path (str) \u2014 Absolute source path of Markdown. abs_api_paths (list of str) \u2014 A list of API paths. markdown (str) \u2014 Converted Markdown including API documentation. nodes (list of Node ) \u2014 A list of Node instances. Methods content (html) (str) \u2014 Returns updated HTML to MkapiPlugin . METHOD content (html) \u2192 str Returns updated HTML to MkapiPlugin . Parameters html (str) \u2014 Input HTML converted by MkDocs.","title":"mkapi.core.page"},{"location":"api/mkapi.core.page/#mkapicorepage","text":"This module provides a Page class that works with other converter. Classes Page \u2014 Page class works with MkapiPlugin .","title":"mkapi.core.page"},{"location":"api/mkapi.core.page/#mkapicorepagepage","text":"Page class works with MkapiPlugin . Parameters source (str) \u2014 Markdown source. abs_src_path (str) \u2014 Absolute source path of Markdown. abs_api_paths (list of str, optional) \u2014 A list of API paths. Attributes abs_src_path (str) \u2014 Absolute source path of Markdown. abs_api_paths (list of str) \u2014 A list of API paths. markdown (str) \u2014 Converted Markdown including API documentation. nodes (list of Node ) \u2014 A list of Node instances. Methods content (html) (str) \u2014 Returns updated HTML to MkapiPlugin .","title":"mkapi.core.page.Page"},{"location":"api/mkapi.core.page/#mkapicorepagepagecontent","text":"Returns updated HTML to MkapiPlugin . Parameters html (str) \u2014 Input HTML converted by MkDocs.","title":"mkapi.core.page.Page.content"},{"location":"api/mkapi.core.renderer/","text":"MODULE MKAPI.CORE . RENDERER This module provides Renderer class that renders Node instance to create API documentation. Attributes renderer ( Renderer ) \u2014 Renderer instance that can be used globally. Classes Renderer \u2014 Renderer instance renders Node instance recursively to create API documentation. DATACLASS mkapi.core.renderer . Renderer () Renderer instance renders Node instance recursively to create API documentation. Attributes templates (dict(str: Template)) \u2014 Jinja template dictionary. Methods render (node,filters) (str) \u2014 Returns a rendered HTML for Node. render_node (node,object,docstring,members) (str) \u2014 Returns a rendered HTML for Node using prerendered components. render_object (object,filters) (str) \u2014 Returns a rendered HTML for Object. render_object_member (name,url,signature) (str) \u2014 Returns a rendered HTML for Object in toc. render_docstring (docstring) (str) \u2014 Returns a rendered HTML for Docstring. render_section (section) (str) \u2014 Returns a rendered HTML for Section. render_module (module,filters) (str) \u2014 Returns a rendered Markdown for Module. METHOD render (node, filters=None) \u2192 str Returns a rendered HTML for Node. Parameters node ( Node ) \u2014 Node instance. filters (list of str, optional) \u2014 METHOD render_node (node, object, docstring, members) \u2192 str Returns a rendered HTML for Node using prerendered components. Parameters node ( Node ) \u2014 Node instance. object (str) \u2014 Rendered HTML for Object instance. docstring (str) \u2014 Rendered HTML for Docstring instance. members (list of str) \u2014 A list of rendered HTML for member Node instances. METHOD render_object (object, filters=None) \u2192 str Returns a rendered HTML for Object. Parameters object ( Object ) \u2014 Object instance. filters (list of str, optional) \u2014 METHOD render_object_member (name, url, signature) \u2192 str Returns a rendered HTML for Object in toc. Parameters name (str) \u2014 Object name. url (str) \u2014 Link to definition. signature (str) \u2014 Signature. METHOD render_docstring (docstring) \u2192 str Returns a rendered HTML for Docstring. Parameters docstring ( Docstring ) \u2014 Docstring instance. METHOD render_section (section) \u2192 str Returns a rendered HTML for Section. Parameters section ( Section ) \u2014 Section instance. METHOD render_module (module, filters) \u2192 str Returns a rendered Markdown for Module. Parameters module ( Module ) \u2014 Module instance. filters (list of str) \u2014 A list of filters. Avaiable filters: upper , inherit , strict , heading . Note This function returns Markdown instead of HTML. The returned Markdown will be converted into HTML by MkDocs. Then the HTML is rendered into HTML again by other functions in this module.","title":"mkapi.core.renderer"},{"location":"api/mkapi.core.renderer/#mkapicorerenderer","text":"This module provides Renderer class that renders Node instance to create API documentation. Attributes renderer ( Renderer ) \u2014 Renderer instance that can be used globally. Classes Renderer \u2014 Renderer instance renders Node instance recursively to create API documentation.","title":"mkapi.core.renderer"},{"location":"api/mkapi.core.renderer/#mkapicorerendererrenderer","text":"Renderer instance renders Node instance recursively to create API documentation. Attributes templates (dict(str: Template)) \u2014 Jinja template dictionary. Methods render (node,filters) (str) \u2014 Returns a rendered HTML for Node. render_node (node,object,docstring,members) (str) \u2014 Returns a rendered HTML for Node using prerendered components. render_object (object,filters) (str) \u2014 Returns a rendered HTML for Object. render_object_member (name,url,signature) (str) \u2014 Returns a rendered HTML for Object in toc. render_docstring (docstring) (str) \u2014 Returns a rendered HTML for Docstring. render_section (section) (str) \u2014 Returns a rendered HTML for Section. render_module (module,filters) (str) \u2014 Returns a rendered Markdown for Module.","title":"mkapi.core.renderer.Renderer"},{"location":"api/mkapi.core.renderer/#mkapicorerendererrendererrender","text":"Returns a rendered HTML for Node. Parameters node ( Node ) \u2014 Node instance. filters (list of str, optional) \u2014","title":"mkapi.core.renderer.Renderer.render"},{"location":"api/mkapi.core.renderer/#mkapicorerendererrendererrender_node","text":"Returns a rendered HTML for Node using prerendered components. Parameters node ( Node ) \u2014 Node instance. object (str) \u2014 Rendered HTML for Object instance. docstring (str) \u2014 Rendered HTML for Docstring instance. members (list of str) \u2014 A list of rendered HTML for member Node instances.","title":"mkapi.core.renderer.Renderer.render_node"},{"location":"api/mkapi.core.renderer/#mkapicorerendererrendererrender_object","text":"Returns a rendered HTML for Object. Parameters object ( Object ) \u2014 Object instance. filters (list of str, optional) \u2014","title":"mkapi.core.renderer.Renderer.render_object"},{"location":"api/mkapi.core.renderer/#mkapicorerendererrendererrender_object_member","text":"Returns a rendered HTML for Object in toc. Parameters name (str) \u2014 Object name. url (str) \u2014 Link to definition. signature (str) \u2014 Signature.","title":"mkapi.core.renderer.Renderer.render_object_member"},{"location":"api/mkapi.core.renderer/#mkapicorerendererrendererrender_docstring","text":"Returns a rendered HTML for Docstring. Parameters docstring ( Docstring ) \u2014 Docstring instance.","title":"mkapi.core.renderer.Renderer.render_docstring"},{"location":"api/mkapi.core.renderer/#mkapicorerendererrendererrender_section","text":"Returns a rendered HTML for Section. Parameters section ( Section ) \u2014 Section instance.","title":"mkapi.core.renderer.Renderer.render_section"},{"location":"api/mkapi.core.renderer/#mkapicorerendererrendererrender_module","text":"Returns a rendered Markdown for Module. Parameters module ( Module ) \u2014 Module instance. filters (list of str) \u2014 A list of filters. Avaiable filters: upper , inherit , strict , heading . Note This function returns Markdown instead of HTML. The returned Markdown will be converted into HTML by MkDocs. Then the HTML is rendered into HTML again by other functions in this module.","title":"mkapi.core.renderer.Renderer.render_module"},{"location":"api/mkapi.core.signature/","text":"MODULE MKAPI.CORE . SIGNATURE This module provides Signature class that inspects object and creates signature and types. Classes Signature \u2014 Signature class. Functions to_string (annotation,kind) (str) \u2014 Returns string expression of annotation. a_of_b (annotation) (str) \u2014 Returns A of B style string. union (annotation) (str) \u2014 Returns a string for union annotation. DATACLASS mkapi.core.signature . Signature (obj=None) Signature class. Parameters obj (any, optional) \u2014 Object Attributes obj (any) \u2014 Object signature (Signature, optional) \u2014 inspect.Signature instance. parameters (dict(str: str)) \u2014 Parameter dictionary. Key is parameter name and value is type string. defaults (dict(str: any)) \u2014 Default value dictionary. Key is parameter name and value is default value. attributes (dict(str: str)) \u2014 Attribute dictionary for dataclass. Key is attribute name and value is type string. attributes_desc (dict(str: str)) \u2014 returns (str) \u2014 Returned type string. Used in Returns section. yields (str) \u2014 Yielded type string. Used in Yields section. FUNCTION mkapi.core.signature . to_string (annotation, kind='returns') \u2192 str Returns string expression of annotation. If possible, type string includes link. Parameters annotation \u2014 Annotation kind (str, optional) \u2014 'returns' or 'yields' Examples >>> from typing import Iterator, List >>> to_string(Iterator[str]) 'iterator of str' >>> to_string(Iterator[str], 'yields') 'str' >>> from mkapi.core.node import Node >>> to_string(List[Node]) 'list of [Node](!mkapi.core.node.Node)' FUNCTION mkapi.core.signature . a_of_b (annotation) \u2192 str Returns A of B style string. Parameters annotation \u2014 Annotation Examples >>> from typing import List, Iterable, Iterator >>> a = List[str] >>> a_of_b(a) 'list of str' >>> a = Iterable[int] >>> a_of_b(a) 'iterable of int' >>> a = Iterator[float] >>> a_of_b(a) 'iterator of float' FUNCTION mkapi.core.signature . union (annotation) \u2192 str Returns a string for union annotation. Parameters annotation \u2014 Annotation Examples >>> from typing import List, Optional, Tuple, Union >>> a = Optional[List[str]] >>> union(a) 'list of str, optional' >>> a = Union[str, int] >>> union(a) 'str or int' >>> a = Union[str, int, float] >>> union(a) 'str, int, or float' >>> a = Union[List[str], Tuple[int, int]] >>> union(a) 'Union(list of str, (int, int))'","title":"mkapi.core.signature"},{"location":"api/mkapi.core.signature/#mkapicoresignature","text":"This module provides Signature class that inspects object and creates signature and types. Classes Signature \u2014 Signature class. Functions to_string (annotation,kind) (str) \u2014 Returns string expression of annotation. a_of_b (annotation) (str) \u2014 Returns A of B style string. union (annotation) (str) \u2014 Returns a string for union annotation.","title":"mkapi.core.signature"},{"location":"api/mkapi.core.signature/#mkapicoresignaturesignature","text":"Signature class. Parameters obj (any, optional) \u2014 Object Attributes obj (any) \u2014 Object signature (Signature, optional) \u2014 inspect.Signature instance. parameters (dict(str: str)) \u2014 Parameter dictionary. Key is parameter name and value is type string. defaults (dict(str: any)) \u2014 Default value dictionary. Key is parameter name and value is default value. attributes (dict(str: str)) \u2014 Attribute dictionary for dataclass. Key is attribute name and value is type string. attributes_desc (dict(str: str)) \u2014 returns (str) \u2014 Returned type string. Used in Returns section. yields (str) \u2014 Yielded type string. Used in Yields section.","title":"mkapi.core.signature.Signature"},{"location":"api/mkapi.core.signature/#mkapicoresignatureto_string","text":"Returns string expression of annotation. If possible, type string includes link. Parameters annotation \u2014 Annotation kind (str, optional) \u2014 'returns' or 'yields' Examples >>> from typing import Iterator, List >>> to_string(Iterator[str]) 'iterator of str' >>> to_string(Iterator[str], 'yields') 'str' >>> from mkapi.core.node import Node >>> to_string(List[Node]) 'list of [Node](!mkapi.core.node.Node)'","title":"mkapi.core.signature.to_string"},{"location":"api/mkapi.core.signature/#mkapicoresignaturea_of_b","text":"Returns A of B style string. Parameters annotation \u2014 Annotation Examples >>> from typing import List, Iterable, Iterator >>> a = List[str] >>> a_of_b(a) 'list of str' >>> a = Iterable[int] >>> a_of_b(a) 'iterable of int' >>> a = Iterator[float] >>> a_of_b(a) 'iterator of float'","title":"mkapi.core.signature.a_of_b"},{"location":"api/mkapi.core.signature/#mkapicoresignatureunion","text":"Returns a string for union annotation. Parameters annotation \u2014 Annotation Examples >>> from typing import List, Optional, Tuple, Union >>> a = Optional[List[str]] >>> union(a) 'list of str, optional' >>> a = Union[str, int] >>> union(a) 'str or int' >>> a = Union[str, int, float] >>> union(a) 'str, int, or float' >>> a = Union[List[str], Tuple[int, int]] >>> union(a) 'Union(list of str, (int, int))'","title":"mkapi.core.signature.union"},{"location":"api/mkapi.core.tree/","text":"MODULE MKAPI.CORE . TREE This module provides base class of Node and Module . Classes Tree \u2014 Tree class. This class is the base class of Node and Module . DATACLASS mkapi.core.tree . Tree (obj, recursive=True) Tree class. This class is the base class of Node and Module . Parameters obj (any) \u2014 Object. recursive (bool, optional) \u2014 Attributes obj (any) \u2014 Object. sourcefile (str) \u2014 Source file path. lineno (int) \u2014 Line number. object ( Object ) \u2014 Object instance. docstring ( Docstring ) \u2014 Docstring instance. parent (any) \u2014 Parent instance. members (list of any) \u2014 Member instances. recursive (bool) \u2014 Methods get_kind () (str) \u2014 Returns kind of self. get_members () (list of Tree) \u2014 Returns a list of members. get_markdown () (str) \u2014 Returns a Markdown source for docstring of self. METHOD get_kind () \u2192 str Returns kind of self. METHOD get_members () \u2192 list of Tree Returns a list of members. METHOD get_markdown () \u2192 str Returns a Markdown source for docstring of self.","title":"mkapi.core.tree"},{"location":"api/mkapi.core.tree/#mkapicoretree","text":"This module provides base class of Node and Module . Classes Tree \u2014 Tree class. This class is the base class of Node and Module .","title":"mkapi.core.tree"},{"location":"api/mkapi.core.tree/#mkapicoretreetree","text":"Tree class. This class is the base class of Node and Module . Parameters obj (any) \u2014 Object. recursive (bool, optional) \u2014 Attributes obj (any) \u2014 Object. sourcefile (str) \u2014 Source file path. lineno (int) \u2014 Line number. object ( Object ) \u2014 Object instance. docstring ( Docstring ) \u2014 Docstring instance. parent (any) \u2014 Parent instance. members (list of any) \u2014 Member instances. recursive (bool) \u2014 Methods get_kind () (str) \u2014 Returns kind of self. get_members () (list of Tree) \u2014 Returns a list of members. get_markdown () (str) \u2014 Returns a Markdown source for docstring of self.","title":"mkapi.core.tree.Tree"},{"location":"api/mkapi.core.tree/#mkapicoretreetreeget_kind","text":"Returns kind of self.","title":"mkapi.core.tree.Tree.get_kind"},{"location":"api/mkapi.core.tree/#mkapicoretreetreeget_members","text":"Returns a list of members.","title":"mkapi.core.tree.Tree.get_members"},{"location":"api/mkapi.core.tree/#mkapicoretreetreeget_markdown","text":"Returns a Markdown source for docstring of self.","title":"mkapi.core.tree.Tree.get_markdown"},{"location":"api/mkapi.plugins.mkdocs/","text":"MODULE MKAPI.PLUGINS. MKDOCS This module provides the MkapiPlugin class. MkapiPlugin is a MkDocs plugin that creates Python API documentation from Docstring. Classes MkapiPlugin \u2014 MkapiPlugin class for API generation. CLASS mkapi.plugins.mkdocs . MkapiPlugin () Bases mkdocs.plugins.BasePlugin MkapiPlugin class for API generation. Methods load_config (options,config_file_path) \u2014 Load config from a dict of options. Returns a tuple of (errors, warnings). on_config (config) \u2014 Inserts src_dirs to sys.path . on_files (files,config) \u2014 Collects plugin CSS ans JavaScript and appends them to files . on_page_markdown (markdown,page,config,files) \u2014 Converts Markdown source to intermidiate version. on_page_content (html,page,config,files) \u2014 Merges html and MkApi's node structure. METHOD load_config (options, config_file_path=None) Load config from a dict of options. Returns a tuple of (errors, warnings). Parameters options \u2014 config_file_path (, optional) \u2014 METHOD on_config (config) Inserts src_dirs to sys.path . Parameters config \u2014 METHOD on_files (files, config) Collects plugin CSS ans JavaScript and appends them to files . Parameters files \u2014 config \u2014 METHOD on_page_markdown (markdown, page, config, files) Converts Markdown source to intermidiate version. Parameters markdown \u2014 page \u2014 config \u2014 files \u2014 METHOD on_page_content (html, page, config, files) Merges html and MkApi's node structure. Parameters html \u2014 page \u2014 config \u2014 files \u2014","title":"mkapi.plugins.mkdocs"},{"location":"api/mkapi.plugins.mkdocs/#mkapipluginsmkdocs","text":"This module provides the MkapiPlugin class. MkapiPlugin is a MkDocs plugin that creates Python API documentation from Docstring. Classes MkapiPlugin \u2014 MkapiPlugin class for API generation.","title":"mkapi.plugins.mkdocs"},{"location":"api/mkapi.plugins.mkdocs/#mkapipluginsmkdocsmkapiplugin","text":"Bases mkdocs.plugins.BasePlugin MkapiPlugin class for API generation. Methods load_config (options,config_file_path) \u2014 Load config from a dict of options. Returns a tuple of (errors, warnings). on_config (config) \u2014 Inserts src_dirs to sys.path . on_files (files,config) \u2014 Collects plugin CSS ans JavaScript and appends them to files . on_page_markdown (markdown,page,config,files) \u2014 Converts Markdown source to intermidiate version. on_page_content (html,page,config,files) \u2014 Merges html and MkApi's node structure.","title":"mkapi.plugins.mkdocs.MkapiPlugin"},{"location":"api/mkapi.plugins.mkdocs/#mkdocspluginsbasepluginload_config","text":"Load config from a dict of options. Returns a tuple of (errors, warnings). Parameters options \u2014 config_file_path (, optional) \u2014","title":"mkdocs.plugins.BasePlugin.load_config"},{"location":"api/mkapi.plugins.mkdocs/#mkapipluginsmkdocsmkapipluginon_config","text":"Inserts src_dirs to sys.path . Parameters config \u2014","title":"mkapi.plugins.mkdocs.MkapiPlugin.on_config"},{"location":"api/mkapi.plugins.mkdocs/#mkapipluginsmkdocsmkapipluginon_files","text":"Collects plugin CSS ans JavaScript and appends them to files . Parameters files \u2014 config \u2014","title":"mkapi.plugins.mkdocs.MkapiPlugin.on_files"},{"location":"api/mkapi.plugins.mkdocs/#mkapipluginsmkdocsmkapipluginon_page_markdown","text":"Converts Markdown source to intermidiate version. Parameters markdown \u2014 page \u2014 config \u2014 files \u2014","title":"mkapi.plugins.mkdocs.MkapiPlugin.on_page_markdown"},{"location":"api/mkapi.plugins.mkdocs/#mkapipluginsmkdocsmkapipluginon_page_content","text":"Merges html and MkApi's node structure. Parameters html \u2014 page \u2014 config \u2014 files \u2014","title":"mkapi.plugins.mkdocs.MkapiPlugin.on_page_content"},{"location":"appendix/inherit/","text":"Inheritance and Special Methods Examples <!-- .mkapi-node { border: 2px dashed #88AA88; } --> File 7 appendix/inherit.py class Base: \"\"\"Base class.\"\"\" def func(self): \"\"\"Function.\"\"\" class Sub(Base): \"\"\"Subclass.\"\"\" # Should be added. def func(self): pass # Should not be added. def __call__(self): pass # Should not be added. def __repr__(self): pass # Should not be added. def __str__(self): pass # and so on. Superclass ![mkapi](appendix.inherit.Base) CLASS appendix.inherit. Base () Base class. Methods func () \u2014 Function. METHOD func () Function. Subclass ![mkapi](appendix.inherit.Sub) CLASS appendix.inherit. Sub () Bases appendix.inherit.Base Subclass. Methods func () \u2014 Function. METHOD func () Function. Implementation There are two ways to get docstring: __doc__ attribute or inspect.getdoc() . import inspect from appendix.inherit import Base, Sub Base.func.__doc__, inspect.getdoc(Base.func) [2] 2020-06-09 15:42:11 ( 5.00ms ) python3 ( 432ms ) ('Function.', 'Function.') Sub.func.__doc__, inspect.getdoc(Sub.func) [3] 2020-06-09 15:42:11 ( 3.00ms ) python3 ( 435ms ) (None, 'Function.') Because Sub.func() has no docstring, its __doc__ attribute is None . On the other hand, the super class Base.func() has docstring, so that you can get the inherited docstring using inspect.getdoc() . Therefore, MkApi uses inspect.getdoc() . Now, let's see some special methods: Sub.__call__.__doc__, inspect.getdoc(Sub.__call__) [4] 2020-06-09 15:42:11 ( 3.00ms ) python3 ( 438ms ) (None, 'Call self as a function.') Sub.__repr__.__doc__, inspect.getdoc(Sub.__repr__) [5] 2020-06-09 15:42:11 ( 3.00ms ) python3 ( 441ms ) (None, 'Return repr(self).') Sub.__repr__.__doc__, inspect.getdoc(Sub.__repr__) [6] 2020-06-09 15:42:11 ( 3.00ms ) python3 ( 444ms ) (None, 'Return repr(self).') These docstrings come from object . for name, obj in object.__dict__.items(): doc = obj.__doc__ if doc and '\\n' not in doc: print(f\"{name}: {doc}\") [7] 2020-06-09 15:42:11 ( 3.00ms ) python3 ( 447ms ) __repr__: Return repr(self). __hash__: Return hash(self). __str__: Return str(self). __getattribute__: Return getattr(self, name). __setattr__: Implement setattr(self, name, value). __delattr__: Implement delattr(self, name). __lt__: Return self<value. __le__: Return self<=value. __eq__: Return self==value. __ne__: Return self!=value. __gt__: Return self>value. __ge__: Return self>=value. __init__: Initialize self. See help(type(self)) for accurate signature. __new__: Create and return a new object. See help(type) for accurate signature. __reduce_ex__: Helper for pickle. __reduce__: Helper for pickle. __format__: Default object formatter. __sizeof__: Size of object in memory, in bytes. __dir__: Default dir() implementation. __class__: the object's class If docstring of an ojbect is equal to that of object , the object doesn't be added into API documentation.","title":"Inheritance and Special Methods"},{"location":"appendix/inherit/#inheritance-and-special-methods","text":"","title":"Inheritance and Special Methods"},{"location":"appendix/inherit/#examples","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; } --> File 7 appendix/inherit.py class Base: \"\"\"Base class.\"\"\" def func(self): \"\"\"Function.\"\"\" class Sub(Base): \"\"\"Subclass.\"\"\" # Should be added. def func(self): pass # Should not be added. def __call__(self): pass # Should not be added. def __repr__(self): pass # Should not be added. def __str__(self): pass # and so on.","title":"Examples"},{"location":"appendix/inherit/#superclass","text":"![mkapi](appendix.inherit.Base) CLASS appendix.inherit. Base () Base class. Methods func () \u2014 Function. METHOD func () Function.","title":"Superclass"},{"location":"appendix/inherit/#subclass","text":"![mkapi](appendix.inherit.Sub) CLASS appendix.inherit. Sub () Bases appendix.inherit.Base Subclass. Methods func () \u2014 Function. METHOD func () Function.","title":"Subclass"},{"location":"appendix/inherit/#implementation","text":"There are two ways to get docstring: __doc__ attribute or inspect.getdoc() . import inspect from appendix.inherit import Base, Sub Base.func.__doc__, inspect.getdoc(Base.func) [2] 2020-06-09 15:42:11 ( 5.00ms ) python3 ( 432ms ) ('Function.', 'Function.') Sub.func.__doc__, inspect.getdoc(Sub.func) [3] 2020-06-09 15:42:11 ( 3.00ms ) python3 ( 435ms ) (None, 'Function.') Because Sub.func() has no docstring, its __doc__ attribute is None . On the other hand, the super class Base.func() has docstring, so that you can get the inherited docstring using inspect.getdoc() . Therefore, MkApi uses inspect.getdoc() . Now, let's see some special methods: Sub.__call__.__doc__, inspect.getdoc(Sub.__call__) [4] 2020-06-09 15:42:11 ( 3.00ms ) python3 ( 438ms ) (None, 'Call self as a function.') Sub.__repr__.__doc__, inspect.getdoc(Sub.__repr__) [5] 2020-06-09 15:42:11 ( 3.00ms ) python3 ( 441ms ) (None, 'Return repr(self).') Sub.__repr__.__doc__, inspect.getdoc(Sub.__repr__) [6] 2020-06-09 15:42:11 ( 3.00ms ) python3 ( 444ms ) (None, 'Return repr(self).') These docstrings come from object . for name, obj in object.__dict__.items(): doc = obj.__doc__ if doc and '\\n' not in doc: print(f\"{name}: {doc}\") [7] 2020-06-09 15:42:11 ( 3.00ms ) python3 ( 447ms ) __repr__: Return repr(self). __hash__: Return hash(self). __str__: Return str(self). __getattribute__: Return getattr(self, name). __setattr__: Implement setattr(self, name, value). __delattr__: Implement delattr(self, name). __lt__: Return self<value. __le__: Return self<=value. __eq__: Return self==value. __ne__: Return self!=value. __gt__: Return self>value. __ge__: Return self>=value. __init__: Initialize self. See help(type(self)) for accurate signature. __new__: Create and return a new object. See help(type) for accurate signature. __reduce_ex__: Helper for pickle. __reduce__: Helper for pickle. __format__: Default object formatter. __sizeof__: Size of object in memory, in bytes. __dir__: Default dir() implementation. __class__: the object's class If docstring of an ojbect is equal to that of object , the object doesn't be added into API documentation.","title":"Implementation"},{"location":"appendix/method/","text":"Method and Property Types <!-- .mkapi-node { border: 2px dashed #88AA88; } --> File 6 appendix/method.py class MethodTypeExample: \"\"\"Example class.\"\"\" def method(self, x): \"\"\"Method.\"\"\" def generator(self, x): \"\"\"Generator.\"\"\" yield 1 @classmethod def class_method(cls, x): \"\"\"Class method.\"\"\" @staticmethod def static_method(x): \"\"\"Static method.\"\"\" @property def read_only_property(x): \"\"\"Read only property.\"\"\" @property def read_write_property(x): \"\"\"Read write property.\"\"\" @read_write_property.setter def read_write_property(x): pass ![mkapi](appendix.method.MethodTypeExample) CLASS appendix.method. MethodTypeExample () Example class. Attributes read_only_property \u2014 Read only property. read_write_property \u2014 Read write property. Methods method (x) \u2014 Method. generator (x) \u2014 Generator. class_method (x) \u2014 Class method. static_method (x) \u2014 Static method. METHOD method (x) Method. GENERATOR generator (x) Generator. CLASSMETHOD class_method (x) Class method. STATICMETHOD static_method (x) Static method.","title":"Method and Property Types"},{"location":"appendix/method/#method-and-property-types","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; } --> File 6 appendix/method.py class MethodTypeExample: \"\"\"Example class.\"\"\" def method(self, x): \"\"\"Method.\"\"\" def generator(self, x): \"\"\"Generator.\"\"\" yield 1 @classmethod def class_method(cls, x): \"\"\"Class method.\"\"\" @staticmethod def static_method(x): \"\"\"Static method.\"\"\" @property def read_only_property(x): \"\"\"Read only property.\"\"\" @property def read_write_property(x): \"\"\"Read write property.\"\"\" @read_write_property.setter def read_write_property(x): pass ![mkapi](appendix.method.MethodTypeExample) CLASS appendix.method. MethodTypeExample () Example class. Attributes read_only_property \u2014 Read only property. read_write_property \u2014 Read write property. Methods method (x) \u2014 Method. generator (x) \u2014 Generator. class_method (x) \u2014 Class method. static_method (x) \u2014 Static method. METHOD method (x) Method. GENERATOR generator (x) Generator. CLASSMETHOD class_method (x) Class method. STATICMETHOD static_method (x) Static method.","title":"Method and Property Types"},{"location":"appendix/order/","text":"Ordering Members in Different Files <!-- .mkapi-node { border: 2px dashed #88AA88; } --> Class members that are defined in different files are sorted by a key of (minus of source file index , line number). File 8 appendix/member_order_base.py # other code # other code # other code # other code # other code class A: def a(self): \"\"\"mro index: 1, sourcefile index: 1, line number: 13.\"\"\" File 9 appendix/member_order_sub.py from appendix.member_order_base import A class B: def b(self): \"\"\"mro index: 2, sourcefile index: 0, line number: 5.\"\"\" class C(A, B): def c(self): \"\"\"mro index: 0, sourcefile index: 0, line number: 10.\"\"\" CLASS appendix.member_order_base. A () Methods a () \u2014 mro index: 1, sourcefile index: 1, line number: 13. METHOD a () mro index: 1, sourcefile index: 1, line number: 13. CLASS appendix.member_order_sub. B () Methods b () \u2014 mro index: 2, sourcefile index: 0, line number: 5. METHOD b () mro index: 2, sourcefile index: 0, line number: 5. CLASS appendix.member_order_sub. C () Bases appendix.member_order_base.A appendix.member_order_sub.B Methods a () \u2014 mro index: 1, sourcefile index: 1, line number: 13. b () \u2014 mro index: 2, sourcefile index: 0, line number: 5. c () \u2014 mro index: 0, sourcefile index: 0, line number: 10. METHOD a () mro index: 1, sourcefile index: 1, line number: 13. METHOD b () mro index: 2, sourcefile index: 0, line number: 5. METHOD c () mro index: 0, sourcefile index: 0, line number: 10.","title":"Ordering Members in Different Files"},{"location":"appendix/order/#ordering-members-in-different-files","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; } --> Class members that are defined in different files are sorted by a key of (minus of source file index , line number). File 8 appendix/member_order_base.py # other code # other code # other code # other code # other code class A: def a(self): \"\"\"mro index: 1, sourcefile index: 1, line number: 13.\"\"\" File 9 appendix/member_order_sub.py from appendix.member_order_base import A class B: def b(self): \"\"\"mro index: 2, sourcefile index: 0, line number: 5.\"\"\" class C(A, B): def c(self): \"\"\"mro index: 0, sourcefile index: 0, line number: 10.\"\"\" CLASS appendix.member_order_base. A () Methods a () \u2014 mro index: 1, sourcefile index: 1, line number: 13. METHOD a () mro index: 1, sourcefile index: 1, line number: 13. CLASS appendix.member_order_sub. B () Methods b () \u2014 mro index: 2, sourcefile index: 0, line number: 5. METHOD b () mro index: 2, sourcefile index: 0, line number: 5. CLASS appendix.member_order_sub. C () Bases appendix.member_order_base.A appendix.member_order_sub.B Methods a () \u2014 mro index: 1, sourcefile index: 1, line number: 13. b () \u2014 mro index: 2, sourcefile index: 0, line number: 5. c () \u2014 mro index: 0, sourcefile index: 0, line number: 10. METHOD a () mro index: 1, sourcefile index: 1, line number: 13. METHOD b () mro index: 2, sourcefile index: 0, line number: 5. METHOD c () mro index: 0, sourcefile index: 0, line number: 10.","title":"Ordering Members in Different Files"},{"location":"appendix/type/","text":"Type Annotation Examples <!-- .mkapi-node { border: 2px dashed #88AA88; } --> import mkapi [1] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 371ms ) Builtin Types def builtin(i: int, f: float, s: str, l: list, d: dict, t: tuple, e: set) -> bool: \"\"\"Function with buitin type annotation. Args: i: Integer. f: Float. s: String. l: List. d: Dictionary. t: Tuple. e: Set. \"\"\" return True mkapi.display(builtin) [2] 2020-06-13 11:11:39 ( 9.00ms ) python3 ( 380ms ) FUNCTION builtin (i, f, s, l, d, t, e) \u2192 bool Function with buitin type annotation. Parameters i (int) \u2014 Integer. f (float) \u2014 Float. s (str) \u2014 String. l (list) \u2014 List. d (dict) \u2014 Dictionary. t (tuple) \u2014 Tuple. e (set) \u2014 Set. Builtin Types with Default def builtin_default(i: int = 1, f: float = 1.0, s: str = \"abc\", t: tuple = (1, 2)): \"\"\"Function with buitin type annotation and default. Args: i: Integer. Default={default}. f: Float. Default={default}. s: String. Default={default}. t: Tuple. Default={default}. \"\"\" mkapi.display(builtin_default) [3] 2020-06-13 11:11:39 ( 8.00ms ) python3 ( 388ms ) FUNCTION builtin_default (i=1, f=1.0, s='abc', t=(1, 2)) Function with buitin type annotation and default. Parameters i (int, optional) \u2014 Integer. Default=1. f (float, optional) \u2014 Float. Default=1.0. s (str, optional) \u2014 String. Default='abc'. t (tuple, optional) \u2014 Tuple. Default=(1, 2). Basic Collection Types from typing import Dict, List, Set, Tuple def basic(l: List[int], t: Tuple[str, int, float], d: Dict[str, int], s: Set[int]): \"\"\"Function with basic collection type annotation. Args: l: List of integer. t: Tuple of (string, string). d: Dictionary from string to integer. s: Set of integer. \"\"\" mkapi.display(basic) [4] 2020-06-13 11:11:39 ( 8.00ms ) python3 ( 396ms ) FUNCTION basic (l, t, d, s) Function with basic collection type annotation. Parameters l (list of int) \u2014 List of integer. t (str, int, float) \u2014 Tuple of (string, string). d (dict(str: int)) \u2014 Dictionary from string to integer. s (set of int) \u2014 Set of integer. Iterator and Iterable from typing import Iterator, Iterable def function(x: Iterable[str]) -> Iterator[str]: \"\"\"Function that returns an iterator. Args: x: Iterable of string \"\"\" return iter(x) mkapi.display(function) [5] 2020-06-13 11:11:39 ( 7.00ms ) python3 ( 403ms ) FUNCTION function (x) \u2192 iterator of str Function that returns an iterator. Parameters x (iterable of str) \u2014 Iterable of string def generator(x: Iterable[str]) -> Iterator[str]: \"\"\"Generator that yields string.\"\"\" yield from x mkapi.display(generator) [6] 2020-06-13 11:11:39 ( 7.00ms ) python3 ( 410ms ) GENERATOR generator (x) \u2192 str Generator that yields string. Union and Optional from typing import Optional, Union def optional(x: Optional[List[int]]): \"\"\"Function with optional list. Args: x: List of integer or None. \"\"\" mkapi.display(optional) [7] 2020-06-13 11:11:39 ( 8.00ms ) python3 ( 418ms ) FUNCTION optional (x) Function with optional list. Parameters x (list of int, optional) \u2014 List of integer or None. def optional_default(x: Optional[List[int]] = None): \"\"\"Function with optional list and default. Args: x: List of integer or None \"\"\" mkapi.display(optional_default) [8] 2020-06-13 11:11:39 ( 7.00ms ) python3 ( 425ms ) FUNCTION optional_default (x=None) Function with optional list and default. Parameters x (list of int, optional) \u2014 List of integer or None def union(x: Union[int, float], y: Union[int, str, dict]): \"\"\"Function with union of builtin. Args: x: Integer or float. y: Integer, string, or dictionary. \"\"\" mkapi.display(union) [9] 2020-06-13 11:11:39 ( 8.00ms ) python3 ( 433ms ) FUNCTION union (x, y) Function with union of builtin. Parameters x (int or float) \u2014 Integer or float. y (int, str, or dict) \u2014 Integer, string, or dictionary. def union_collection(x: Union[List[int], Tuple[str, str]]): \"\"\"Function with union of collection. Args: x: List of integer or tuple of (string, string). \"\"\" mkapi.display(union_collection) [10] 2020-06-13 11:11:39 ( 8.00ms ) python3 ( 441ms ) FUNCTION union_collection (x) Function with union of collection. Parameters x (Union(list of int, (str, str))) \u2014 List of integer or tuple of (string, string).","title":"Type Annotation Examples"},{"location":"appendix/type/#type-annotation-examples","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; } --> import mkapi [1] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 371ms )","title":"Type Annotation Examples"},{"location":"appendix/type/#builtin-types","text":"def builtin(i: int, f: float, s: str, l: list, d: dict, t: tuple, e: set) -> bool: \"\"\"Function with buitin type annotation. Args: i: Integer. f: Float. s: String. l: List. d: Dictionary. t: Tuple. e: Set. \"\"\" return True mkapi.display(builtin) [2] 2020-06-13 11:11:39 ( 9.00ms ) python3 ( 380ms ) FUNCTION builtin (i, f, s, l, d, t, e) \u2192 bool Function with buitin type annotation. Parameters i (int) \u2014 Integer. f (float) \u2014 Float. s (str) \u2014 String. l (list) \u2014 List. d (dict) \u2014 Dictionary. t (tuple) \u2014 Tuple. e (set) \u2014 Set.","title":"Builtin Types"},{"location":"appendix/type/#builtin-types-with-default","text":"def builtin_default(i: int = 1, f: float = 1.0, s: str = \"abc\", t: tuple = (1, 2)): \"\"\"Function with buitin type annotation and default. Args: i: Integer. Default={default}. f: Float. Default={default}. s: String. Default={default}. t: Tuple. Default={default}. \"\"\" mkapi.display(builtin_default) [3] 2020-06-13 11:11:39 ( 8.00ms ) python3 ( 388ms ) FUNCTION builtin_default (i=1, f=1.0, s='abc', t=(1, 2)) Function with buitin type annotation and default. Parameters i (int, optional) \u2014 Integer. Default=1. f (float, optional) \u2014 Float. Default=1.0. s (str, optional) \u2014 String. Default='abc'. t (tuple, optional) \u2014 Tuple. Default=(1, 2).","title":"Builtin Types with Default"},{"location":"appendix/type/#basic-collection-types","text":"from typing import Dict, List, Set, Tuple def basic(l: List[int], t: Tuple[str, int, float], d: Dict[str, int], s: Set[int]): \"\"\"Function with basic collection type annotation. Args: l: List of integer. t: Tuple of (string, string). d: Dictionary from string to integer. s: Set of integer. \"\"\" mkapi.display(basic) [4] 2020-06-13 11:11:39 ( 8.00ms ) python3 ( 396ms ) FUNCTION basic (l, t, d, s) Function with basic collection type annotation. Parameters l (list of int) \u2014 List of integer. t (str, int, float) \u2014 Tuple of (string, string). d (dict(str: int)) \u2014 Dictionary from string to integer. s (set of int) \u2014 Set of integer.","title":"Basic Collection Types"},{"location":"appendix/type/#iterator-and-iterable","text":"from typing import Iterator, Iterable def function(x: Iterable[str]) -> Iterator[str]: \"\"\"Function that returns an iterator. Args: x: Iterable of string \"\"\" return iter(x) mkapi.display(function) [5] 2020-06-13 11:11:39 ( 7.00ms ) python3 ( 403ms ) FUNCTION function (x) \u2192 iterator of str Function that returns an iterator. Parameters x (iterable of str) \u2014 Iterable of string def generator(x: Iterable[str]) -> Iterator[str]: \"\"\"Generator that yields string.\"\"\" yield from x mkapi.display(generator) [6] 2020-06-13 11:11:39 ( 7.00ms ) python3 ( 410ms ) GENERATOR generator (x) \u2192 str Generator that yields string.","title":"Iterator and Iterable"},{"location":"appendix/type/#union-and-optional","text":"from typing import Optional, Union def optional(x: Optional[List[int]]): \"\"\"Function with optional list. Args: x: List of integer or None. \"\"\" mkapi.display(optional) [7] 2020-06-13 11:11:39 ( 8.00ms ) python3 ( 418ms ) FUNCTION optional (x) Function with optional list. Parameters x (list of int, optional) \u2014 List of integer or None. def optional_default(x: Optional[List[int]] = None): \"\"\"Function with optional list and default. Args: x: List of integer or None \"\"\" mkapi.display(optional_default) [8] 2020-06-13 11:11:39 ( 7.00ms ) python3 ( 425ms ) FUNCTION optional_default (x=None) Function with optional list and default. Parameters x (list of int, optional) \u2014 List of integer or None def union(x: Union[int, float], y: Union[int, str, dict]): \"\"\"Function with union of builtin. Args: x: Integer or float. y: Integer, string, or dictionary. \"\"\" mkapi.display(union) [9] 2020-06-13 11:11:39 ( 8.00ms ) python3 ( 433ms ) FUNCTION union (x, y) Function with union of builtin. Parameters x (int or float) \u2014 Integer or float. y (int, str, or dict) \u2014 Integer, string, or dictionary. def union_collection(x: Union[List[int], Tuple[str, str]]): \"\"\"Function with union of collection. Args: x: List of integer or tuple of (string, string). \"\"\" mkapi.display(union_collection) [10] 2020-06-13 11:11:39 ( 8.00ms ) python3 ( 441ms ) FUNCTION union_collection (x) Function with union of collection. Parameters x (Union(list of int, (str, str))) \u2014 List of integer or tuple of (string, string).","title":"Union and Optional"},{"location":"examples/google_style/","text":"Google Style <!-- .mkapi-node { border: 2px dashed #88AA88; } --> Let's start realistic examples. Here, a sample Python file google_style.py is stored under the examples directory relative to the mkdocs.yml directory, so you should configure mkdocs.yml like below. In addition, we add two extensions and an extra javascript for demonstration. plugins: - search - mkapi: src_dirs: [examples] markdown_extensions: - admonition - pymdownx.arithmatex extra_javascript: # for pymdownx.arithmatex - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML Function The google_style module defines a simple function add() . Code 1 google_style.add() def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Args: x: The first parameter. y: The second parameter. Default={default}. Returns: Added value. Examples: Examples should be written in doctest format >>> add(1, 2) 3 !!! note You can use the [admonition extension of MkDocs](https://squidfunk.github.io/mkdocs-material/extensions/admonition/). Note: But you should use `Note` section instead for consistency. \"\"\" return x + y Then, you can write an entry to generate API for the function anywhere in your Markdown source: ![mkapi](google_style.add) MkApi generates the API documentation for the add() function. FUNCTION google_style. add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note You can use the admonition extension of MkDocs . Note But you should use Note section instead for consistency. Note In the above example, green dashed border lines are just guide for the eye to show the region of the documentation generated by MkApi for convenience. In this simple example, you can see some features of MkApi. Type inspection of add (FUNCTION prefix is added before google_style.add ). Use of type annotation for both Parameters and Returns sections. Add optional if parameters have default values. Default value replacement by the {default} keyword in the Parameters section. External hyperlink. Use of MkDocs extensions: MathJax rendering and admonition. Generator The google_style module also defines a simple generator gen() . Code 2 google_style.gen() def gen(n) -> Iterator[str]: \"\"\"Yields a numbered string. Args: n (int): The length of iteration. Yields: A numbered string. \"\"\" for x in range(n): yield f\"a{x}\" Then, ![mkapi](google_style.gen) creates the API documentation for the gen() generator. GENERATOR google_style. gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. In this simple example, note that: A GENERATOR prefix instead of a FUNCTION prefix. The parameter n has no type annotation but you can specify it in the Parameters section directly. Yields type is not iterator of str but str , because gen() is a generator. Class The google_style module also defines a simple class ExampleClass . Code 3 google_style.ExampleClass class ExampleClass: \"\"\"A normal class. Args: x: The first parameter. y: The second parameter. Raises: ValueError: If the length of `x` is equal to 0. \"\"\" def __init__(self, x: List[int], y: Tuple[str, int]): if len(x) == 0: raise ValueError() self.a: str = \"abc\" #: The first attribute. Comment *inline* with attribute. #: The second attribute. Comment *before* attribute. self.b: Dict[str, int] = {\"a\": 1} self.c = None \"\"\"int, optional: The third attribute. Docstring *after* attribute. Multiple paragraphs are supported.\"\"\" self.d = 100 # Not attribute description because ':' is missing. def message(self, n: int) -> List[str]: \"\"\"Returns a message list. Args: n: Repeatation. \"\"\" return [self.a] * n @property def readonly_property(self): \"\"\"str: Read-only property documentation.\"\"\" return \"readonly_property\" @property def readwrite_property(self) -> List[int]: \"\"\"Read-write property documentation.\"\"\" return [1, 2, 3] @readwrite_property.setter def readwrite_property(self, value): \"\"\"Docstring in setter is ignored.\"\"\" As usual, ![mkapi](google_style.ExampleClass) creates the API documentation for the ExampleClass class. CLASS google_style. ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes a (str) \u2014 The first attribute. Comment inline with attribute. b (dict(str: int)) \u2014 The second attribute. Comment before attribute. c (int, optional) \u2014 The third attribute. Docstring after attribute. Multiple paragraphs are supported. readonly_property (str) \u2014 Read-only property documentation. readwrite_property (list of int) \u2014 Read-write property documentation. Raises ValueError \u2014 If the length of x is equal to 0. Methods message (n) (list of str) \u2014 Returns a message list. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. In this example, note that: Type annotation using typing package ( List and Tuple in this case) is converted into readable style. Attributes section is inserted with type and description. These information is collected from inspection of __init__() function. Bound methods ( message in this case) have a METHOD prefix instead of a FUNCTION prefix. If callable objects have neither Returns nor Yields, the type appears on the object definition line like type annotation. Propertes are moved to the Attributes section with [RO] or [RW] that indicates whether the property is read-only or read-write. Methods section is newly created that displays a list of methods defined in this class. Note that it has a hyperlink to the definition. Note Although you can write the docstring for class in the __init__() function, the attribute inspection only works when you write it as a class level docstring. Method You can select a method of class (or any other attribute that can have docstring) to generate API. ![mkapi](google_style.ExampleClass.message) creates the API documentation for the message() of ExampleClass class. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. Data Class The google_style module also defines a simple data class ExampleDataClass . Code 4 google_style.ExampleDataClass @dataclass class ExampleDataClass: \"\"\"A dataclass. Args: x: The first parameter. Attributes: x: The first attribute. y: The second attribute. \"\"\" x: int = 0 y: int = field(default=1, init=False) Then, ![mkapi](google_style.ExampleDataClass) creates the API documentation for the ExampleDataClass class. DATACLASS google_style. ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute. In this example, note that: A DATACLASS prefix instead of a CLASS prefix. Attributes type inspection as well as parameters if they are data class fields.","title":"Google Style"},{"location":"examples/google_style/#google-style","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; } --> Let's start realistic examples. Here, a sample Python file google_style.py is stored under the examples directory relative to the mkdocs.yml directory, so you should configure mkdocs.yml like below. In addition, we add two extensions and an extra javascript for demonstration. plugins: - search - mkapi: src_dirs: [examples] markdown_extensions: - admonition - pymdownx.arithmatex extra_javascript: # for pymdownx.arithmatex - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML","title":"Google Style"},{"location":"examples/google_style/#function","text":"The google_style module defines a simple function add() . Code 1 google_style.add() def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Args: x: The first parameter. y: The second parameter. Default={default}. Returns: Added value. Examples: Examples should be written in doctest format >>> add(1, 2) 3 !!! note You can use the [admonition extension of MkDocs](https://squidfunk.github.io/mkdocs-material/extensions/admonition/). Note: But you should use `Note` section instead for consistency. \"\"\" return x + y Then, you can write an entry to generate API for the function anywhere in your Markdown source: ![mkapi](google_style.add) MkApi generates the API documentation for the add() function. FUNCTION google_style. add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note You can use the admonition extension of MkDocs . Note But you should use Note section instead for consistency. Note In the above example, green dashed border lines are just guide for the eye to show the region of the documentation generated by MkApi for convenience. In this simple example, you can see some features of MkApi. Type inspection of add (FUNCTION prefix is added before google_style.add ). Use of type annotation for both Parameters and Returns sections. Add optional if parameters have default values. Default value replacement by the {default} keyword in the Parameters section. External hyperlink. Use of MkDocs extensions: MathJax rendering and admonition.","title":"Function"},{"location":"examples/google_style/#generator","text":"The google_style module also defines a simple generator gen() . Code 2 google_style.gen() def gen(n) -> Iterator[str]: \"\"\"Yields a numbered string. Args: n (int): The length of iteration. Yields: A numbered string. \"\"\" for x in range(n): yield f\"a{x}\" Then, ![mkapi](google_style.gen) creates the API documentation for the gen() generator. GENERATOR google_style. gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. In this simple example, note that: A GENERATOR prefix instead of a FUNCTION prefix. The parameter n has no type annotation but you can specify it in the Parameters section directly. Yields type is not iterator of str but str , because gen() is a generator.","title":"Generator"},{"location":"examples/google_style/#class","text":"The google_style module also defines a simple class ExampleClass . Code 3 google_style.ExampleClass class ExampleClass: \"\"\"A normal class. Args: x: The first parameter. y: The second parameter. Raises: ValueError: If the length of `x` is equal to 0. \"\"\" def __init__(self, x: List[int], y: Tuple[str, int]): if len(x) == 0: raise ValueError() self.a: str = \"abc\" #: The first attribute. Comment *inline* with attribute. #: The second attribute. Comment *before* attribute. self.b: Dict[str, int] = {\"a\": 1} self.c = None \"\"\"int, optional: The third attribute. Docstring *after* attribute. Multiple paragraphs are supported.\"\"\" self.d = 100 # Not attribute description because ':' is missing. def message(self, n: int) -> List[str]: \"\"\"Returns a message list. Args: n: Repeatation. \"\"\" return [self.a] * n @property def readonly_property(self): \"\"\"str: Read-only property documentation.\"\"\" return \"readonly_property\" @property def readwrite_property(self) -> List[int]: \"\"\"Read-write property documentation.\"\"\" return [1, 2, 3] @readwrite_property.setter def readwrite_property(self, value): \"\"\"Docstring in setter is ignored.\"\"\" As usual, ![mkapi](google_style.ExampleClass) creates the API documentation for the ExampleClass class. CLASS google_style. ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes a (str) \u2014 The first attribute. Comment inline with attribute. b (dict(str: int)) \u2014 The second attribute. Comment before attribute. c (int, optional) \u2014 The third attribute. Docstring after attribute. Multiple paragraphs are supported. readonly_property (str) \u2014 Read-only property documentation. readwrite_property (list of int) \u2014 Read-write property documentation. Raises ValueError \u2014 If the length of x is equal to 0. Methods message (n) (list of str) \u2014 Returns a message list. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. In this example, note that: Type annotation using typing package ( List and Tuple in this case) is converted into readable style. Attributes section is inserted with type and description. These information is collected from inspection of __init__() function. Bound methods ( message in this case) have a METHOD prefix instead of a FUNCTION prefix. If callable objects have neither Returns nor Yields, the type appears on the object definition line like type annotation. Propertes are moved to the Attributes section with [RO] or [RW] that indicates whether the property is read-only or read-write. Methods section is newly created that displays a list of methods defined in this class. Note that it has a hyperlink to the definition. Note Although you can write the docstring for class in the __init__() function, the attribute inspection only works when you write it as a class level docstring.","title":"Class"},{"location":"examples/google_style/#method","text":"You can select a method of class (or any other attribute that can have docstring) to generate API. ![mkapi](google_style.ExampleClass.message) creates the API documentation for the message() of ExampleClass class. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation.","title":"Method"},{"location":"examples/google_style/#data-class","text":"The google_style module also defines a simple data class ExampleDataClass . Code 4 google_style.ExampleDataClass @dataclass class ExampleDataClass: \"\"\"A dataclass. Args: x: The first parameter. Attributes: x: The first attribute. y: The second attribute. \"\"\" x: int = 0 y: int = field(default=1, init=False) Then, ![mkapi](google_style.ExampleDataClass) creates the API documentation for the ExampleDataClass class. DATACLASS google_style. ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute. In this example, note that: A DATACLASS prefix instead of a CLASS prefix. Attributes type inspection as well as parameters if they are data class fields.","title":"Data Class"},{"location":"examples/numpy_style/","text":"NumPy Style <!-- .mkapi-node { border: 2px dashed #88AA88; } --> Let's start realistic examples. Here, a sample Python file numpy_style.py is stored under the examples directory relative to the mkdocs.yml directory, so you should configure mkdocs.yml like below. In addition, we add two extensions and an extra javascript for demonstration. plugins: - search - mkapi: src_dirs: [examples] markdown_extensions: - admonition - pymdownx.arithmatex extra_javascript: # for pymdownx.arithmatex - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML Function The numpy_style module defines a simple function add() . Code 5 numpy_style.add() def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Parameters ---------- x The first parameter. y The second parameter. Default={default}. Returns ------- int Added value. !!! note The return type must be duplicated in the docstring to comply with the NumPy docstring style. Examples -------- Examples should be written in doctest format >>> add(1, 2) 3 Note ---- MkApi doesn't check an underline that follows a section heading. Just skip one line. \"\"\" return x + y Then, you can write an entry to generate API for the function anywhere in your Markdown source: ![mkapi](numpy_style.add) MkApi generates the API documentation for the add() function. FUNCTION numpy_style. add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Note The return type must be duplicated in the docstring to comply with the NumPy docstring style. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note MkApi doesn't check an underline that follows a section heading. Just skip one line. Note In the above example, green dashed border lines are just guide for the eye to show the region of the documentation generated by MkApi for convenience. In this simple example, you can see some features of MkApi. Type inspection of add (FUNCTION prefix is added before numpy_style.add ). Use of type annotation for both Parameters and Returns sections. Add optional if parameters have default values. Default value replacement by the {default} keyword in the Parameters section. External hyperlink. Use of MkDocs extensions: MathJax rendering and admonition. Generator The numpy_style module also defines a simple generator gen() . Code 6 numpy_style.gen() def gen(n) -> Iterator[str]: \"\"\"Yields a numbered string. Parameters ---------- n : int The length of iteration. Yields ------ str A numbered string. \"\"\" for x in range(n): yield f\"a{x}\" Then, ![mkapi](numpy_style.gen) creates the API documentation for the gen() generator. GENERATOR numpy_style. gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. In this simple example, note that: A GENERATOR prefix instead of a FUNCTION prefix. The parameter n has no type annotation but you can specify it in the Parameters section directly. Yields type is not iterator of str but str , because gen() is a generator. Class The numpy_style module also defines a simple class ExampleClass . Code 7 numpy_style.ExampleClass class ExampleClass: \"\"\"A normal class. Parameters ---------- x The first parameter. y The second parameter. Raises ------ ValueError If the length of `x` is equal to 0. \"\"\" def __init__(self, x: List[int], y: Tuple[str, int]): if len(x) == 0: raise ValueError() self.a: str = \"abc\" #: The first attribute. Comment *inline* with attribute. #: The second attribute. Comment *before* attribute. self.b: Dict[str, int] = {\"a\": 1} self.c = None \"\"\"int, optional: The third attribute. Docstring *after* attribute. Multiple paragraphs are supported.\"\"\" self.d = 100 # Not attribute description because ':' is missing. def message(self, n: int) -> List[str]: \"\"\"Returns a message list. Parameters ---------- n Repeatation. \"\"\" return [self.a] * n @property def readonly_property(self): \"\"\"str: Read-only property documentation.\"\"\" return \"readonly_property\" @property def readwrite_property(self) -> List[int]: \"\"\"Read-write property documentation.\"\"\" return [1, 2, 3] @readwrite_property.setter def readwrite_property(self, value): \"\"\"Docstring in setter is ignored.\"\"\" As usual, ![mkapi](numpy_style.ExampleClass) creates the API documentation for the ExampleClass class. CLASS numpy_style. ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes a (str) \u2014 The first attribute. Comment inline with attribute. b (dict(str: int)) \u2014 The second attribute. Comment before attribute. c (int, optional) \u2014 The third attribute. Docstring after attribute. Multiple paragraphs are supported. readonly_property (str) \u2014 Read-only property documentation. readwrite_property (list of int) \u2014 Read-write property documentation. Raises ValueError \u2014 If the length of x is equal to 0. Methods message (n) (list of str) \u2014 Returns a message list. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. In this example, note that: Type annotation using typing package ( List and Tuple in this case) is converted into readable style. Attributes section is inserted with type and description. These information is collected from inspection of __init__() function. Bound methods ( message in this case) have a METHOD prefix instead of a FUNCTION prefix. If callable objects have neither Returns nor Yields, the type appears on the object definition line like type annotation. Propertes are moved to the Attributes section with [RO] or [RW] that indicates whether the property is read-only or read-write. Methods section is newly created that displays a list of methods defined in this class. Note that it has a hyperlink to the definition. Note Although you can write the docstring for class in the __init__() function, the attribute inspection only works when you write it as a class level docstring. Method You can select a method of class (or any other attribute that can have docstring) to generate API. ![mkapi](numpy_style.ExampleClass.message) creates the API documentation for the message() of ExampleClass class. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. Data Class The numpy_style module also defines a simple data class ExampleDataClass . Code 8 numpy_style.ExampleDataClass @dataclass class ExampleDataClass: \"\"\"A dataclass. Parameters ---------- x The first parameter. Attributes ---------- x The first attribute. y The second attribute. \"\"\" x: int = 0 y: int = field(default=1, init=False) Then, ![mkapi](numpy_style.ExampleDataClass) creates the API documentation for the ExampleDataClass class. DATACLASS numpy_style. ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute. In this example, note that: A DATACLASS prefix instead of a CLASS prefix. Attributes type inspection as well as parameters if they are data class fields.","title":"NumPy Style"},{"location":"examples/numpy_style/#numpy-style","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; } --> Let's start realistic examples. Here, a sample Python file numpy_style.py is stored under the examples directory relative to the mkdocs.yml directory, so you should configure mkdocs.yml like below. In addition, we add two extensions and an extra javascript for demonstration. plugins: - search - mkapi: src_dirs: [examples] markdown_extensions: - admonition - pymdownx.arithmatex extra_javascript: # for pymdownx.arithmatex - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML","title":"NumPy Style"},{"location":"examples/numpy_style/#function","text":"The numpy_style module defines a simple function add() . Code 5 numpy_style.add() def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Parameters ---------- x The first parameter. y The second parameter. Default={default}. Returns ------- int Added value. !!! note The return type must be duplicated in the docstring to comply with the NumPy docstring style. Examples -------- Examples should be written in doctest format >>> add(1, 2) 3 Note ---- MkApi doesn't check an underline that follows a section heading. Just skip one line. \"\"\" return x + y Then, you can write an entry to generate API for the function anywhere in your Markdown source: ![mkapi](numpy_style.add) MkApi generates the API documentation for the add() function. FUNCTION numpy_style. add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Note The return type must be duplicated in the docstring to comply with the NumPy docstring style. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note MkApi doesn't check an underline that follows a section heading. Just skip one line. Note In the above example, green dashed border lines are just guide for the eye to show the region of the documentation generated by MkApi for convenience. In this simple example, you can see some features of MkApi. Type inspection of add (FUNCTION prefix is added before numpy_style.add ). Use of type annotation for both Parameters and Returns sections. Add optional if parameters have default values. Default value replacement by the {default} keyword in the Parameters section. External hyperlink. Use of MkDocs extensions: MathJax rendering and admonition.","title":"Function"},{"location":"examples/numpy_style/#generator","text":"The numpy_style module also defines a simple generator gen() . Code 6 numpy_style.gen() def gen(n) -> Iterator[str]: \"\"\"Yields a numbered string. Parameters ---------- n : int The length of iteration. Yields ------ str A numbered string. \"\"\" for x in range(n): yield f\"a{x}\" Then, ![mkapi](numpy_style.gen) creates the API documentation for the gen() generator. GENERATOR numpy_style. gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. In this simple example, note that: A GENERATOR prefix instead of a FUNCTION prefix. The parameter n has no type annotation but you can specify it in the Parameters section directly. Yields type is not iterator of str but str , because gen() is a generator.","title":"Generator"},{"location":"examples/numpy_style/#class","text":"The numpy_style module also defines a simple class ExampleClass . Code 7 numpy_style.ExampleClass class ExampleClass: \"\"\"A normal class. Parameters ---------- x The first parameter. y The second parameter. Raises ------ ValueError If the length of `x` is equal to 0. \"\"\" def __init__(self, x: List[int], y: Tuple[str, int]): if len(x) == 0: raise ValueError() self.a: str = \"abc\" #: The first attribute. Comment *inline* with attribute. #: The second attribute. Comment *before* attribute. self.b: Dict[str, int] = {\"a\": 1} self.c = None \"\"\"int, optional: The third attribute. Docstring *after* attribute. Multiple paragraphs are supported.\"\"\" self.d = 100 # Not attribute description because ':' is missing. def message(self, n: int) -> List[str]: \"\"\"Returns a message list. Parameters ---------- n Repeatation. \"\"\" return [self.a] * n @property def readonly_property(self): \"\"\"str: Read-only property documentation.\"\"\" return \"readonly_property\" @property def readwrite_property(self) -> List[int]: \"\"\"Read-write property documentation.\"\"\" return [1, 2, 3] @readwrite_property.setter def readwrite_property(self, value): \"\"\"Docstring in setter is ignored.\"\"\" As usual, ![mkapi](numpy_style.ExampleClass) creates the API documentation for the ExampleClass class. CLASS numpy_style. ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes a (str) \u2014 The first attribute. Comment inline with attribute. b (dict(str: int)) \u2014 The second attribute. Comment before attribute. c (int, optional) \u2014 The third attribute. Docstring after attribute. Multiple paragraphs are supported. readonly_property (str) \u2014 Read-only property documentation. readwrite_property (list of int) \u2014 Read-write property documentation. Raises ValueError \u2014 If the length of x is equal to 0. Methods message (n) (list of str) \u2014 Returns a message list. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. In this example, note that: Type annotation using typing package ( List and Tuple in this case) is converted into readable style. Attributes section is inserted with type and description. These information is collected from inspection of __init__() function. Bound methods ( message in this case) have a METHOD prefix instead of a FUNCTION prefix. If callable objects have neither Returns nor Yields, the type appears on the object definition line like type annotation. Propertes are moved to the Attributes section with [RO] or [RW] that indicates whether the property is read-only or read-write. Methods section is newly created that displays a list of methods defined in this class. Note that it has a hyperlink to the definition. Note Although you can write the docstring for class in the __init__() function, the attribute inspection only works when you write it as a class level docstring.","title":"Class"},{"location":"examples/numpy_style/#method","text":"You can select a method of class (or any other attribute that can have docstring) to generate API. ![mkapi](numpy_style.ExampleClass.message) creates the API documentation for the message() of ExampleClass class. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation.","title":"Method"},{"location":"examples/numpy_style/#data-class","text":"The numpy_style module also defines a simple data class ExampleDataClass . Code 8 numpy_style.ExampleDataClass @dataclass class ExampleDataClass: \"\"\"A dataclass. Parameters ---------- x The first parameter. Attributes ---------- x The first attribute. y The second attribute. \"\"\" x: int = 0 y: int = field(default=1, init=False) Then, ![mkapi](numpy_style.ExampleDataClass) creates the API documentation for the ExampleDataClass class. DATACLASS numpy_style. ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute. In this example, note that: A DATACLASS prefix instead of a CLASS prefix. Attributes type inspection as well as parameters if they are data class fields.","title":"Data Class"},{"location":"usage/custom/","text":"Customization Customization 'on_config'. MkApi has an option on_config to allow users to configure MkDocs/MkApi or user system environment. Here is an example directory structure and the corresponding mkdocs.yml : # Directory structure your_project: - docs: - index.md - examples: - custom.py - mkdocs.yml # mkdocs.yml plugins: - search - mkapi: src_dirs: [examples] on_config: custom.on_config_without_args Customization script is saved in examples/custom.py : File 5 examples/custom.py def on_config_without_args(): # Here you can do all you want. print(\"Called.\") def on_config_with_config(config): print(\"Called with config.\") print(config[\"docs_dir\"]) # You can change config, for example: # config['docs_dir'] = 'other_directory' # Optionally, you can return altered config to customize MkDocs. # return config def on_config_with_mkapi(config, mkapi): print(\"Called with config and mkapi.\") print(config[\"docs_dir\"]) print(mkapi) Let's build the documentation. $ mkdocs build INFO - [MkApi] Calling user 'on_config' with [] Called. INFO - Cleaning site directory ... on_config() can take config and/or mkapi arguments. # mkdocs.yml plugins: - search - mkapi: src_dirs: [examples] on_config: custom.on_config_with_config $ mkdocs build INFO - [MkApi] Calling user 'on_config' with ['config'] Called with config. C:\\Users\\daizu\\Documents\\github\\mkapi\\docs INFO - Cleaning site directory ... And, # mkdocs.yml plugins: - search - mkapi: src_dirs: [examples] on_config: custom.on_config_with_mkapi $ mkdocs build INFO - [MkApi] Calling user 'on_config' with ['config', 'mkapi'] Called with config and mkapi. C:\\Users\\daizu\\Documents\\github\\mkapi\\docs <mkapi.plugins.mkdocs.MkapiPlugin object at 0x000001DF712D0F08> INFO - Cleaning site directory ...","title":"Customization"},{"location":"usage/custom/#customization","text":"","title":"Customization"},{"location":"usage/custom/#customization-on_config","text":"MkApi has an option on_config to allow users to configure MkDocs/MkApi or user system environment. Here is an example directory structure and the corresponding mkdocs.yml : # Directory structure your_project: - docs: - index.md - examples: - custom.py - mkdocs.yml # mkdocs.yml plugins: - search - mkapi: src_dirs: [examples] on_config: custom.on_config_without_args Customization script is saved in examples/custom.py : File 5 examples/custom.py def on_config_without_args(): # Here you can do all you want. print(\"Called.\") def on_config_with_config(config): print(\"Called with config.\") print(config[\"docs_dir\"]) # You can change config, for example: # config['docs_dir'] = 'other_directory' # Optionally, you can return altered config to customize MkDocs. # return config def on_config_with_mkapi(config, mkapi): print(\"Called with config and mkapi.\") print(config[\"docs_dir\"]) print(mkapi) Let's build the documentation. $ mkdocs build INFO - [MkApi] Calling user 'on_config' with [] Called. INFO - Cleaning site directory ... on_config() can take config and/or mkapi arguments. # mkdocs.yml plugins: - search - mkapi: src_dirs: [examples] on_config: custom.on_config_with_config $ mkdocs build INFO - [MkApi] Calling user 'on_config' with ['config'] Called with config. C:\\Users\\daizu\\Documents\\github\\mkapi\\docs INFO - Cleaning site directory ... And, # mkdocs.yml plugins: - search - mkapi: src_dirs: [examples] on_config: custom.on_config_with_mkapi $ mkdocs build INFO - [MkApi] Calling user 'on_config' with ['config', 'mkapi'] Called with config and mkapi. C:\\Users\\daizu\\Documents\\github\\mkapi\\docs <mkapi.plugins.mkdocs.MkapiPlugin object at 0x000001DF712D0F08> INFO - Cleaning site directory ...","title":"Customization &#39;on_config&#39;."},{"location":"usage/inherit/","text":"Docstring Inheritance <!-- .mkapi-node { border: 2px dashed #88AA88; margin-left: 0px; margin-bottom: 20px; } --> Example classes Define two classes to explain Docstring inheritance . File 2 inherit.py from dataclasses import dataclass from mkapi.core.base import Type @dataclass class Base: \"\"\"Base class. Parameters: name: Object name. Attributes: name: Object name. \"\"\" name: str type: Type def set_name(self, name: str): \"\"\"Sets name. Args: name: A New name. \"\"\" self.name = name @dataclass class Item(Base): \"\"\"Item class. Parameters: markdown: Object markdown. Attributes: markdown: Object markdown. \"\"\" markdown: str def set_name(self, name: str): \"\"\"Sets name in upper case.\"\"\" self.name = name.upper() Taking a look at this example, you may notice that: In the Base , description for type is omitted. In the Item , parameters inherited from superclass are not written. In the Item.set_name() , Parameters section itself doesn't exist. Inheritance from Superclasses Since the docstring of superclass Base describes the name , the Item class can inherit its description with inherit filter. ![mkapi](inherit.Item|inherit) By inheritance from superclasses, you don't need to write duplicated description. Inheritance from Signature Using strict filter, MkApi adds missing parameters and attributes from the signature. Description is still empty but type is inspected. Note that strict filter invokes inherit filter at the same time. ![mkapi](inherit.Item|strict) Inheritance from signature has two benefits: You can find parameters and attributes that wait for description. Users can know their types at least if you use type annotation. Example of Strict Mode ![mkapi](inherit.Item|strict) DATACLASS inherit. Item (name, type, markdown) Bases inherit.Base Item class. Parameters name (str) \u2014 Object name. type ( Type ) \u2014 markdown (str) \u2014 Object markdown. Attributes name (str) \u2014 Object name. type ( Type ) \u2014 markdown (str) \u2014 Object markdown. Methods set_name (name) \u2014 Sets name in upper case. METHOD set_name (name) Sets name in upper case. Parameters name (str) \u2014 A New name. Inheritance in Page Mode Inheritance in page mode is straightforward. For example, nav: - index.md - API: mkapi/api/mkapi|upper|strict","title":"Docstring Inheritance"},{"location":"usage/inherit/#docstring-inheritance","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; margin-left: 0px; margin-bottom: 20px; } -->","title":"Docstring Inheritance"},{"location":"usage/inherit/#example-classes","text":"Define two classes to explain Docstring inheritance . File 2 inherit.py from dataclasses import dataclass from mkapi.core.base import Type @dataclass class Base: \"\"\"Base class. Parameters: name: Object name. Attributes: name: Object name. \"\"\" name: str type: Type def set_name(self, name: str): \"\"\"Sets name. Args: name: A New name. \"\"\" self.name = name @dataclass class Item(Base): \"\"\"Item class. Parameters: markdown: Object markdown. Attributes: markdown: Object markdown. \"\"\" markdown: str def set_name(self, name: str): \"\"\"Sets name in upper case.\"\"\" self.name = name.upper() Taking a look at this example, you may notice that: In the Base , description for type is omitted. In the Item , parameters inherited from superclass are not written. In the Item.set_name() , Parameters section itself doesn't exist.","title":"Example classes"},{"location":"usage/inherit/#inheritance-from-superclasses","text":"Since the docstring of superclass Base describes the name , the Item class can inherit its description with inherit filter. ![mkapi](inherit.Item|inherit) By inheritance from superclasses, you don't need to write duplicated description.","title":"Inheritance from Superclasses"},{"location":"usage/inherit/#inheritance-from-signature","text":"Using strict filter, MkApi adds missing parameters and attributes from the signature. Description is still empty but type is inspected. Note that strict filter invokes inherit filter at the same time. ![mkapi](inherit.Item|strict) Inheritance from signature has two benefits: You can find parameters and attributes that wait for description. Users can know their types at least if you use type annotation.","title":"Inheritance from Signature"},{"location":"usage/inherit/#example-of-strict-mode","text":"![mkapi](inherit.Item|strict) DATACLASS inherit. Item (name, type, markdown) Bases inherit.Base Item class. Parameters name (str) \u2014 Object name. type ( Type ) \u2014 markdown (str) \u2014 Object markdown. Attributes name (str) \u2014 Object name. type ( Type ) \u2014 markdown (str) \u2014 Object markdown. Methods set_name (name) \u2014 Sets name in upper case. METHOD set_name (name) Sets name in upper case. Parameters name (str) \u2014 A New name.","title":"Example of Strict Mode"},{"location":"usage/inherit/#inheritance-in-page-mode","text":"Inheritance in page mode is straightforward. For example, nav: - index.md - API: mkapi/api/mkapi|upper|strict","title":"Inheritance in Page Mode"},{"location":"usage/library/","text":"Using MkApi within Python MkApi is a standalone library as well as a MkDocs plugin, so that you can use it within Python. First, import MkApi: <!-- .mkapi-node { border: 2px dashed #88AA88; } --> import mkapi [1] 2020-06-13 11:11:39 ( 84.0ms ) python3 ( 247ms ) Node object Define a simple class to show how MkApi works. class A: \"\"\"Class docstring. Note: Docstring of `__init__()` is deleted, if there is a class-level docstring. \"\"\" def __init__(self): \"\"\"Init docstring.\"\"\" self.a: int = 1 #: Integer **attribute**. def to_str(self, x: int) -> str: \"\"\"Converts `int` to `str`. Args: x: Input **value**. \"\"\" return str(x) [2] 2020-06-13 11:11:39 ( 4.00ms ) python3 ( 251ms ) mkapi.get_node() generates a Node object that has tree structure. node = mkapi.get_node(A) type(node) [3] 2020-06-13 11:11:39 ( 5.00ms ) python3 ( 256ms ) mkapi.core.node.Node Some attributes: node.object.kind, node.object.name [4] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 259ms ) ('class', 'A') docstring = node.docstring len(docstring.sections) [5] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 262ms ) 3 section = docstring.sections[0] section.name, section.markdown [6] 2020-06-13 11:11:39 ( 5.00ms ) python3 ( 267ms ) ('', 'Class docstring.') section = docstring.sections[1] section.name, section.markdown [7] 2020-06-13 11:11:39 ( 4.00ms ) python3 ( 271ms ) ('Attributes', '') The members attribute gives children, for example, bound methods of a class. len(node.members) [8] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 274ms ) 1 child = node.members[0] type(child) [9] 2020-06-13 11:11:39 ( 4.00ms ) python3 ( 278ms ) mkapi.core.node.Node Elements of Node.members are also Node objects, so this is a tree structure. child.object.kind, child.object.name [10] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 281ms ) ('method', 'to_str') docstring = child.docstring len(docstring.sections) [11] 2020-06-13 11:11:39 ( 4.00ms ) python3 ( 285ms ) 2 section = docstring.sections[0] section.name, section.markdown [12] 2020-06-13 11:11:39 ( 4.00ms ) python3 ( 289ms ) ('', 'Converts `int` to `str`.') section = docstring.sections[1] section.name, section.markdown [13] 2020-06-13 11:11:39 ( 4.00ms ) python3 ( 293ms ) ('Parameters', '') The above Parameters section has an empty markdown , while its items represents an argument list: item = section.items[0] print(f\"name={item.name!r}\") print(f\"markdown={item.markdown!r}, html={item.html!r}\") print(item.type) print(item.desc) [14] 2020-06-13 11:11:39 ( 5.00ms ) python3 ( 298ms ) name='x' markdown='', html='x' Type(name='int', markdown='', html='int') Inline(name='Input **value**.', markdown='Input **value**.', html='') Node.get_markdown() creates a joint Markdown of this node. markdown = node.get_markdown() print(markdown) [15] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 301ms ) A <!-- mkapi:sep --> Class docstring. <!-- mkapi:sep --> Integer **attribute**. <!-- mkapi:sep --> Docstring of `__init__()` is deleted, if there is a class-level docstring. <!-- mkapi:sep --> __main__.A.to_str <!-- mkapi:sep --> Converts `int` to `str`. <!-- mkapi:sep --> Input **value**. Where is Note or Parameters section heading, etc. ? No problem. The Node.get_markdown() divides docstrings into two parts. One is a plain Markdown that will be converted into HTML by any Markdown converter, for example, MkDocs. The other is the outline structure of docstrings such as sections or arguments that will be processed by MkApi itself. Converting Markdown For simplicity, we use Python-Markdown library instead of MkDocs. from markdown import Markdown converter = Markdown() html = converter.convert(markdown) print(html) [16] 2020-06-13 11:11:39 ( 6.00ms ) python3 ( 307ms ) <p><a href=\"!A\">A</a></p> <!-- mkapi:sep --> <p>Class docstring.</p> <!-- mkapi:sep --> <p>Integer <strong>attribute</strong>.</p> <!-- mkapi:sep --> <p>Docstring of <code>__init__()</code> is deleted, if there is a class-level docstring.</p> <!-- mkapi:sep --> <p><a href=\"!__main__.A\"><strong>main</strong>.A</a>.<a href=\"!__main__.A.to_str\">to_str</a></p> <!-- mkapi:sep --> <p>Converts <code>int</code> to <code>str</code>.</p> <!-- mkapi:sep --> <p>Input <strong>value</strong>.</p> Distributing HTML Node.set_html() distributes HTML into docstring and members. node.set_html(html) [17] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 310ms ) Take a look at what happened. section = node.docstring.sections[0] section.markdown, section.html [18] 2020-06-13 11:11:39 ( 5.00ms ) python3 ( 315ms ) ('Class docstring.', '<p>Class docstring.</p>') child = node.members[0] section = child.docstring.sections[0] section.markdown, section.html [19] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 318ms ) ('Converts `int` to `str`.', '<p>Converts <code>int</code> to <code>str</code>.</p>') section = child.docstring.sections[1] item = section.items[0] item.desc.markdown, item.desc.html # A <p> tag is deleted. [20] 2020-06-13 11:11:39 ( 4.00ms ) python3 ( 322ms ) ('Input **value**.', 'Input <strong>value</strong>.') Constructing HTML Finally, construct HTML calling Node.render() that internally uses Jinja library. html = node.render() print(html[:300].strip()) [21] 2020-06-13 11:11:39 ( 32.0ms ) python3 ( 354ms ) <div class=\"mkapi-node\" id=\"A\"> <div class=\"mkapi-object mkapi-object-class code\"> <div class=\"mkapi-object-kind mkapi-object-kind-class\">CLASS</div> <div class=\"mkapi-object-body\"><code class=\"mkapi-object-name\">A</code><code class=\"mkapi-object-signature\">()</code> </div> </div> <div class=\"mk Jupyter allows us to see the rendered HTML. from IPython.display import HTML HTML(html) [22] 2020-06-13 11:11:39 ( 4.00ms ) python3 ( 358ms ) CLASS A () Class docstring. Attributes a (int) \u2014 Integer attribute . Note Docstring of __init__() is deleted, if there is a class-level docstring. METHOD to_str (x) \u2192 str Converts int to str . Parameters x (int) \u2014 Input value . Summary All you need to get API documentation of an object is described by the following function. def get_html(obj) -> str: # Construct a node tree structure. node = mkapi.get_node(obj) # Create a joint Markdown from components of the node. markdown = node.get_markdown() # Convert it into HTML by any external converter. html = converter.convert(markdown) # Split and distribute the HTML into original components. node.set_html(html) # Render the node to create final HTML. return node.render() [23] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 361ms )","title":"Using MkApi within Python"},{"location":"usage/library/#using-mkapi-within-python","text":"MkApi is a standalone library as well as a MkDocs plugin, so that you can use it within Python. First, import MkApi: <!-- .mkapi-node { border: 2px dashed #88AA88; } --> import mkapi [1] 2020-06-13 11:11:39 ( 84.0ms ) python3 ( 247ms )","title":"Using MkApi within Python"},{"location":"usage/library/#node-object","text":"Define a simple class to show how MkApi works. class A: \"\"\"Class docstring. Note: Docstring of `__init__()` is deleted, if there is a class-level docstring. \"\"\" def __init__(self): \"\"\"Init docstring.\"\"\" self.a: int = 1 #: Integer **attribute**. def to_str(self, x: int) -> str: \"\"\"Converts `int` to `str`. Args: x: Input **value**. \"\"\" return str(x) [2] 2020-06-13 11:11:39 ( 4.00ms ) python3 ( 251ms ) mkapi.get_node() generates a Node object that has tree structure. node = mkapi.get_node(A) type(node) [3] 2020-06-13 11:11:39 ( 5.00ms ) python3 ( 256ms ) mkapi.core.node.Node Some attributes: node.object.kind, node.object.name [4] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 259ms ) ('class', 'A') docstring = node.docstring len(docstring.sections) [5] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 262ms ) 3 section = docstring.sections[0] section.name, section.markdown [6] 2020-06-13 11:11:39 ( 5.00ms ) python3 ( 267ms ) ('', 'Class docstring.') section = docstring.sections[1] section.name, section.markdown [7] 2020-06-13 11:11:39 ( 4.00ms ) python3 ( 271ms ) ('Attributes', '') The members attribute gives children, for example, bound methods of a class. len(node.members) [8] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 274ms ) 1 child = node.members[0] type(child) [9] 2020-06-13 11:11:39 ( 4.00ms ) python3 ( 278ms ) mkapi.core.node.Node Elements of Node.members are also Node objects, so this is a tree structure. child.object.kind, child.object.name [10] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 281ms ) ('method', 'to_str') docstring = child.docstring len(docstring.sections) [11] 2020-06-13 11:11:39 ( 4.00ms ) python3 ( 285ms ) 2 section = docstring.sections[0] section.name, section.markdown [12] 2020-06-13 11:11:39 ( 4.00ms ) python3 ( 289ms ) ('', 'Converts `int` to `str`.') section = docstring.sections[1] section.name, section.markdown [13] 2020-06-13 11:11:39 ( 4.00ms ) python3 ( 293ms ) ('Parameters', '') The above Parameters section has an empty markdown , while its items represents an argument list: item = section.items[0] print(f\"name={item.name!r}\") print(f\"markdown={item.markdown!r}, html={item.html!r}\") print(item.type) print(item.desc) [14] 2020-06-13 11:11:39 ( 5.00ms ) python3 ( 298ms ) name='x' markdown='', html='x' Type(name='int', markdown='', html='int') Inline(name='Input **value**.', markdown='Input **value**.', html='') Node.get_markdown() creates a joint Markdown of this node. markdown = node.get_markdown() print(markdown) [15] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 301ms ) A <!-- mkapi:sep --> Class docstring. <!-- mkapi:sep --> Integer **attribute**. <!-- mkapi:sep --> Docstring of `__init__()` is deleted, if there is a class-level docstring. <!-- mkapi:sep --> __main__.A.to_str <!-- mkapi:sep --> Converts `int` to `str`. <!-- mkapi:sep --> Input **value**. Where is Note or Parameters section heading, etc. ? No problem. The Node.get_markdown() divides docstrings into two parts. One is a plain Markdown that will be converted into HTML by any Markdown converter, for example, MkDocs. The other is the outline structure of docstrings such as sections or arguments that will be processed by MkApi itself.","title":"Node object"},{"location":"usage/library/#converting-markdown","text":"For simplicity, we use Python-Markdown library instead of MkDocs. from markdown import Markdown converter = Markdown() html = converter.convert(markdown) print(html) [16] 2020-06-13 11:11:39 ( 6.00ms ) python3 ( 307ms ) <p><a href=\"!A\">A</a></p> <!-- mkapi:sep --> <p>Class docstring.</p> <!-- mkapi:sep --> <p>Integer <strong>attribute</strong>.</p> <!-- mkapi:sep --> <p>Docstring of <code>__init__()</code> is deleted, if there is a class-level docstring.</p> <!-- mkapi:sep --> <p><a href=\"!__main__.A\"><strong>main</strong>.A</a>.<a href=\"!__main__.A.to_str\">to_str</a></p> <!-- mkapi:sep --> <p>Converts <code>int</code> to <code>str</code>.</p> <!-- mkapi:sep --> <p>Input <strong>value</strong>.</p>","title":"Converting Markdown"},{"location":"usage/library/#distributing-html","text":"Node.set_html() distributes HTML into docstring and members. node.set_html(html) [17] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 310ms ) Take a look at what happened. section = node.docstring.sections[0] section.markdown, section.html [18] 2020-06-13 11:11:39 ( 5.00ms ) python3 ( 315ms ) ('Class docstring.', '<p>Class docstring.</p>') child = node.members[0] section = child.docstring.sections[0] section.markdown, section.html [19] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 318ms ) ('Converts `int` to `str`.', '<p>Converts <code>int</code> to <code>str</code>.</p>') section = child.docstring.sections[1] item = section.items[0] item.desc.markdown, item.desc.html # A <p> tag is deleted. [20] 2020-06-13 11:11:39 ( 4.00ms ) python3 ( 322ms ) ('Input **value**.', 'Input <strong>value</strong>.')","title":"Distributing HTML"},{"location":"usage/library/#constructing-html","text":"Finally, construct HTML calling Node.render() that internally uses Jinja library. html = node.render() print(html[:300].strip()) [21] 2020-06-13 11:11:39 ( 32.0ms ) python3 ( 354ms ) <div class=\"mkapi-node\" id=\"A\"> <div class=\"mkapi-object mkapi-object-class code\"> <div class=\"mkapi-object-kind mkapi-object-kind-class\">CLASS</div> <div class=\"mkapi-object-body\"><code class=\"mkapi-object-name\">A</code><code class=\"mkapi-object-signature\">()</code> </div> </div> <div class=\"mk Jupyter allows us to see the rendered HTML. from IPython.display import HTML HTML(html) [22] 2020-06-13 11:11:39 ( 4.00ms ) python3 ( 358ms ) CLASS A () Class docstring. Attributes a (int) \u2014 Integer attribute . Note Docstring of __init__() is deleted, if there is a class-level docstring. METHOD to_str (x) \u2192 str Converts int to str . Parameters x (int) \u2014 Input value .","title":"Constructing HTML"},{"location":"usage/library/#summary","text":"All you need to get API documentation of an object is described by the following function. def get_html(obj) -> str: # Construct a node tree structure. node = mkapi.get_node(obj) # Create a joint Markdown from components of the node. markdown = node.get_markdown() # Convert it into HTML by any external converter. html = converter.convert(markdown) # Split and distribute the HTML into original components. node.set_html(html) # Render the node to create final HTML. return node.render() [23] 2020-06-13 11:11:39 ( 3.00ms ) python3 ( 361ms )","title":"Summary"},{"location":"usage/module/","text":"Module and Package <!-- .mkapi-node { border: 2px dashed #88AA88; } --> MkApi can create module and package documentation as well as function and class. Specify a package or module by its full path name. ![mkapi](mkapi.core) PACKAGE mkapi. core Package level documentation is written in __init__.py . Module Level Components As class level attributes, module level attributes can be inspected. Here is the beginning part of google_style.py . File 1 google_style.py: line number 1-18 \"\"\"Module level docstring.\"\"\" from dataclasses import dataclass, field from typing import Dict, Iterator, List, Tuple #: The first module level attribute. Comment *before* attribute. first_attribute: int = 1 second_attribute = \"abc\" #: str: The second module level attribute. *Inline* style. third_attribute: List[int] = [1, 2, 3] \"\"\"The third module level attribute. Docstring *after* attribute. Multiple paragraphs are supported. \"\"\" not_attribute = 123 # Not attribute description because ':' is missing. def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Although there is no Attributes section in docstring, MkApi automatically creates the section if attributes are correctly documented. ![mkapi](google_style) MODULE google_style Module level docstring. Attributes first_attribute (int) \u2014 The first module level attribute. Comment before attribute. second_attribute (str) \u2014 The second module level attribute. Inline style. third_attribute (list of int) \u2014 The third module level attribute. Docstring after attribute. Multiple paragraphs are supported. Classes ExampleClass \u2014 A normal class. ExampleDataClass \u2014 A dataclass. Functions add (x,y) (int) \u2014 Returns x + y x + y . gen (n) (str) \u2014 Yields a numbered string. Furthermore, Classes and Functions sections are also created that display a list of members defined in the module. Heading Documentation The other method to create module API is heading. For example ### ![mkapi](google_style) MODULE google_style Module level docstring. Attributes first_attribute (int) \u2014 The first module level attribute. Comment before attribute. second_attribute (str) \u2014 The second module level attribute. Inline style. third_attribute (list of int) \u2014 The third module level attribute. Docstring after attribute. Multiple paragraphs are supported. Classes ExampleClass \u2014 A normal class. ExampleDataClass \u2014 A dataclass. Functions add (x,y) (int) \u2014 Returns x + y x + y . gen (n) (str) \u2014 Yields a numbered string. If you prefer upper case heading, use the upper filter. ### ![mkapi](google_style|upper) MODULE GOOGLE_STYLE Module level docstring. Attributes first_attribute (int) \u2014 The first module level attribute. Comment before attribute. second_attribute (str) \u2014 The second module level attribute. Inline style. third_attribute (list of int) \u2014 The third module level attribute. Docstring after attribute. Multiple paragraphs are supported. Classes ExampleClass \u2014 A normal class. ExampleDataClass \u2014 A dataclass. Functions add (x,y) (int) \u2014 Returns x + y x + y . gen (n) (str) \u2014 Yields a numbered string.","title":"Module and Package"},{"location":"usage/module/#module-and-package","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; } --> MkApi can create module and package documentation as well as function and class. Specify a package or module by its full path name. ![mkapi](mkapi.core) PACKAGE mkapi. core Package level documentation is written in __init__.py .","title":"Module and Package"},{"location":"usage/module/#module-level-components","text":"As class level attributes, module level attributes can be inspected. Here is the beginning part of google_style.py . File 1 google_style.py: line number 1-18 \"\"\"Module level docstring.\"\"\" from dataclasses import dataclass, field from typing import Dict, Iterator, List, Tuple #: The first module level attribute. Comment *before* attribute. first_attribute: int = 1 second_attribute = \"abc\" #: str: The second module level attribute. *Inline* style. third_attribute: List[int] = [1, 2, 3] \"\"\"The third module level attribute. Docstring *after* attribute. Multiple paragraphs are supported. \"\"\" not_attribute = 123 # Not attribute description because ':' is missing. def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Although there is no Attributes section in docstring, MkApi automatically creates the section if attributes are correctly documented. ![mkapi](google_style) MODULE google_style Module level docstring. Attributes first_attribute (int) \u2014 The first module level attribute. Comment before attribute. second_attribute (str) \u2014 The second module level attribute. Inline style. third_attribute (list of int) \u2014 The third module level attribute. Docstring after attribute. Multiple paragraphs are supported. Classes ExampleClass \u2014 A normal class. ExampleDataClass \u2014 A dataclass. Functions add (x,y) (int) \u2014 Returns x + y x + y . gen (n) (str) \u2014 Yields a numbered string. Furthermore, Classes and Functions sections are also created that display a list of members defined in the module.","title":"Module Level Components"},{"location":"usage/module/#heading-documentation","text":"The other method to create module API is heading. For example ### ![mkapi](google_style)","title":"Heading Documentation"},{"location":"usage/module/#google_style","text":"Module level docstring. Attributes first_attribute (int) \u2014 The first module level attribute. Comment before attribute. second_attribute (str) \u2014 The second module level attribute. Inline style. third_attribute (list of int) \u2014 The third module level attribute. Docstring after attribute. Multiple paragraphs are supported. Classes ExampleClass \u2014 A normal class. ExampleDataClass \u2014 A dataclass. Functions add (x,y) (int) \u2014 Returns x + y x + y . gen (n) (str) \u2014 Yields a numbered string. If you prefer upper case heading, use the upper filter. ### ![mkapi](google_style|upper)","title":"google_style"},{"location":"usage/module/#google_style_1","text":"Module level docstring. Attributes first_attribute (int) \u2014 The first module level attribute. Comment before attribute. second_attribute (str) \u2014 The second module level attribute. Inline style. third_attribute (list of int) \u2014 The third module level attribute. Docstring after attribute. Multiple paragraphs are supported. Classes ExampleClass \u2014 A normal class. ExampleDataClass \u2014 A dataclass. Functions add (x,y) (int) \u2014 Returns x + y x + y . gen (n) (str) \u2014 Yields a numbered string.","title":"google_style"},{"location":"usage/page/","text":"Page Mode and Internal Links <!-- .mkapi-node { border: 2px dashed #88AA88; } --> Page Mode Page mode is a powerful feature that constructs a comprehensive API documentation for your project. To use the page mode, just add one line to mkdocs.yml : nav: - index.md - API: mkapi/api/mkapi MkApi scans the nav to find an entry that starts with 'mkapi/' . This entry must include two or more slashes ( '/' ). Second part ( 'api' ) splitted by slash is a directory name. MkApi automatically creates this directory in the docs directory at the beginning of the process and deletes it and its contents after the process. The rest ( 'mkapi' ) is a root package name, which is assumed to exist in the mkdocs.yml directory. However, if a root package is in src directory, for example, you can specify it like this: - API: mkapi/api/src/mkapi MkApi searches all packages and modules and create a Markdown source for one package or module, which is saved in the api directory. The rest work is done by MkDocs. You can see the API documentation of MkApi in the left navigation menu. Note If a package or module has no package- or module-level docstring, MkApi doesn't process it. For upper case heading, use the upper filter like this: - API: mkapi/api/mkapi|upper . See Heading Documentation . Internal Links Link from Markdown Once a project API documentation is generated, you can use hyperlink to it using normal Markdown syntax. Go to [Section](mkapi.core.base.Section). The above line create a link to mkapi.core.base.Section object: Go to Section . Link from Docstring You can use this feature even in your docstring. For example, assume that func() is defined in a link.fullname module: File 3 link/fullname.py def func(): \"\"\"Internal link example. See Also: [a method](mkapi.core.base.Item.set_html) \"\"\" The link.fullname.func() is rendered as: FUNCTION link.fullname. func () Internal link example. See Also a method You can click the above \"a method\" to visit its API. Furthermore, if your module imports an object, you can refer it by its qualified name only. File 4 link/qualname.py from mkapi.core.base import Section from mkapi.core.docstring import get_docstring def func(): \"\"\"Internal link example. * [Section]() --- Imported object. * [](get_docstring) --- Imported object. * [Section.set_html]() --- Member of imported object. * [Section definition](Section) --- Alternative text. \"\"\" return Section(), get_docstring(None) The link.qualname.func() is rendered as: FUNCTION link.qualname. func () Internal link example. Section --- Imported object. get_docstring --- Imported object. Section.set_html --- Member of imported object. Section definition --- Alternative text. Link from Embedding Mode API documentation created by the embedding mode has link to its project documentation. ![mkapi](mkapi.core.docstring.section_heading) creates API of the section_heading() : FUNCTION mkapi.core.docstring . section_heading (line) \u2192 (str, str) Returns a tuple of (section name, style name). Parameters line (str) \u2014 Docstring line. Examples >>> section_heading(\"Args:\") ('Args', 'google') >>> section_heading(\"Raises\") ('Raises', 'numpy') >>> section_heading(\"other\") ('', '') Then, you can click the prefix ( mkapi.core.docstring ) or the function name ( section_heading ) to go to the project documentation. Link from Type The Docstring class of MkApi has an attribute sections that is a list of Section class instance like below: # Mimic code of Docstring class. from dataclasses import dataclass from typing import List from mkapi.core.base import Section @dataclass class Docstring: \"\"\"Docstring ....\"\"\" sections: List[Section] = field(default_factory=list) type: str = \"\" Corresponding real API documentation is like below: DATACLASS mkapi.core.base . Docstring (sections=<factory>, type=<factory>) Docstring class represents a docstring of an object. Parameters sections (list of Section , optional) \u2014 List of Section instance. type ( Type , optional) \u2014 Type for Returns or Yields sections. Attributes sections (list of Section ) \u2014 List of Section instance. type ( Type ) \u2014 Type for Returns or Yields sections. Examples Empty docstring: >>> docstring = Docstring() >>> assert not docstring Docstring with 3 sections: >>> default = Section(\"\", markdown=\"Default\") >>> parameters = Section(\"Parameters\", items=[Item(\"a\"), Item(\"[b](!a)\")]) >>> returns = Section(\"Returns\", markdown=\"Results\") >>> docstring = Docstring([default, parameters, returns]) Docstring is iterable: >>> [base.name for base in docstring] ['', '[b](!a)', 'Returns'] Indexing: >>> docstring[\"Parameters\"].items[0].name 'a' Note that Section and Type are bold, which indicates that it is a link. Let's click. This link system using type annotation is useful to navigate users throughout the project documentation.","title":"Page Mode and Internal Links"},{"location":"usage/page/#page-mode-and-internal-links","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; } -->","title":"Page Mode and Internal Links"},{"location":"usage/page/#page-mode","text":"Page mode is a powerful feature that constructs a comprehensive API documentation for your project. To use the page mode, just add one line to mkdocs.yml : nav: - index.md - API: mkapi/api/mkapi MkApi scans the nav to find an entry that starts with 'mkapi/' . This entry must include two or more slashes ( '/' ). Second part ( 'api' ) splitted by slash is a directory name. MkApi automatically creates this directory in the docs directory at the beginning of the process and deletes it and its contents after the process. The rest ( 'mkapi' ) is a root package name, which is assumed to exist in the mkdocs.yml directory. However, if a root package is in src directory, for example, you can specify it like this: - API: mkapi/api/src/mkapi MkApi searches all packages and modules and create a Markdown source for one package or module, which is saved in the api directory. The rest work is done by MkDocs. You can see the API documentation of MkApi in the left navigation menu. Note If a package or module has no package- or module-level docstring, MkApi doesn't process it. For upper case heading, use the upper filter like this: - API: mkapi/api/mkapi|upper . See Heading Documentation .","title":"Page Mode"},{"location":"usage/page/#internal-links","text":"","title":"Internal Links"},{"location":"usage/page/#link-from-markdown","text":"Once a project API documentation is generated, you can use hyperlink to it using normal Markdown syntax. Go to [Section](mkapi.core.base.Section). The above line create a link to mkapi.core.base.Section object: Go to Section .","title":"Link from Markdown"},{"location":"usage/page/#link-from-docstring","text":"You can use this feature even in your docstring. For example, assume that func() is defined in a link.fullname module: File 3 link/fullname.py def func(): \"\"\"Internal link example. See Also: [a method](mkapi.core.base.Item.set_html) \"\"\" The link.fullname.func() is rendered as: FUNCTION link.fullname. func () Internal link example. See Also a method You can click the above \"a method\" to visit its API. Furthermore, if your module imports an object, you can refer it by its qualified name only. File 4 link/qualname.py from mkapi.core.base import Section from mkapi.core.docstring import get_docstring def func(): \"\"\"Internal link example. * [Section]() --- Imported object. * [](get_docstring) --- Imported object. * [Section.set_html]() --- Member of imported object. * [Section definition](Section) --- Alternative text. \"\"\" return Section(), get_docstring(None) The link.qualname.func() is rendered as: FUNCTION link.qualname. func () Internal link example. Section --- Imported object. get_docstring --- Imported object. Section.set_html --- Member of imported object. Section definition --- Alternative text.","title":"Link from Docstring"},{"location":"usage/page/#link-from-embedding-mode","text":"API documentation created by the embedding mode has link to its project documentation. ![mkapi](mkapi.core.docstring.section_heading) creates API of the section_heading() : FUNCTION mkapi.core.docstring . section_heading (line) \u2192 (str, str) Returns a tuple of (section name, style name). Parameters line (str) \u2014 Docstring line. Examples >>> section_heading(\"Args:\") ('Args', 'google') >>> section_heading(\"Raises\") ('Raises', 'numpy') >>> section_heading(\"other\") ('', '') Then, you can click the prefix ( mkapi.core.docstring ) or the function name ( section_heading ) to go to the project documentation.","title":"Link from Embedding Mode"},{"location":"usage/page/#link-from-type","text":"The Docstring class of MkApi has an attribute sections that is a list of Section class instance like below: # Mimic code of Docstring class. from dataclasses import dataclass from typing import List from mkapi.core.base import Section @dataclass class Docstring: \"\"\"Docstring ....\"\"\" sections: List[Section] = field(default_factory=list) type: str = \"\" Corresponding real API documentation is like below: DATACLASS mkapi.core.base . Docstring (sections=<factory>, type=<factory>) Docstring class represents a docstring of an object. Parameters sections (list of Section , optional) \u2014 List of Section instance. type ( Type , optional) \u2014 Type for Returns or Yields sections. Attributes sections (list of Section ) \u2014 List of Section instance. type ( Type ) \u2014 Type for Returns or Yields sections. Examples Empty docstring: >>> docstring = Docstring() >>> assert not docstring Docstring with 3 sections: >>> default = Section(\"\", markdown=\"Default\") >>> parameters = Section(\"Parameters\", items=[Item(\"a\"), Item(\"[b](!a)\")]) >>> returns = Section(\"Returns\", markdown=\"Results\") >>> docstring = Docstring([default, parameters, returns]) Docstring is iterable: >>> [base.name for base in docstring] ['', '[b](!a)', 'Returns'] Indexing: >>> docstring[\"Parameters\"].items[0].name 'a' Note that Section and Type are bold, which indicates that it is a link. Let's click. This link system using type annotation is useful to navigate users throughout the project documentation.","title":"Link from Type"}]}