{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MkApi Documentation MkApi plugin for MkDocs generates API documentation for Python code. MkApi supports two styles of docstrings: Google and NumPy . The Napoleon package provides complete examples: Example Google Style Python Docstrings Example NumPy Style Python Docstrings Features of MkApi are: Section syntax : Supported sections are Args , Arguments , Attributes , Example[s] , Note[s] , Parameters , Raises , Returns , References , Todo , Warning[s] , Warns , and Yields . Type annotation : If you write your function such as def func(x: int) -> str: , you don't need write type(s) in Args , Parameters , Returns , or Yields section again. You can overwrite the type annotation in the corresponding docstring. Object type inspection : MkApi plugin creates CLASS , DATACLASS , FUNCTION , GENERATOR , METHOD , or PROPERTY prefix for each object. Docstring inheritance : Docstring of a subclass can inherit parameters and attributes description from its superclasses. Page mode : Comprehensive API documentation for your project, in which objects are linked to each other by type annotation. Installation Install the plugin using pip: pip install mkapi Configuration Add the following lines to mkdocs.yml : plugins: - search # necessary for search to work - mkapi Usage MkApi provides two modes to generate API documentation: Embedding mode and Page mode. Embedding Mode To generate the API documentation in a Markdown source, add an exclamation mark (!), followed by mkapi in brackets, and the object full name in parentheses. Yes, this is like adding an image. The object can be a function, class, or module. ![mkapi](<object.full.name>) MkApi imports objects that you specify. If they aren't in the sys.path , configure mkdocs.yml like below: plugins: - search - mkapi: src_dirs: [<path1>, <path2>, ...] Here, pathX s are inserted to sys.path . These pathX s must be relative to the mkdocs.yml directory. The embedding mode is useful to embed an object interface in an arbitrary position of a Markdown source. For more details, see: Google style examples NumPy style examples Page Mode Using the page mode, you can construct a comprehensive API documentation for your project. You can get this powerful feature by just one line: nav: - index.md - API: mkapi/api/mkapi For more details, see Page Mode and Internal Links","title":"MkApi Documentation"},{"location":"#mkapi-documentation","text":"MkApi plugin for MkDocs generates API documentation for Python code. MkApi supports two styles of docstrings: Google and NumPy . The Napoleon package provides complete examples: Example Google Style Python Docstrings Example NumPy Style Python Docstrings Features of MkApi are: Section syntax : Supported sections are Args , Arguments , Attributes , Example[s] , Note[s] , Parameters , Raises , Returns , References , Todo , Warning[s] , Warns , and Yields . Type annotation : If you write your function such as def func(x: int) -> str: , you don't need write type(s) in Args , Parameters , Returns , or Yields section again. You can overwrite the type annotation in the corresponding docstring. Object type inspection : MkApi plugin creates CLASS , DATACLASS , FUNCTION , GENERATOR , METHOD , or PROPERTY prefix for each object. Docstring inheritance : Docstring of a subclass can inherit parameters and attributes description from its superclasses. Page mode : Comprehensive API documentation for your project, in which objects are linked to each other by type annotation.","title":"MkApi Documentation"},{"location":"#installation","text":"Install the plugin using pip: pip install mkapi","title":"Installation"},{"location":"#configuration","text":"Add the following lines to mkdocs.yml : plugins: - search # necessary for search to work - mkapi","title":"Configuration"},{"location":"#usage","text":"MkApi provides two modes to generate API documentation: Embedding mode and Page mode.","title":"Usage"},{"location":"#embedding-mode","text":"To generate the API documentation in a Markdown source, add an exclamation mark (!), followed by mkapi in brackets, and the object full name in parentheses. Yes, this is like adding an image. The object can be a function, class, or module. ![mkapi](<object.full.name>) MkApi imports objects that you specify. If they aren't in the sys.path , configure mkdocs.yml like below: plugins: - search - mkapi: src_dirs: [<path1>, <path2>, ...] Here, pathX s are inserted to sys.path . These pathX s must be relative to the mkdocs.yml directory. The embedding mode is useful to embed an object interface in an arbitrary position of a Markdown source. For more details, see: Google style examples NumPy style examples","title":"Embedding Mode"},{"location":"#page-mode","text":"Using the page mode, you can construct a comprehensive API documentation for your project. You can get this powerful feature by just one line: nav: - index.md - API: mkapi/api/mkapi For more details, see Page Mode and Internal Links","title":"Page Mode"},{"location":"api/mkapi.core.base/","text":"MODULE MKAPI.CORE . BASE This module provides entity classes to represent docstring structure. DATACLASS mkapi.core.base . Base (name='', markdown='') Base class. Parameters name (str, optional) \u2014 Object name. markdown (str, optional) \u2014 Markdown source. Attributes name (str) \u2014 Object name. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML after conversion. METHOD set_html (html) Sets html attribute. Parameters html (str) \u2014 HTML string. DATACLASS mkapi.core.base . Type (name='', markdown='') Type class represents type for Item , Section , Docstring , and Object . Parameters name (str, optional) \u2014 Object name. markdown (str, optional) \u2014 Markdown source. Attributes name (str) \u2014 Object name. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML after conversion. METHOD __bool__ () \u2192 bool Returns True if name is not empty. GENERATOR __iter__ () \u2192 Base Yields self if the markdown attribute has link form. METHOD set_html (html) Sets html attribute cleaning p tags. Parameters html (str) \u2014 HTML string. DATACLASS mkapi.core.base . Item (name='', markdown='', type=<factory>) Item class represents an item in Parameters, Attributes, and Raises sections. Parameters name (str, optional) \u2014 Object name. markdown (str, optional) \u2014 Markdown source. type ( Type , optional) \u2014 Type of self. Attributes name (str) \u2014 Object name. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML after conversion. type ( Type ) \u2014 Type of self. METHOD set_html (html) Sets html attribute cleaning p tags. Parameters html (str) \u2014 HTML string. DATACLASS mkapi.core.base . Section (name='', markdown='', items=<factory>, type=<factory>) Section class represents a section in docstring. Parameters name (str, optional) \u2014 Object name. markdown (str, optional) \u2014 Markdown source. items (list of Item , optional) \u2014 List for Arguments, Attributes, or Raises sections. type ( Type , optional) \u2014 Type of self. Attributes name (str) \u2014 Object name. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML after conversion. items (list of Item ) \u2014 List for Arguments, Attributes, or Raises sections. type ( Type ) \u2014 Type of self. Examples Section is iterable: >>> section = Section('Returns', markdown='An integer.') >>> for x in section: ... assert x is section >>> items = [Item('x'), Item('y'), Item('z')] >>> section = Section('Parameters', items=items) >>> [item.name for item in section] ['x', 'y', 'z'] Indexing: >>> isinstance(section['y'], Item) True >>> section['z'].name 'z' Contains: >>> 'x' in section True METHOD set_html (html) Sets html attribute. Parameters html (str) \u2014 HTML string. GENERATOR __iter__ () \u2192 Base Yields Base instance that has non empty Markdown. Parameters name \u2014 Item name. METHOD __getitem__ (name) \u2192 Item , optional Returns Item instance whose name is equal to name . If not found, returns None. Parameters name \u2014 Item name. METHOD __contains__ (name) \u2192 bool Returns True if there is Item instance whose name is name . Parameters name \u2014 Item name. DATACLASS mkapi.core.base . Docstring (sections=<factory>, type=<factory>) Docstring class represents a docstring of an object. Parameters sections (list of Section , optional) \u2014 List of Section instance. type ( Type , optional) \u2014 Type for Returns and Yields sections. Attributes sections (list of Section ) \u2014 List of Section instance. type ( Type ) \u2014 Type for missing Returns and Yields sections. Examples Empty docstring: >>> docstring = Docstring() >>> assert not docstring Docstring with 3 sections: >>> default = Section(\"\", markdown=\"Default\") >>> parameters = Section(\"Parameters\", items=[Item(\"a\"), Item(\"b\")]) >>> returns = Section(\"Returns\", markdown=\"Results\") >>> docstring = Docstring([default, parameters, returns]) Docstring is iterable: >>> [base.name for base in docstring] ['', 'a', 'b', 'Returns'] Indexing: >>> docstring[\"Parameters\"].items[0].name 'a' DATACLASS mkapi.core.base . Object (name='', markdown='', prefix='', qualname='', kind='', type=<factory>, signature=<factory>) Object class represents an object. Parameters name (str, optional) \u2014 Object name. Item for Item class. markdown (str, optional) \u2014 Markdown source. prefix (str, optional) \u2014 Object prefix. mkapi.core.base for Item class. qualname (str, optional) \u2014 kind (str, optional) \u2014 Object kind such as 'class', 'function'. etc. type ( Type , optional) \u2014 Type for missing Returns and Yields sections. signature ( Signature , optional) \u2014 Signature if object is callable. Attributes name (str) \u2014 Object name. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML after conversion. prefix (str) \u2014 Object prefix. mkapi.core.base for Item class. qualname (str) \u2014 id (str) \u2014 CSS ID. kind (str) \u2014 Object kind such as 'class', 'function'. etc. type ( Type ) \u2014 Type for missing Returns and Yields sections. signature ( Signature ) \u2014 Signature if object is callable. METHOD set_html (html) Sets html attribute. Parameters html (str) \u2014 HTML string.","title":"base"},{"location":"api/mkapi.core.base/#mkapicorebase","text":"This module provides entity classes to represent docstring structure. DATACLASS mkapi.core.base . Base (name='', markdown='') Base class. Parameters name (str, optional) \u2014 Object name. markdown (str, optional) \u2014 Markdown source. Attributes name (str) \u2014 Object name. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML after conversion. METHOD set_html (html) Sets html attribute. Parameters html (str) \u2014 HTML string. DATACLASS mkapi.core.base . Type (name='', markdown='') Type class represents type for Item , Section , Docstring , and Object . Parameters name (str, optional) \u2014 Object name. markdown (str, optional) \u2014 Markdown source. Attributes name (str) \u2014 Object name. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML after conversion. METHOD __bool__ () \u2192 bool Returns True if name is not empty. GENERATOR __iter__ () \u2192 Base Yields self if the markdown attribute has link form. METHOD set_html (html) Sets html attribute cleaning p tags. Parameters html (str) \u2014 HTML string. DATACLASS mkapi.core.base . Item (name='', markdown='', type=<factory>) Item class represents an item in Parameters, Attributes, and Raises sections. Parameters name (str, optional) \u2014 Object name. markdown (str, optional) \u2014 Markdown source. type ( Type , optional) \u2014 Type of self. Attributes name (str) \u2014 Object name. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML after conversion. type ( Type ) \u2014 Type of self. METHOD set_html (html) Sets html attribute cleaning p tags. Parameters html (str) \u2014 HTML string. DATACLASS mkapi.core.base . Section (name='', markdown='', items=<factory>, type=<factory>) Section class represents a section in docstring. Parameters name (str, optional) \u2014 Object name. markdown (str, optional) \u2014 Markdown source. items (list of Item , optional) \u2014 List for Arguments, Attributes, or Raises sections. type ( Type , optional) \u2014 Type of self. Attributes name (str) \u2014 Object name. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML after conversion. items (list of Item ) \u2014 List for Arguments, Attributes, or Raises sections. type ( Type ) \u2014 Type of self. Examples Section is iterable: >>> section = Section('Returns', markdown='An integer.') >>> for x in section: ... assert x is section >>> items = [Item('x'), Item('y'), Item('z')] >>> section = Section('Parameters', items=items) >>> [item.name for item in section] ['x', 'y', 'z'] Indexing: >>> isinstance(section['y'], Item) True >>> section['z'].name 'z' Contains: >>> 'x' in section True METHOD set_html (html) Sets html attribute. Parameters html (str) \u2014 HTML string. GENERATOR __iter__ () \u2192 Base Yields Base instance that has non empty Markdown. Parameters name \u2014 Item name. METHOD __getitem__ (name) \u2192 Item , optional Returns Item instance whose name is equal to name . If not found, returns None. Parameters name \u2014 Item name. METHOD __contains__ (name) \u2192 bool Returns True if there is Item instance whose name is name . Parameters name \u2014 Item name. DATACLASS mkapi.core.base . Docstring (sections=<factory>, type=<factory>) Docstring class represents a docstring of an object. Parameters sections (list of Section , optional) \u2014 List of Section instance. type ( Type , optional) \u2014 Type for Returns and Yields sections. Attributes sections (list of Section ) \u2014 List of Section instance. type ( Type ) \u2014 Type for missing Returns and Yields sections. Examples Empty docstring: >>> docstring = Docstring() >>> assert not docstring Docstring with 3 sections: >>> default = Section(\"\", markdown=\"Default\") >>> parameters = Section(\"Parameters\", items=[Item(\"a\"), Item(\"b\")]) >>> returns = Section(\"Returns\", markdown=\"Results\") >>> docstring = Docstring([default, parameters, returns]) Docstring is iterable: >>> [base.name for base in docstring] ['', 'a', 'b', 'Returns'] Indexing: >>> docstring[\"Parameters\"].items[0].name 'a' DATACLASS mkapi.core.base . Object (name='', markdown='', prefix='', qualname='', kind='', type=<factory>, signature=<factory>) Object class represents an object. Parameters name (str, optional) \u2014 Object name. Item for Item class. markdown (str, optional) \u2014 Markdown source. prefix (str, optional) \u2014 Object prefix. mkapi.core.base for Item class. qualname (str, optional) \u2014 kind (str, optional) \u2014 Object kind such as 'class', 'function'. etc. type ( Type , optional) \u2014 Type for missing Returns and Yields sections. signature ( Signature , optional) \u2014 Signature if object is callable. Attributes name (str) \u2014 Object name. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML after conversion. prefix (str) \u2014 Object prefix. mkapi.core.base for Item class. qualname (str) \u2014 id (str) \u2014 CSS ID. kind (str) \u2014 Object kind such as 'class', 'function'. etc. type ( Type ) \u2014 Type for missing Returns and Yields sections. signature ( Signature ) \u2014 Signature if object is callable. METHOD set_html (html) Sets html attribute. Parameters html (str) \u2014 HTML string.","title":"mkapi.core.base"},{"location":"api/mkapi.core.docstring/","text":"MODULE MKAPI.CORE . DOCSTRING This module provides functions that parse docstring. FUNCTION mkapi.core.docstring . section_heading (line) \u2192 (str, str) Returns a tuple of (section name, style name). Parameters line (str) \u2014 Docstring line. Examples >>> section_heading(\"Args:\") ('Args', 'google') >>> section_heading(\"Raises\") ('Raises', 'numpy') >>> section_heading(\"other\") ('', '') GENERATOR mkapi.core.docstring . split_section (doc) \u2192 (str, str, str) Yields a tuple of (section name, contents, style). Parameters doc (str) \u2014 Docstring Examples >>> doc = \"abc\\n\\nArgs:\\n x: X\\n\" >>> it = split_section(doc) >>> next(it) ('', 'abc', '') >>> next(it) ('Parameters', 'x: X', 'google') GENERATOR mkapi.core.docstring . split_parameter (doc) \u2192 list of str Yields a list of parameter string. Parameters doc (str) \u2014 Docstring FUNCTION mkapi.core.docstring . parse_parameter (lines, style) \u2192 (str, str, str) Yields a tuple of (name, markdown, type). Parameters lines (list of str) \u2014 Splitted parameter docstring lines. style (str) \u2014 Docstring style. google or numpy . FUNCTION mkapi.core.docstring . parse_parameters (doc, style) \u2192 list of (str, str, str) Returns a list of (name, markdown, type). Parameters doc (str) \u2014 style (str) \u2014 FUNCTION mkapi.core.docstring . parse_returns (doc, style) \u2192 (str, str) Returns a tuple of (markdown, type). Parameters doc (str) \u2014 style (str) \u2014 FUNCTION mkapi.core.docstring . create_section (name, doc, style) \u2192 Section Returns a Section instance. Parameters name (str) \u2014 doc (str) \u2014 style (str) \u2014 FUNCTION mkapi.core.docstring . parse_property (doc, obj) Parses property's docstring to inspect type. Parameters doc ( Docstring ) \u2014 obj (any) \u2014 FUNCTION mkapi.core.docstring . get_docstring (obj) \u2192 Docstring Returns a Docstring instance. Parameters obj (any) \u2014","title":"docstring"},{"location":"api/mkapi.core.docstring/#mkapicoredocstring","text":"This module provides functions that parse docstring. FUNCTION mkapi.core.docstring . section_heading (line) \u2192 (str, str) Returns a tuple of (section name, style name). Parameters line (str) \u2014 Docstring line. Examples >>> section_heading(\"Args:\") ('Args', 'google') >>> section_heading(\"Raises\") ('Raises', 'numpy') >>> section_heading(\"other\") ('', '') GENERATOR mkapi.core.docstring . split_section (doc) \u2192 (str, str, str) Yields a tuple of (section name, contents, style). Parameters doc (str) \u2014 Docstring Examples >>> doc = \"abc\\n\\nArgs:\\n x: X\\n\" >>> it = split_section(doc) >>> next(it) ('', 'abc', '') >>> next(it) ('Parameters', 'x: X', 'google') GENERATOR mkapi.core.docstring . split_parameter (doc) \u2192 list of str Yields a list of parameter string. Parameters doc (str) \u2014 Docstring FUNCTION mkapi.core.docstring . parse_parameter (lines, style) \u2192 (str, str, str) Yields a tuple of (name, markdown, type). Parameters lines (list of str) \u2014 Splitted parameter docstring lines. style (str) \u2014 Docstring style. google or numpy . FUNCTION mkapi.core.docstring . parse_parameters (doc, style) \u2192 list of (str, str, str) Returns a list of (name, markdown, type). Parameters doc (str) \u2014 style (str) \u2014 FUNCTION mkapi.core.docstring . parse_returns (doc, style) \u2192 (str, str) Returns a tuple of (markdown, type). Parameters doc (str) \u2014 style (str) \u2014 FUNCTION mkapi.core.docstring . create_section (name, doc, style) \u2192 Section Returns a Section instance. Parameters name (str) \u2014 doc (str) \u2014 style (str) \u2014 FUNCTION mkapi.core.docstring . parse_property (doc, obj) Parses property's docstring to inspect type. Parameters doc ( Docstring ) \u2014 obj (any) \u2014 FUNCTION mkapi.core.docstring . get_docstring (obj) \u2192 Docstring Returns a Docstring instance. Parameters obj (any) \u2014","title":"mkapi.core.docstring"},{"location":"api/mkapi.core.linker/","text":"MODULE MKAPI.CORE . LINKER This module provides functions that relate to link. FUNCTION mkapi.core.linker . link (name, href) \u2192 str Reutrns Markdown link with a mark that indicates this link was created by MkApi. Parameters name (str) \u2014 Link name. href (str) \u2014 Reference. Examples >>> link('abc', 'xyz') '[abc](!xyz)' FUNCTION mkapi.core.linker . resolve_link (markdown, abs_src_path, abs_api_paths) \u2192 str Reutrns resolved link. Parameters markdown (str) \u2014 Markdown source. abs_src_path (str) \u2014 Absolute source path of Markdown. abs_api_paths (list of str) \u2014 A list of API paths. Examples >>> abs_src_path = '/src/examples/example.md' >>> abs_api_paths = ['/api/a','/api/b', '/api/b.c'] >>> resolve_link('[abc](!b.c.d)', abs_src_path, abs_api_paths) '[abc](../../api/b.c#b.c.d)' FUNCTION mkapi.core.linker . resolve_object (html) \u2192 dict(str: any) Reutrns an object context dictionary. Parameters html (str) \u2014 HTML source. Examples >>> resolve_object(\"<p><a href='a'>p</a><a href='b'>n</a></p>\") {'heading_id': '', 'level': 0, 'prefix_url': 'a', 'name_url': 'b'} >>> resolve_object(\"<h2 id='i'><a href='a'>p</a><a href='b'>n</a></h2>\") {'heading_id': 'i', 'level': 2, 'prefix_url': 'a', 'name_url': 'b'} FUNCTION mkapi.core.linker . replace_link (obj, markdown) \u2192 str Returns a replaced link with object full name. Parameters obj (any) \u2014 Object that has a module. markdown (str) \u2014 Markdown Examples >>> from mkapi.core.object import get_object >>> obj = get_object('mkapi.core.base.Object') >>> replace_link(obj, '[Signature]()') '[Signature](!mkapi.core.signature.Signature)' >>> replace_link(obj, '[dummy.Dummy]()') '[dummy.Dummy]()'","title":"linker"},{"location":"api/mkapi.core.linker/#mkapicorelinker","text":"This module provides functions that relate to link. FUNCTION mkapi.core.linker . link (name, href) \u2192 str Reutrns Markdown link with a mark that indicates this link was created by MkApi. Parameters name (str) \u2014 Link name. href (str) \u2014 Reference. Examples >>> link('abc', 'xyz') '[abc](!xyz)' FUNCTION mkapi.core.linker . resolve_link (markdown, abs_src_path, abs_api_paths) \u2192 str Reutrns resolved link. Parameters markdown (str) \u2014 Markdown source. abs_src_path (str) \u2014 Absolute source path of Markdown. abs_api_paths (list of str) \u2014 A list of API paths. Examples >>> abs_src_path = '/src/examples/example.md' >>> abs_api_paths = ['/api/a','/api/b', '/api/b.c'] >>> resolve_link('[abc](!b.c.d)', abs_src_path, abs_api_paths) '[abc](../../api/b.c#b.c.d)' FUNCTION mkapi.core.linker . resolve_object (html) \u2192 dict(str: any) Reutrns an object context dictionary. Parameters html (str) \u2014 HTML source. Examples >>> resolve_object(\"<p><a href='a'>p</a><a href='b'>n</a></p>\") {'heading_id': '', 'level': 0, 'prefix_url': 'a', 'name_url': 'b'} >>> resolve_object(\"<h2 id='i'><a href='a'>p</a><a href='b'>n</a></h2>\") {'heading_id': 'i', 'level': 2, 'prefix_url': 'a', 'name_url': 'b'} FUNCTION mkapi.core.linker . replace_link (obj, markdown) \u2192 str Returns a replaced link with object full name. Parameters obj (any) \u2014 Object that has a module. markdown (str) \u2014 Markdown Examples >>> from mkapi.core.object import get_object >>> obj = get_object('mkapi.core.base.Object') >>> replace_link(obj, '[Signature]()') '[Signature](!mkapi.core.signature.Signature)' >>> replace_link(obj, '[dummy.Dummy]()') '[dummy.Dummy]()'","title":"mkapi.core.linker"},{"location":"api/mkapi.core/","text":"PACKAGE MKAPI. CORE Package level documentation is written in __init__.py .","title":"mkapi.core"},{"location":"api/mkapi.core/#mkapicore","text":"Package level documentation is written in __init__.py .","title":"mkapi.core"},{"location":"api/mkapi.core.module/","text":"MODULE MKAPI.CORE . MODULE This modules provides Module class that has tree structure. DATACLASS mkapi.core.module . Module (obj) Module class represents an module. Parameters obj (any) \u2014 Object. Attributes obj (any) \u2014 Object. sourcefile (str) \u2014 Source file path. lineno (int) \u2014 Line number. object ( Object ) \u2014 Object instance. docstring ( Docstring ) \u2014 Docstring instance. parent (any) \u2014 Parent Module instance. members (list of Module) \u2014 Member Module instances. objects (list of str) \u2014 METHOD get_kind () \u2192 str Returns kind of this object. METHOD get_members () \u2192 list of Module Returns a list of members. METHOD get_markdown (filters) \u2192 str Returns a Markdown source for docstring of this object. Parameters filters (list of str) \u2014 A list of filters. Avaiable filters: upper , inherit , strict . FUNCTION mkapi.core.module . get_module (name) \u2192 Module Returns a Module instace by name or object. Parameters name \u2014 Object name or object itself.","title":"module"},{"location":"api/mkapi.core.module/#mkapicoremodule","text":"This modules provides Module class that has tree structure. DATACLASS mkapi.core.module . Module (obj) Module class represents an module. Parameters obj (any) \u2014 Object. Attributes obj (any) \u2014 Object. sourcefile (str) \u2014 Source file path. lineno (int) \u2014 Line number. object ( Object ) \u2014 Object instance. docstring ( Docstring ) \u2014 Docstring instance. parent (any) \u2014 Parent Module instance. members (list of Module) \u2014 Member Module instances. objects (list of str) \u2014 METHOD get_kind () \u2192 str Returns kind of this object. METHOD get_members () \u2192 list of Module Returns a list of members. METHOD get_markdown (filters) \u2192 str Returns a Markdown source for docstring of this object. Parameters filters (list of str) \u2014 A list of filters. Avaiable filters: upper , inherit , strict . FUNCTION mkapi.core.module . get_module (name) \u2192 Module Returns a Module instace by name or object. Parameters name \u2014 Object name or object itself.","title":"mkapi.core.module"},{"location":"api/mkapi.core.node/","text":"MODULE MKAPI.CORE . NODE This modules provides Node class that has tree structure. DATACLASS mkapi.core.node . Node (obj) Node class represents an object. Parameters obj (any) \u2014 Object. Attributes obj (any) \u2014 Object. sourcefile (str) \u2014 Source file path. lineno (int) \u2014 Line number. object ( Object ) \u2014 Object instance. docstring ( Docstring ) \u2014 Docstring instance. parent (Node, optional) \u2014 Parent Node instance. members (list of Node) \u2014 Member Node instances. METHOD get_kind () \u2192 str Returns kind of this object. METHOD get_members () \u2192 list of Node Returns a list of members. METHOD get_markdown (level=0, callback=None) \u2192 str Returns a Markdown source for docstring of this object. Parameters level (int, optional) \u2014 Heading level. If 0, <div> tags are used. callback (callable, optional) \u2014 To modify Markdown source. METHOD set_html (html) Sets HTML to Base instances recursively. Parameters html (str) \u2014 HTML that is provided by a Markdown converter. METHOD render () \u2192 str Renders and returns HTML. FUNCTION mkapi.core.node . get_node (name) \u2192 Node Returns a Node instace by name or object. Parameters name \u2014 Object name or object itself.","title":"node"},{"location":"api/mkapi.core.node/#mkapicorenode","text":"This modules provides Node class that has tree structure. DATACLASS mkapi.core.node . Node (obj) Node class represents an object. Parameters obj (any) \u2014 Object. Attributes obj (any) \u2014 Object. sourcefile (str) \u2014 Source file path. lineno (int) \u2014 Line number. object ( Object ) \u2014 Object instance. docstring ( Docstring ) \u2014 Docstring instance. parent (Node, optional) \u2014 Parent Node instance. members (list of Node) \u2014 Member Node instances. METHOD get_kind () \u2192 str Returns kind of this object. METHOD get_members () \u2192 list of Node Returns a list of members. METHOD get_markdown (level=0, callback=None) \u2192 str Returns a Markdown source for docstring of this object. Parameters level (int, optional) \u2014 Heading level. If 0, <div> tags are used. callback (callable, optional) \u2014 To modify Markdown source. METHOD set_html (html) Sets HTML to Base instances recursively. Parameters html (str) \u2014 HTML that is provided by a Markdown converter. METHOD render () \u2192 str Renders and returns HTML. FUNCTION mkapi.core.node . get_node (name) \u2192 Node Returns a Node instace by name or object. Parameters name \u2014 Object name or object itself.","title":"mkapi.core.node"},{"location":"api/mkapi.core.object/","text":"MODULE MKAPI.CORE . OBJECT This module provides utility functions that relates to object. FUNCTION mkapi.core.object . get_object (name) \u2192 any Reutrns an object specified by name . Parameters name (str) \u2014 Object name. Examples >>> import inspect >>> obj = get_object('mkapi.core') >>> inspect.ismodule(obj) True >>> obj = get_object('mkapi.core.base') >>> inspect.ismodule(obj) True >>> obj = get_object('mkapi.core.node.Node') >>> inspect.isclass(obj) True >>> obj = get_object('mkapi.core.node.Node.get_markdown') >>> inspect.isfunction(obj) True FUNCTION mkapi.core.object . get_fullname (obj, name) \u2192 str Reutrns an object full name specified by name . Parameters obj (any) \u2014 Object that has a module. name (str) \u2014 Object name in the module. Examples >>> import inspect >>> obj = get_object('mkapi.core.base.Item') >>> get_fullname(obj, 'Section') 'mkapi.core.base.Section' >>> get_fullname(obj, 'linker.link') 'mkapi.core.linker.link' >>> get_fullname(obj, 'abc') '' FUNCTION mkapi.core.object . split_prefix_and_name (obj) \u2192 (str, str) Split an object full name into prefix and name. Parameters obj (any) \u2014 Object that has a module. Examples >>> import inspect >>> obj = get_object('mkapi.core') >>> split_prefix_and_name(obj) ('mkapi', 'core') >>> obj = get_object('mkapi.core.base') >>> split_prefix_and_name(obj) ('mkapi.core', 'base') >>> obj = get_object('mkapi.core.node.Node') >>> split_prefix_and_name(obj) ('mkapi.core.node', 'Node') >>> obj = get_object('mkapi.core.node.Node.get_markdown') >>> split_prefix_and_name(obj) ('mkapi.core.node.Node', 'get_markdown') FUNCTION mkapi.core.object . from_object (obj) Returns True, if the docstring of obj is the same as that of object . Parameters obj \u2014 Object. Examples >>> class A: pass >>> from_object(A.__call__) True >>> from_object(A.__eq__) True >>> from_object(A.__getattribute__) True","title":"object"},{"location":"api/mkapi.core.object/#mkapicoreobject","text":"This module provides utility functions that relates to object. FUNCTION mkapi.core.object . get_object (name) \u2192 any Reutrns an object specified by name . Parameters name (str) \u2014 Object name. Examples >>> import inspect >>> obj = get_object('mkapi.core') >>> inspect.ismodule(obj) True >>> obj = get_object('mkapi.core.base') >>> inspect.ismodule(obj) True >>> obj = get_object('mkapi.core.node.Node') >>> inspect.isclass(obj) True >>> obj = get_object('mkapi.core.node.Node.get_markdown') >>> inspect.isfunction(obj) True FUNCTION mkapi.core.object . get_fullname (obj, name) \u2192 str Reutrns an object full name specified by name . Parameters obj (any) \u2014 Object that has a module. name (str) \u2014 Object name in the module. Examples >>> import inspect >>> obj = get_object('mkapi.core.base.Item') >>> get_fullname(obj, 'Section') 'mkapi.core.base.Section' >>> get_fullname(obj, 'linker.link') 'mkapi.core.linker.link' >>> get_fullname(obj, 'abc') '' FUNCTION mkapi.core.object . split_prefix_and_name (obj) \u2192 (str, str) Split an object full name into prefix and name. Parameters obj (any) \u2014 Object that has a module. Examples >>> import inspect >>> obj = get_object('mkapi.core') >>> split_prefix_and_name(obj) ('mkapi', 'core') >>> obj = get_object('mkapi.core.base') >>> split_prefix_and_name(obj) ('mkapi.core', 'base') >>> obj = get_object('mkapi.core.node.Node') >>> split_prefix_and_name(obj) ('mkapi.core.node', 'Node') >>> obj = get_object('mkapi.core.node.Node.get_markdown') >>> split_prefix_and_name(obj) ('mkapi.core.node.Node', 'get_markdown') FUNCTION mkapi.core.object . from_object (obj) Returns True, if the docstring of obj is the same as that of object . Parameters obj \u2014 Object. Examples >>> class A: pass >>> from_object(A.__call__) True >>> from_object(A.__eq__) True >>> from_object(A.__getattribute__) True","title":"mkapi.core.object"},{"location":"api/mkapi.core.page/","text":"MODULE MKAPI.CORE . PAGE This module provides a Page class that works with other converter. DATACLASS mkapi.core.page . Page (source, abs_src_path, abs_api_paths=<factory>) Page class works with MkapiPlugin . Parameters source (str) \u2014 Markdown source. abs_src_path (str) \u2014 Absolute source path of Markdown. abs_api_paths (list of str, optional) \u2014 A list of API paths. Attributes abs_src_path (str) \u2014 Absolute source path of Markdown. abs_api_paths (list of str) \u2014 A list of API paths. markdown (str) \u2014 Converted Markdown including API documentation. nodes (list of Node ) \u2014 A list of Node instances. METHOD content (html) \u2192 str Returns updated HTML to MkapiPlugin . Parameters html (str) \u2014 Input HTML converted by MkDocs.","title":"page"},{"location":"api/mkapi.core.page/#mkapicorepage","text":"This module provides a Page class that works with other converter. DATACLASS mkapi.core.page . Page (source, abs_src_path, abs_api_paths=<factory>) Page class works with MkapiPlugin . Parameters source (str) \u2014 Markdown source. abs_src_path (str) \u2014 Absolute source path of Markdown. abs_api_paths (list of str, optional) \u2014 A list of API paths. Attributes abs_src_path (str) \u2014 Absolute source path of Markdown. abs_api_paths (list of str) \u2014 A list of API paths. markdown (str) \u2014 Converted Markdown including API documentation. nodes (list of Node ) \u2014 A list of Node instances. METHOD content (html) \u2192 str Returns updated HTML to MkapiPlugin . Parameters html (str) \u2014 Input HTML converted by MkDocs.","title":"mkapi.core.page"},{"location":"api/mkapi.core.renderer/","text":"MODULE MKAPI.CORE . RENDERER This module provides Renderer class that renders Node instance to create API documentation. DATACLASS mkapi.core.renderer . Renderer () Renderer instance renders Node instance recursively to create API documentation. Attributes templates (dict(str: Template)) \u2014 Jinja template dictionary. METHOD render (node, upper=False) \u2192 str Returns a rendered HTML for Node. Parameters node ( Node ) \u2014 Node instance. upper (bool, optional) \u2014 If True, object is written in upper case letters. METHOD render_node (node, object, docstring, members) \u2192 str Returns a rendered HTML for Node using prerendered components. Parameters node ( Node ) \u2014 Node instance. object (str) \u2014 Rendered HTML for Object instance. docstring (str) \u2014 Rendered HTML for Docstring instance. members (list of str) \u2014 A list of rendered HTML for member Node instances. METHOD render_object (object, heading=False, upper=False) \u2192 str Returns a rendered HTML for Object. Parameters object ( Object ) \u2014 Object instance. heading (bool, optional) \u2014 If True, object is written in a heading tag. upper (bool, optional) \u2014 If True, object is written in upper case letters. METHOD render_docstring (docstring) \u2192 str Returns a rendered HTML for Docstring. Parameters docstring ( Docstring ) \u2014 Docstring instance. METHOD render_section (section) \u2192 str Returns a rendered HTML for Section. Parameters section ( Section ) \u2014 Section instance. METHOD render_module (module, filters) \u2192 str Returns a rendered Markdown for Module. Parameters module ( Module ) \u2014 Module instance. filters (list of str) \u2014 A list of filters. Avaiable filters: upper , inherit , strict . Note This function returns Markdown instead of HTML. The returned Markdown will be converted into HTML by MkDocs. Then the HTML is rendered into HTML again by other functions in this module.","title":"renderer"},{"location":"api/mkapi.core.renderer/#mkapicorerenderer","text":"This module provides Renderer class that renders Node instance to create API documentation. DATACLASS mkapi.core.renderer . Renderer () Renderer instance renders Node instance recursively to create API documentation. Attributes templates (dict(str: Template)) \u2014 Jinja template dictionary. METHOD render (node, upper=False) \u2192 str Returns a rendered HTML for Node. Parameters node ( Node ) \u2014 Node instance. upper (bool, optional) \u2014 If True, object is written in upper case letters. METHOD render_node (node, object, docstring, members) \u2192 str Returns a rendered HTML for Node using prerendered components. Parameters node ( Node ) \u2014 Node instance. object (str) \u2014 Rendered HTML for Object instance. docstring (str) \u2014 Rendered HTML for Docstring instance. members (list of str) \u2014 A list of rendered HTML for member Node instances. METHOD render_object (object, heading=False, upper=False) \u2192 str Returns a rendered HTML for Object. Parameters object ( Object ) \u2014 Object instance. heading (bool, optional) \u2014 If True, object is written in a heading tag. upper (bool, optional) \u2014 If True, object is written in upper case letters. METHOD render_docstring (docstring) \u2192 str Returns a rendered HTML for Docstring. Parameters docstring ( Docstring ) \u2014 Docstring instance. METHOD render_section (section) \u2192 str Returns a rendered HTML for Section. Parameters section ( Section ) \u2014 Section instance. METHOD render_module (module, filters) \u2192 str Returns a rendered Markdown for Module. Parameters module ( Module ) \u2014 Module instance. filters (list of str) \u2014 A list of filters. Avaiable filters: upper , inherit , strict . Note This function returns Markdown instead of HTML. The returned Markdown will be converted into HTML by MkDocs. Then the HTML is rendered into HTML again by other functions in this module.","title":"mkapi.core.renderer"},{"location":"api/mkapi.core.signature/","text":"MODULE MKAPI.CORE . SIGNATURE This module provides Signature class that inspects object and creates signature and types. DATACLASS mkapi.core.signature . Signature (obj=None) Signature class. Parameters obj (any, optional) \u2014 Object Attributes obj (any) \u2014 Object signature (Signature, optional) \u2014 inspect.Signature instance. parameters (dict(str: str)) \u2014 Parameter dictionary. Key is parameter name and value is type string. defaults (dict(str: any)) \u2014 Default value dictionary. Key is parameter name and value is default value. attributes (dict(str: str)) \u2014 Attribute dictionary for dataclass. Key is attribute name and value is type string. returns (str) \u2014 Returned type string. Used in Returns section. yields (str) \u2014 Yielded type string. Used in Yields section. FUNCTION mkapi.core.signature . to_string (annotation, kind='returns') \u2192 str Returns string expression of annotation. If possible, type string includes link. Parameters annotation \u2014 Annotation kind (str, optional) \u2014 'returns' or 'yields' Examples >>> from typing import Iterator, List >>> to_string(Iterator[str]) 'iterator of str' >>> to_string(Iterator[str], 'yields') 'str' >>> from mkapi.core.node import Node >>> to_string(List[Node]) 'list of [Node](!mkapi.core.node.Node)' FUNCTION mkapi.core.signature . a_of_b (annotation) \u2192 str Returns A of B style string. Parameters annotation \u2014 Annotation Examples >>> from typing import List, Iterable, Iterator >>> a = List[str] >>> a_of_b(a) 'list of str' >>> a = Iterable[int] >>> a_of_b(a) 'iterable of int' >>> a = Iterator[float] >>> a_of_b(a) 'iterator of float' FUNCTION mkapi.core.signature . union (annotation) \u2192 str Returns a string for union annotation. Parameters annotation \u2014 Annotation Examples >>> from typing import List, Optional, Tuple, Union >>> a = Optional[List[str]] >>> union(a) 'list of str, optional' >>> a = Union[str, int] >>> union(a) 'str or int' >>> a = Union[str, int, float] >>> union(a) 'str, int, or float' >>> a = Union[List[str], Tuple[int, int]] >>> union(a) 'Union(list of str, (int, int))'","title":"signature"},{"location":"api/mkapi.core.signature/#mkapicoresignature","text":"This module provides Signature class that inspects object and creates signature and types. DATACLASS mkapi.core.signature . Signature (obj=None) Signature class. Parameters obj (any, optional) \u2014 Object Attributes obj (any) \u2014 Object signature (Signature, optional) \u2014 inspect.Signature instance. parameters (dict(str: str)) \u2014 Parameter dictionary. Key is parameter name and value is type string. defaults (dict(str: any)) \u2014 Default value dictionary. Key is parameter name and value is default value. attributes (dict(str: str)) \u2014 Attribute dictionary for dataclass. Key is attribute name and value is type string. returns (str) \u2014 Returned type string. Used in Returns section. yields (str) \u2014 Yielded type string. Used in Yields section. FUNCTION mkapi.core.signature . to_string (annotation, kind='returns') \u2192 str Returns string expression of annotation. If possible, type string includes link. Parameters annotation \u2014 Annotation kind (str, optional) \u2014 'returns' or 'yields' Examples >>> from typing import Iterator, List >>> to_string(Iterator[str]) 'iterator of str' >>> to_string(Iterator[str], 'yields') 'str' >>> from mkapi.core.node import Node >>> to_string(List[Node]) 'list of [Node](!mkapi.core.node.Node)' FUNCTION mkapi.core.signature . a_of_b (annotation) \u2192 str Returns A of B style string. Parameters annotation \u2014 Annotation Examples >>> from typing import List, Iterable, Iterator >>> a = List[str] >>> a_of_b(a) 'list of str' >>> a = Iterable[int] >>> a_of_b(a) 'iterable of int' >>> a = Iterator[float] >>> a_of_b(a) 'iterator of float' FUNCTION mkapi.core.signature . union (annotation) \u2192 str Returns a string for union annotation. Parameters annotation \u2014 Annotation Examples >>> from typing import List, Optional, Tuple, Union >>> a = Optional[List[str]] >>> union(a) 'list of str, optional' >>> a = Union[str, int] >>> union(a) 'str or int' >>> a = Union[str, int, float] >>> union(a) 'str, int, or float' >>> a = Union[List[str], Tuple[int, int]] >>> union(a) 'Union(list of str, (int, int))'","title":"mkapi.core.signature"},{"location":"api/mkapi.plugins.mkdocs/","text":"MODULE MKAPI.PLUGINS. MKDOCS This module provides the MkapiPlugin class. MkapiPlugin is a MkDocs plugin that creates Python API documentation from Docstring. CLASS mkapi.plugins.mkdocs . MkapiPlugin () MkapiPlugin class for API generation. METHOD on_config (config) Inserts src_dirs to sys.path . Parameters config \u2014 METHOD on_files (files, config) Collects plugin css ans js and appends them to files . Parameters files \u2014 config \u2014 METHOD on_page_markdown (markdown, page, config, files) Converts Markdown source to intermidiate version. Parameters markdown \u2014 page \u2014 config \u2014 files \u2014 METHOD on_page_content (html, page, config, files) Merges html and MkApi's node structure. Parameters html \u2014 page \u2014 config \u2014 files \u2014","title":"mkdocs"},{"location":"api/mkapi.plugins.mkdocs/#mkapipluginsmkdocs","text":"This module provides the MkapiPlugin class. MkapiPlugin is a MkDocs plugin that creates Python API documentation from Docstring. CLASS mkapi.plugins.mkdocs . MkapiPlugin () MkapiPlugin class for API generation. METHOD on_config (config) Inserts src_dirs to sys.path . Parameters config \u2014 METHOD on_files (files, config) Collects plugin css ans js and appends them to files . Parameters files \u2014 config \u2014 METHOD on_page_markdown (markdown, page, config, files) Converts Markdown source to intermidiate version. Parameters markdown \u2014 page \u2014 config \u2014 files \u2014 METHOD on_page_content (html, page, config, files) Merges html and MkApi's node structure. Parameters html \u2014 page \u2014 config \u2014 files \u2014","title":"mkapi.plugins.mkdocs"},{"location":"appendix/inherit/","text":"Inheritance and Special Methods Examples <!-- .mkapi-node { border: 2px dashed #88AA88; } --> File 5 appendix/inherit.py class Abstract: \"\"\"Abstract class.\"\"\" def call(self): \"\"\"Abstract method.\"\"\" raise NotImplementedError def func(self): \"\"\"Function.\"\"\" class Concrete(Abstract): \"\"\"Concrete class.\"\"\" def call(self): \"\"\"Concrete method.\"\"\" # Should be added. def func(self): pass # Should not be added. def __call__(self): return self.call() # Should not be added. def __repr__(self): return self.call() # Should not be added. def __str__(self): return self.call() # and so on. Superclass ![mkapi](appendix.inherit.Abstract) CLASS appendix.inherit. Abstract () Abstract class. METHOD call () Abstract method. METHOD func () Function. Subclass ![mkapi](appendix.inherit.Concrete) CLASS appendix.inherit. Concrete () Concrete class. METHOD call () Concrete method. METHOD func () Function. Implementation There are two ways to get docstring: __doc__ attribute or inspect.getdoc() . import inspect from appendix.inherit import Abstract, Concrete Abstract.func.__doc__, inspect.getdoc(Abstract.func) [2] 2020-06-09 14:21:02 ( 4.00ms ) python3 ( 519ms ) ('Function.', 'Function.') Concrete.func.__doc__, inspect.getdoc(Concrete.func) [3] 2020-06-09 14:21:54 ( 3.00ms ) python3 ( 525ms ) (None, 'Function.') Because Concrete.func() has no docstring, its __doc__ attribute is None . On the other hand, the super class Abstract.func() has docstring, so that you can get the inherited docstring using inspect.getdoc() . Therefore, MkApi uses inspect.getdoc() . Now, let's see some special methods: Concrete.__call__.__doc__, inspect.getdoc(Concrete.__call__) [4] 2020-06-09 14:33:38 ( 3.00ms ) python3 ( 620ms ) (None, 'Call self as a function.') Concrete.__repr__.__doc__, inspect.getdoc(Concrete.__repr__) [5] 2020-06-09 14:34:52 ( 3.00ms ) python3 ( 630ms ) (None, 'Return repr(self).') Concrete.__repr__.__doc__, inspect.getdoc(Concrete.__repr__) [6] 2020-06-09 14:34:52 ( 5.00ms ) python3 ( 635ms ) (None, 'Return repr(self).') These docstrings come from object . for name, obj in object.__dict__.items(): doc = obj.__doc__ if doc and '\\n' not in doc: print(f\"{name}: {doc}\") [7] 2020-06-09 14:47:10 ( 4.00ms ) python3 ( 458ms ) __repr__: Return repr(self). __hash__: Return hash(self). __str__: Return str(self). __getattribute__: Return getattr(self, name). __setattr__: Implement setattr(self, name, value). __delattr__: Implement delattr(self, name). __lt__: Return self<value. __le__: Return self<=value. __eq__: Return self==value. __ne__: Return self!=value. __gt__: Return self>value. __ge__: Return self>=value. __init__: Initialize self. See help(type(self)) for accurate signature. __new__: Create and return a new object. See help(type) for accurate signature. __reduce_ex__: Helper for pickle. __reduce__: Helper for pickle. __format__: Default object formatter. __sizeof__: Size of object in memory, in bytes. __dir__: Default dir() implementation. __class__: the object's class If docstring of an ojbect is equal to that of object , the object doesn't be added into API documentation.","title":"Inheritance and Special Methods"},{"location":"appendix/inherit/#inheritance-and-special-methods","text":"","title":"Inheritance and Special Methods"},{"location":"appendix/inherit/#examples","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; } --> File 5 appendix/inherit.py class Abstract: \"\"\"Abstract class.\"\"\" def call(self): \"\"\"Abstract method.\"\"\" raise NotImplementedError def func(self): \"\"\"Function.\"\"\" class Concrete(Abstract): \"\"\"Concrete class.\"\"\" def call(self): \"\"\"Concrete method.\"\"\" # Should be added. def func(self): pass # Should not be added. def __call__(self): return self.call() # Should not be added. def __repr__(self): return self.call() # Should not be added. def __str__(self): return self.call() # and so on.","title":"Examples"},{"location":"appendix/inherit/#superclass","text":"![mkapi](appendix.inherit.Abstract) CLASS appendix.inherit. Abstract () Abstract class. METHOD call () Abstract method. METHOD func () Function.","title":"Superclass"},{"location":"appendix/inherit/#subclass","text":"![mkapi](appendix.inherit.Concrete) CLASS appendix.inherit. Concrete () Concrete class. METHOD call () Concrete method. METHOD func () Function.","title":"Subclass"},{"location":"appendix/inherit/#implementation","text":"There are two ways to get docstring: __doc__ attribute or inspect.getdoc() . import inspect from appendix.inherit import Abstract, Concrete Abstract.func.__doc__, inspect.getdoc(Abstract.func) [2] 2020-06-09 14:21:02 ( 4.00ms ) python3 ( 519ms ) ('Function.', 'Function.') Concrete.func.__doc__, inspect.getdoc(Concrete.func) [3] 2020-06-09 14:21:54 ( 3.00ms ) python3 ( 525ms ) (None, 'Function.') Because Concrete.func() has no docstring, its __doc__ attribute is None . On the other hand, the super class Abstract.func() has docstring, so that you can get the inherited docstring using inspect.getdoc() . Therefore, MkApi uses inspect.getdoc() . Now, let's see some special methods: Concrete.__call__.__doc__, inspect.getdoc(Concrete.__call__) [4] 2020-06-09 14:33:38 ( 3.00ms ) python3 ( 620ms ) (None, 'Call self as a function.') Concrete.__repr__.__doc__, inspect.getdoc(Concrete.__repr__) [5] 2020-06-09 14:34:52 ( 3.00ms ) python3 ( 630ms ) (None, 'Return repr(self).') Concrete.__repr__.__doc__, inspect.getdoc(Concrete.__repr__) [6] 2020-06-09 14:34:52 ( 5.00ms ) python3 ( 635ms ) (None, 'Return repr(self).') These docstrings come from object . for name, obj in object.__dict__.items(): doc = obj.__doc__ if doc and '\\n' not in doc: print(f\"{name}: {doc}\") [7] 2020-06-09 14:47:10 ( 4.00ms ) python3 ( 458ms ) __repr__: Return repr(self). __hash__: Return hash(self). __str__: Return str(self). __getattribute__: Return getattr(self, name). __setattr__: Implement setattr(self, name, value). __delattr__: Implement delattr(self, name). __lt__: Return self<value. __le__: Return self<=value. __eq__: Return self==value. __ne__: Return self!=value. __gt__: Return self>value. __ge__: Return self>=value. __init__: Initialize self. See help(type(self)) for accurate signature. __new__: Create and return a new object. See help(type) for accurate signature. __reduce_ex__: Helper for pickle. __reduce__: Helper for pickle. __format__: Default object formatter. __sizeof__: Size of object in memory, in bytes. __dir__: Default dir() implementation. __class__: the object's class If docstring of an ojbect is equal to that of object , the object doesn't be added into API documentation.","title":"Implementation"},{"location":"appendix/method/","text":"Method and Property Types <!-- .mkapi-node { border: 2px dashed #88AA88; } --> File 4 appendix/method.py class A: \"\"\"Class\"\"\" def m(self, x): \"Method\" @classmethod def c(cls, x): \"Class method\" @staticmethod def s(x): \"Static method\" @property def r(x): \"Read only property\" @property def w(x): \"Read write property\" @w.setter def w(x): pass ![mkapi](appendix.method.A) CLASS appendix.method. A () Class METHOD m (x) Method CLASSMETHOD c (x) Class method STATICMETHOD s (x) Static method READONLY_PROPERTY r Read only property READWRITE_PROPERTY w Read write property","title":"Method and Property Types"},{"location":"appendix/method/#method-and-property-types","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; } --> File 4 appendix/method.py class A: \"\"\"Class\"\"\" def m(self, x): \"Method\" @classmethod def c(cls, x): \"Class method\" @staticmethod def s(x): \"Static method\" @property def r(x): \"Read only property\" @property def w(x): \"Read write property\" @w.setter def w(x): pass ![mkapi](appendix.method.A) CLASS appendix.method. A () Class METHOD m (x) Method CLASSMETHOD c (x) Class method STATICMETHOD s (x) Static method READONLY_PROPERTY r Read only property READWRITE_PROPERTY w Read write property","title":"Method and Property Types"},{"location":"examples/google_style/","text":"Google Style <!-- .mkapi-node { border: 2px dashed #88AA88; } --> Let's start realistic examples. Here, a sample Python file google_style.py is stored under the examples directory relative to the mkdocs.yml directory, so you should configure mkdocs.yml like below. In addition, we add two extensions and an extra javascript for demonstration. plugins: - search - mkapi: src_dirs: [examples] markdown_extensions: - admonition - pymdownx.arithmatex extra_javascript: # for pymdownx.arithmatex - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML Function The google_style module defines a simple function add() . Code 1 google_style.add() def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Args: x: The first parameter. y: The second parameter. Default={default}. Returns: Added value. Examples: Examples should be written in doctest format >>> add(1, 2) 3 !!! note You can use the [admonition extension of MkDocs](https://squidfunk.github.io/mkdocs-material/extensions/admonition/). Note: But you should use `Note` section instead for consistency. \"\"\" return x + y Then, you can write an entry to generate API for the function anywhere in your Markdown source: ![mkapi](google_style.add) MkApi generates the API documentation for the add() function. FUNCTION google_style. add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note You can use the admonition extension of MkDocs . Note But you should use Note section instead for consistency. Note In the above example, green dashed border lines are just guide for the eye to show the region of the documentation generated by MkApi for convenience. In this simple example, you can see some features of MkApi. Type inspection of add (FUNCTION prefix is added before google_style.add ). Use of type annotation for both Parameters and Returns sections. Add optional if parameters have default values. Default value replacement by the {default} keyword in the Parameters section. External hyperlink. Use of MkDocs extensions: MathJax rendering and admonition. Generator The google_style module also defines a simple generator gen() . Code 2 google_style.gen() def gen(n) -> Iterator[str]: \"\"\"Yields a numbered string. Args: n (int): The length of iteration. Yields: A numbered string. \"\"\" for x in range(n): yield f\"a{x}\" Then, ![mkapi](google_style.gen) creates the API documentation for the gen() generator. GENERATOR google_style. gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. In this simple example, note that: A GENERATOR prefix instead of a FUNCTION prefix. The parameter n has no type annotation but you can specify it in the Parameters section directly. Yields type is not iterator of str but str , because gen() is a generator. Class The google_style module also defines a simple class ExampleClass . Code 3 google_style.ExampleClass class ExampleClass: def __init__(self, x: List[int], y: Tuple[str, int]): \"\"\"A normal class. Args: x: The first parameter. y: The second parameter. Attributes: z (str): The first attribute. Raises: ValueError: If the length of `x` is equal to 0. \"\"\" if len(x) == 0: raise ValueError() self.z = \"abc\" def message(self, n: int) -> List[str]: \"\"\"Returns a message list. Args: n: Repeatation. \"\"\" return [self.z] * n @property def readonly_property(self): \"\"\"str: Read-only property documentation.\"\"\" return \"readonly_property\" @property def readwrite_property(self) -> List[int]: \"\"\"Read-write property documentation.\"\"\" return [1, 2, 3] @readwrite_property.setter def readwrite_property(self, value): \"\"\"Docstring in setter is ignored.\"\"\" As usual, ![mkapi](google_style.ExampleClass) creates the API documentation for the ExampleClass class. CLASS google_style. ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes z (str) \u2014 The first attribute. Raises ValueError \u2014 If the length of x is equal to 0. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. READONLY_PROPERTY readonly_property \u2192 str Read-only property documentation. READWRITE_PROPERTY readwrite_property \u2192 list of int Read-write property documentation. In this example, note that: Docstring of __init__ function is treated as a class-level docstring. Type annotation using typing package ( List and Tuple in this case) is converted into readable style. Bound methods ( message in this case) have a METHOD prefix instead of a FUNCTION prefix. If callable objects have neither Returns nor Yields, the type appears on the object definition line like type annotation. For properties, the type can be written at the beginning of the docstring or as type annotation. Whether a property is read-only or read-write is inspected. Method You can select a method of class (or any other attribute that can have docstring) to generate API. ![mkapi](google_style.ExampleClass.message) creates the API documentation for the message() of ExampleClass class. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. Data Class The google_style module also defines a simple data class ExampleDataClass . Code 4 google_style.ExampleDataClass @dataclass class ExampleDataClass: \"\"\"A dataclass. Args: x: The first parameter. Attributes: x: The first attribute. y: The second attribute. \"\"\" x: int = 0 y: int = field(default=1, init=False) Then, ![mkapi](google_style.ExampleDataClass) creates the API documentation for the ExampleDataClass class. DATACLASS google_style. ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute. In this example, note that: A DATACLASS prefix instead of a CLASS prefix. Attributes type inspection as well as parameters if they are data class fields.","title":"Google Style"},{"location":"examples/google_style/#google-style","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; } --> Let's start realistic examples. Here, a sample Python file google_style.py is stored under the examples directory relative to the mkdocs.yml directory, so you should configure mkdocs.yml like below. In addition, we add two extensions and an extra javascript for demonstration. plugins: - search - mkapi: src_dirs: [examples] markdown_extensions: - admonition - pymdownx.arithmatex extra_javascript: # for pymdownx.arithmatex - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML","title":"Google Style"},{"location":"examples/google_style/#function","text":"The google_style module defines a simple function add() . Code 1 google_style.add() def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Args: x: The first parameter. y: The second parameter. Default={default}. Returns: Added value. Examples: Examples should be written in doctest format >>> add(1, 2) 3 !!! note You can use the [admonition extension of MkDocs](https://squidfunk.github.io/mkdocs-material/extensions/admonition/). Note: But you should use `Note` section instead for consistency. \"\"\" return x + y Then, you can write an entry to generate API for the function anywhere in your Markdown source: ![mkapi](google_style.add) MkApi generates the API documentation for the add() function. FUNCTION google_style. add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note You can use the admonition extension of MkDocs . Note But you should use Note section instead for consistency. Note In the above example, green dashed border lines are just guide for the eye to show the region of the documentation generated by MkApi for convenience. In this simple example, you can see some features of MkApi. Type inspection of add (FUNCTION prefix is added before google_style.add ). Use of type annotation for both Parameters and Returns sections. Add optional if parameters have default values. Default value replacement by the {default} keyword in the Parameters section. External hyperlink. Use of MkDocs extensions: MathJax rendering and admonition.","title":"Function"},{"location":"examples/google_style/#generator","text":"The google_style module also defines a simple generator gen() . Code 2 google_style.gen() def gen(n) -> Iterator[str]: \"\"\"Yields a numbered string. Args: n (int): The length of iteration. Yields: A numbered string. \"\"\" for x in range(n): yield f\"a{x}\" Then, ![mkapi](google_style.gen) creates the API documentation for the gen() generator. GENERATOR google_style. gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. In this simple example, note that: A GENERATOR prefix instead of a FUNCTION prefix. The parameter n has no type annotation but you can specify it in the Parameters section directly. Yields type is not iterator of str but str , because gen() is a generator.","title":"Generator"},{"location":"examples/google_style/#class","text":"The google_style module also defines a simple class ExampleClass . Code 3 google_style.ExampleClass class ExampleClass: def __init__(self, x: List[int], y: Tuple[str, int]): \"\"\"A normal class. Args: x: The first parameter. y: The second parameter. Attributes: z (str): The first attribute. Raises: ValueError: If the length of `x` is equal to 0. \"\"\" if len(x) == 0: raise ValueError() self.z = \"abc\" def message(self, n: int) -> List[str]: \"\"\"Returns a message list. Args: n: Repeatation. \"\"\" return [self.z] * n @property def readonly_property(self): \"\"\"str: Read-only property documentation.\"\"\" return \"readonly_property\" @property def readwrite_property(self) -> List[int]: \"\"\"Read-write property documentation.\"\"\" return [1, 2, 3] @readwrite_property.setter def readwrite_property(self, value): \"\"\"Docstring in setter is ignored.\"\"\" As usual, ![mkapi](google_style.ExampleClass) creates the API documentation for the ExampleClass class. CLASS google_style. ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes z (str) \u2014 The first attribute. Raises ValueError \u2014 If the length of x is equal to 0. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. READONLY_PROPERTY readonly_property \u2192 str Read-only property documentation. READWRITE_PROPERTY readwrite_property \u2192 list of int Read-write property documentation. In this example, note that: Docstring of __init__ function is treated as a class-level docstring. Type annotation using typing package ( List and Tuple in this case) is converted into readable style. Bound methods ( message in this case) have a METHOD prefix instead of a FUNCTION prefix. If callable objects have neither Returns nor Yields, the type appears on the object definition line like type annotation. For properties, the type can be written at the beginning of the docstring or as type annotation. Whether a property is read-only or read-write is inspected.","title":"Class"},{"location":"examples/google_style/#method","text":"You can select a method of class (or any other attribute that can have docstring) to generate API. ![mkapi](google_style.ExampleClass.message) creates the API documentation for the message() of ExampleClass class. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation.","title":"Method"},{"location":"examples/google_style/#data-class","text":"The google_style module also defines a simple data class ExampleDataClass . Code 4 google_style.ExampleDataClass @dataclass class ExampleDataClass: \"\"\"A dataclass. Args: x: The first parameter. Attributes: x: The first attribute. y: The second attribute. \"\"\" x: int = 0 y: int = field(default=1, init=False) Then, ![mkapi](google_style.ExampleDataClass) creates the API documentation for the ExampleDataClass class. DATACLASS google_style. ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute. In this example, note that: A DATACLASS prefix instead of a CLASS prefix. Attributes type inspection as well as parameters if they are data class fields.","title":"Data Class"},{"location":"examples/numpy_style/","text":"NumPy Style <!-- .mkapi-node { border: 2px dashed #88AA88; } --> Let's start realistic examples. Here, a sample Python file numpy_style.py is stored under the examples directory relative to the mkdocs.yml directory, so you should configure mkdocs.yml like below. In addition, we add two extensions and an extra javascript for demonstration. plugins: - search - mkapi: src_dirs: [examples] markdown_extensions: - admonition - pymdownx.arithmatex extra_javascript: # for pymdownx.arithmatex - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML Function The numpy_style module defines a simple function add() . Code 5 numpy_style.add() def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Parameters ---------- x The first parameter. y The second parameter. Default={default}. Returns ------- int Added value. !!! note The return type must be duplicated in the docstring to comply with the NumPy docstring style. Examples -------- Examples should be written in doctest format >>> add(1, 2) 3 Note ---- MkApi doesn't check an underline that follows a section heading. Just skip one line. \"\"\" return x + y Then, you can write an entry to generate API for the function anywhere in your Markdown source: ![mkapi](numpy_style.add) MkApi generates the API documentation for the add() function. FUNCTION numpy_style. add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Note The return type must be duplicated in the docstring to comply with the NumPy docstring style. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note MkApi doesn't check an underline that follows a section heading. Just skip one line. Note In the above example, green dashed border lines are just guide for the eye to show the region of the documentation generated by MkApi for convenience. In this simple example, you can see some features of MkApi. Type inspection of add (FUNCTION prefix is added before numpy_style.add ). Use of type annotation for both Parameters and Returns sections. Add optional if parameters have default values. Default value replacement by the {default} keyword in the Parameters section. External hyperlink. Use of MkDocs extensions: MathJax rendering and admonition. Generator The numpy_style module also defines a simple generator gen() . Code 6 numpy_style.gen() def gen(n) -> Iterator[str]: \"\"\"Yields a numbered string. Parameters ---------- n : int The length of iteration. Yields ------ str A numbered string. \"\"\" for x in range(n): yield f\"a{x}\" Then, ![mkapi](numpy_style.gen) creates the API documentation for the gen() generator. GENERATOR numpy_style. gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. In this simple example, note that: A GENERATOR prefix instead of a FUNCTION prefix. The parameter n has no type annotation but you can specify it in the Parameters section directly. Yields type is not iterator of str but str , because gen() is a generator. Class The numpy_style module also defines a simple class ExampleClass . Code 7 numpy_style.ExampleClass class ExampleClass: def __init__(self, x: List[int], y: Tuple[str, int]): \"\"\"A normal class. Parameters ---------- x The first parameter. y The second parameter. Attributes ---------- z : str The first attribute. Raises ------ ValueError If the length of `x` is equal to 0. \"\"\" if len(x) == 0: raise ValueError() self.z = \"abc\" def message(self, n: int) -> List[str]: \"\"\"Returns a message list. Parameters ---------- n Repeatation. \"\"\" return [self.z] * n @property def readonly_property(self): \"\"\"str: Read-only property documentation.\"\"\" return \"readonly_property\" @property def readwrite_property(self) -> List[int]: \"\"\"Read-write property documentation.\"\"\" return [1, 2, 3] @readwrite_property.setter def readwrite_property(self, value): \"\"\"Docstring in setter is ignored.\"\"\" As usual, ![mkapi](numpy_style.ExampleClass) creates the API documentation for the ExampleClass class. CLASS numpy_style. ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes z (str) \u2014 The first attribute. Raises ValueError \u2014 If the length of x is equal to 0. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. READONLY_PROPERTY readonly_property \u2192 str Read-only property documentation. READWRITE_PROPERTY readwrite_property \u2192 list of int Read-write property documentation. In this example, note that: Docstring of __init__ function is treated as a class-level docstring. Type annotation using typing package ( List and Tuple in this case) is converted into readable style. Bound methods ( message in this case) have a METHOD prefix instead of a FUNCTION prefix. If callable objects have neither Returns nor Yields, the type appears on the object definition line like type annotation. For properties, the type can be written at the beginning of the docstring or as type annotation. Whether a property is read-only or read-write is inspected. Method You can select a method of class (or any other attribute that can have docstring) to generate API. ![mkapi](numpy_style.ExampleClass.message) creates the API documentation for the message() of ExampleClass class. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. Data Class The numpy_style module also defines a simple data class ExampleDataClass . Code 8 numpy_style.ExampleDataClass @dataclass class ExampleDataClass: \"\"\"A dataclass. Parameters ---------- x The first parameter. Attributes ---------- x The first attribute. y The second attribute. \"\"\" x: int = 0 y: int = field(default=1, init=False) Then, ![mkapi](numpy_style.ExampleDataClass) creates the API documentation for the ExampleDataClass class. DATACLASS numpy_style. ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute. In this example, note that: A DATACLASS prefix instead of a CLASS prefix. Attributes type inspection as well as parameters if they are data class fields.","title":"NumPy Style"},{"location":"examples/numpy_style/#numpy-style","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; } --> Let's start realistic examples. Here, a sample Python file numpy_style.py is stored under the examples directory relative to the mkdocs.yml directory, so you should configure mkdocs.yml like below. In addition, we add two extensions and an extra javascript for demonstration. plugins: - search - mkapi: src_dirs: [examples] markdown_extensions: - admonition - pymdownx.arithmatex extra_javascript: # for pymdownx.arithmatex - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML","title":"NumPy Style"},{"location":"examples/numpy_style/#function","text":"The numpy_style module defines a simple function add() . Code 5 numpy_style.add() def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Parameters ---------- x The first parameter. y The second parameter. Default={default}. Returns ------- int Added value. !!! note The return type must be duplicated in the docstring to comply with the NumPy docstring style. Examples -------- Examples should be written in doctest format >>> add(1, 2) 3 Note ---- MkApi doesn't check an underline that follows a section heading. Just skip one line. \"\"\" return x + y Then, you can write an entry to generate API for the function anywhere in your Markdown source: ![mkapi](numpy_style.add) MkApi generates the API documentation for the add() function. FUNCTION numpy_style. add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Note The return type must be duplicated in the docstring to comply with the NumPy docstring style. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note MkApi doesn't check an underline that follows a section heading. Just skip one line. Note In the above example, green dashed border lines are just guide for the eye to show the region of the documentation generated by MkApi for convenience. In this simple example, you can see some features of MkApi. Type inspection of add (FUNCTION prefix is added before numpy_style.add ). Use of type annotation for both Parameters and Returns sections. Add optional if parameters have default values. Default value replacement by the {default} keyword in the Parameters section. External hyperlink. Use of MkDocs extensions: MathJax rendering and admonition.","title":"Function"},{"location":"examples/numpy_style/#generator","text":"The numpy_style module also defines a simple generator gen() . Code 6 numpy_style.gen() def gen(n) -> Iterator[str]: \"\"\"Yields a numbered string. Parameters ---------- n : int The length of iteration. Yields ------ str A numbered string. \"\"\" for x in range(n): yield f\"a{x}\" Then, ![mkapi](numpy_style.gen) creates the API documentation for the gen() generator. GENERATOR numpy_style. gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. In this simple example, note that: A GENERATOR prefix instead of a FUNCTION prefix. The parameter n has no type annotation but you can specify it in the Parameters section directly. Yields type is not iterator of str but str , because gen() is a generator.","title":"Generator"},{"location":"examples/numpy_style/#class","text":"The numpy_style module also defines a simple class ExampleClass . Code 7 numpy_style.ExampleClass class ExampleClass: def __init__(self, x: List[int], y: Tuple[str, int]): \"\"\"A normal class. Parameters ---------- x The first parameter. y The second parameter. Attributes ---------- z : str The first attribute. Raises ------ ValueError If the length of `x` is equal to 0. \"\"\" if len(x) == 0: raise ValueError() self.z = \"abc\" def message(self, n: int) -> List[str]: \"\"\"Returns a message list. Parameters ---------- n Repeatation. \"\"\" return [self.z] * n @property def readonly_property(self): \"\"\"str: Read-only property documentation.\"\"\" return \"readonly_property\" @property def readwrite_property(self) -> List[int]: \"\"\"Read-write property documentation.\"\"\" return [1, 2, 3] @readwrite_property.setter def readwrite_property(self, value): \"\"\"Docstring in setter is ignored.\"\"\" As usual, ![mkapi](numpy_style.ExampleClass) creates the API documentation for the ExampleClass class. CLASS numpy_style. ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes z (str) \u2014 The first attribute. Raises ValueError \u2014 If the length of x is equal to 0. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. READONLY_PROPERTY readonly_property \u2192 str Read-only property documentation. READWRITE_PROPERTY readwrite_property \u2192 list of int Read-write property documentation. In this example, note that: Docstring of __init__ function is treated as a class-level docstring. Type annotation using typing package ( List and Tuple in this case) is converted into readable style. Bound methods ( message in this case) have a METHOD prefix instead of a FUNCTION prefix. If callable objects have neither Returns nor Yields, the type appears on the object definition line like type annotation. For properties, the type can be written at the beginning of the docstring or as type annotation. Whether a property is read-only or read-write is inspected.","title":"Class"},{"location":"examples/numpy_style/#method","text":"You can select a method of class (or any other attribute that can have docstring) to generate API. ![mkapi](numpy_style.ExampleClass.message) creates the API documentation for the message() of ExampleClass class. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation.","title":"Method"},{"location":"examples/numpy_style/#data-class","text":"The numpy_style module also defines a simple data class ExampleDataClass . Code 8 numpy_style.ExampleDataClass @dataclass class ExampleDataClass: \"\"\"A dataclass. Parameters ---------- x The first parameter. Attributes ---------- x The first attribute. y The second attribute. \"\"\" x: int = 0 y: int = field(default=1, init=False) Then, ![mkapi](numpy_style.ExampleDataClass) creates the API documentation for the ExampleDataClass class. DATACLASS numpy_style. ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute. In this example, note that: A DATACLASS prefix instead of a CLASS prefix. Attributes type inspection as well as parameters if they are data class fields.","title":"Data Class"},{"location":"usage/inherit/","text":"Docstring Inheritance <!-- .mkapi-node { border: 2px dashed #88AA88; margin-left: 0px; margin-bottom: 20px; } --> Example classes Define two classes to explain Docstring inheritance . File 1 inherit.py from dataclasses import dataclass from mkapi.core.base import Type @dataclass class Base: \"\"\"Base class. Parameters: name: Object name. Attributes: name: Object name. \"\"\" name: str type: Type def set_name(self, name: str): \"\"\"Sets name. Args: name: A New name. \"\"\" self.name = name @dataclass class Item(Base): \"\"\"Item class. Parameters: markdown: Object markdown. Attributes: markdown: Object markdown. \"\"\" markdown: str def set_name(self, name: str): \"\"\"Sets name in upper case.\"\"\" self.name = name.upper() Taking a look at this example, you may notice that: In the Base , description for type is omitted. In the Item , parameters inherited by superclass are not written. In the Item.set_name() , Parameters section doesn't exit. Inheritance from Superclasses Since the docstring of superclass Base describes the name , the Item class can inherit its description with inherit filter. ![mkapi](inherit.Item|inherit) By inheritance from superclasses, you don't need to write duplicated description. Inheritance from Signature Using strict filter, MkApi adds missing parameters and attributes from the signature. Description is still empty but type is inspected. Note that strict filter invokes inherit filter at the same time. ![mkapi](inherit.Item|strict) Inheritance from signature has two benefits: You can find parameters and attributes that wait for description. Users can know their types at least if you use type annotation. Example of Strict Mode ![mkapi](inherit.Item|strict) DATACLASS inherit. Item (name, type, markdown) Item class. Parameters name (str) \u2014 Object name. type ( Type ) \u2014 markdown (str) \u2014 Object markdown. Attributes name (str) \u2014 Object name. type ( Type ) \u2014 markdown (str) \u2014 Object markdown. METHOD set_name (name) Sets name in upper case. Parameters name (str) \u2014 A New name. Inheritance in Page Mode Inheritance in page mode is straightforward. For example, nav: - index.md - API: mkapi/api/mkapi|upper|strict","title":"Docstring Inheritance"},{"location":"usage/inherit/#docstring-inheritance","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; margin-left: 0px; margin-bottom: 20px; } -->","title":"Docstring Inheritance"},{"location":"usage/inherit/#example-classes","text":"Define two classes to explain Docstring inheritance . File 1 inherit.py from dataclasses import dataclass from mkapi.core.base import Type @dataclass class Base: \"\"\"Base class. Parameters: name: Object name. Attributes: name: Object name. \"\"\" name: str type: Type def set_name(self, name: str): \"\"\"Sets name. Args: name: A New name. \"\"\" self.name = name @dataclass class Item(Base): \"\"\"Item class. Parameters: markdown: Object markdown. Attributes: markdown: Object markdown. \"\"\" markdown: str def set_name(self, name: str): \"\"\"Sets name in upper case.\"\"\" self.name = name.upper() Taking a look at this example, you may notice that: In the Base , description for type is omitted. In the Item , parameters inherited by superclass are not written. In the Item.set_name() , Parameters section doesn't exit.","title":"Example classes"},{"location":"usage/inherit/#inheritance-from-superclasses","text":"Since the docstring of superclass Base describes the name , the Item class can inherit its description with inherit filter. ![mkapi](inherit.Item|inherit) By inheritance from superclasses, you don't need to write duplicated description.","title":"Inheritance from Superclasses"},{"location":"usage/inherit/#inheritance-from-signature","text":"Using strict filter, MkApi adds missing parameters and attributes from the signature. Description is still empty but type is inspected. Note that strict filter invokes inherit filter at the same time. ![mkapi](inherit.Item|strict) Inheritance from signature has two benefits: You can find parameters and attributes that wait for description. Users can know their types at least if you use type annotation.","title":"Inheritance from Signature"},{"location":"usage/inherit/#example-of-strict-mode","text":"![mkapi](inherit.Item|strict) DATACLASS inherit. Item (name, type, markdown) Item class. Parameters name (str) \u2014 Object name. type ( Type ) \u2014 markdown (str) \u2014 Object markdown. Attributes name (str) \u2014 Object name. type ( Type ) \u2014 markdown (str) \u2014 Object markdown. METHOD set_name (name) Sets name in upper case. Parameters name (str) \u2014 A New name.","title":"Example of Strict Mode"},{"location":"usage/inherit/#inheritance-in-page-mode","text":"Inheritance in page mode is straightforward. For example, nav: - index.md - API: mkapi/api/mkapi|upper|strict","title":"Inheritance in Page Mode"},{"location":"usage/library/","text":"Using MkApi within Python MkApi is a standalone library as well as a MkDocs plugin, so that you can use it within Python. First, import MkApi: <!-- .mkapi-node { border: 2px dashed #88AA88; } --> import mkapi [1] 2020-06-09 14:50:50 ( 81.0ms ) python3 ( 170ms ) Node object Define a simple class to show how MkApi works. class A: \"\"\"Class docstring. Note: Docstring of `__init__()` is deleted, if there is a class-level docstring. \"\"\" def __init__(self): \"\"\"Init docstring.\"\"\" def to_str(self, x: int) -> str: \"\"\"Converts `int` to `str`. Args: x: Input value. \"\"\" return str(x) [2] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 174ms ) mkapi.get_node() generates a Node object that has tree structure. node = mkapi.get_node(A) type(node) [3] 2020-06-09 14:50:50 ( 5.00ms ) python3 ( 179ms ) mkapi.core.node.Node Some attributes: node.object.kind, node.object.name [4] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 183ms ) ('class', 'A') docstring = node.docstring len(docstring.sections) [5] 2020-06-09 14:50:50 ( 3.00ms ) python3 ( 186ms ) 2 section = docstring.sections[0] section.name, section.markdown [6] 2020-06-09 14:50:50 ( 3.00ms ) python3 ( 189ms ) ('', 'Class docstring.') section = docstring.sections[1] section.name, section.markdown [7] 2020-06-09 14:50:50 ( 3.00ms ) python3 ( 192ms ) ('Note', 'Docstring of `__init__()` is deleted, if there is\\na class-level docstring.') The members attribute gives children, for example, bound methods of a class. len(node.members) [8] 2020-06-09 14:50:50 ( 3.00ms ) python3 ( 195ms ) 1 child = node.members[0] type(child) [9] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 199ms ) mkapi.core.node.Node Elements of Node.members are also Node objects, so this is a tree structure. child.object.kind, child.object.name [10] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 203ms ) ('method', 'to_str') docstring = child.docstring len(docstring.sections) [11] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 207ms ) 2 section = docstring.sections[0] section.name, section.markdown [12] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 211ms ) ('', 'Converts `int` to `str`.') section = docstring.sections[1] section.name, section.markdown [13] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 215ms ) ('Parameters', '') The above Parameters section has an empty markdown , while its items represents an argument list: item = section.items[0] print(f\"name={item.name!r}\") print(f\"markdown={item.markdown!r}, html={item.html!r}\") print(item.type) [14] 2020-06-09 14:50:50 ( 5.00ms ) python3 ( 220ms ) name='x' markdown='Input value.', html='' Type(name='int', markdown='int', html='') You can see that the type of the argument x is inspected. Note that the markdown attribute has been set from the docstring, while the html attribute hasn't had any value yet. Node.get_markdown() creates a joint Markdown of this node. markdown = node.get_markdown() print(markdown) [15] 2020-06-09 14:50:50 ( 3.00ms ) python3 ( 223ms ) A <!-- mkapi:sep --> Class docstring. <!-- mkapi:sep --> Docstring of `__init__()` is deleted, if there is a class-level docstring. <!-- mkapi:sep --> __main__.A.to_str <!-- mkapi:sep --> Converts `int` to `str`. <!-- mkapi:sep --> Input value. Where is Note or Parameters section heading, etc. ? No problem. The Node.get_markdown() divides docstrings into two parts. One is a plain Markdown that will be converted into HTML by any Markdown converter, for example, MkDocs. The other is the outline structure of docstrings such as sections or arguments that will be processed by MkApi itself. Converting Markdown For simplicity, we use Python-Markdown library instead of MkDocs. from markdown import Markdown converter = Markdown() html = converter.convert(markdown) print(html) [16] 2020-06-09 14:50:50 ( 5.00ms ) python3 ( 228ms ) <p><a href=\"!A\">A</a></p> <!-- mkapi:sep --> <p>Class docstring.</p> <!-- mkapi:sep --> <p>Docstring of <code>__init__()</code> is deleted, if there is a class-level docstring.</p> <!-- mkapi:sep --> <p><a href=\"!__main__.A\"><strong>main</strong>.A</a>.<a href=\"!__main__.A.to_str\">to_str</a></p> <!-- mkapi:sep --> <p>Converts <code>int</code> to <code>str</code>.</p> <!-- mkapi:sep --> <p>Input value.</p> Distributing HTML Node.set_html() distributes HTML into docstring and members. node.set_html(html) [17] 2020-06-09 14:50:50 ( 2.00ms ) python3 ( 230ms ) Take a look at what happened. section = node.docstring.sections[0] section.markdown, section.html [18] 2020-06-09 14:50:50 ( 3.00ms ) python3 ( 233ms ) ('Class docstring.', '<p>Class docstring.</p>') section = node.docstring.sections[1] section.markdown, section.html [19] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 237ms ) ('Docstring of `__init__()` is deleted, if there is\\na class-level docstring.', '<p>Docstring of <code>__init__()</code> is deleted, if there is\\na class-level docstring.</p>') child = node.members[0] section = child.docstring.sections[0] section.markdown, section.html [20] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 241ms ) ('Converts `int` to `str`.', '<p>Converts <code>int</code> to <code>str</code>.</p>') section = child.docstring.sections[1] item = section.items[0] item.markdown, item.html # A <p> tag is deleted. [21] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 245ms ) ('Input value.', 'Input value.') Constructing HTML Finally, construct HTML calling Node.render() that internally uses Jinja library. html = node.render() print(html[:300].strip()) [22] 2020-06-09 14:50:50 ( 27.0ms ) python3 ( 272ms ) <div class=\"mkapi-node\" id=\"A\"> <div class=\"mkapi-object mkapi-object-class\"> <div class=\"mkapi-object-kind mkapi-object-kind-class\">CLASS</div> <div class=\"mkapi-object-body\"><code class=\"mkapi-object-name\">A</code> <code class=\"mkapi-object-signature\">()</code> </div> </div> <div class= Jupyter allows us to see the rendered HTML. from IPython.display import HTML HTML(html) [23] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 276ms ) CLASS A () Class docstring. Note Docstring of __init__() is deleted, if there is a class-level docstring. METHOD to_str (x) \u2192 str Converts int to str . Parameters x (int) \u2014 Input value. Summary All you need to get API documentation of an object is described by the following function. def get_html(obj) -> str: # Construct a node tree structure. node = mkapi.get_node(obj) # Create a joint Markdown from components of the node. markdown = node.get_markdown() # Convert it into HTML by any external converter. html = converter.convert(markdown) # Split and distribute the HTML into original components. node.set_html(html) # Render the node to create final HTML. return node.render() [24] 2020-06-09 14:50:50 ( 3.00ms ) python3 ( 279ms )","title":"Using MkApi within Python"},{"location":"usage/library/#using-mkapi-within-python","text":"MkApi is a standalone library as well as a MkDocs plugin, so that you can use it within Python. First, import MkApi: <!-- .mkapi-node { border: 2px dashed #88AA88; } --> import mkapi [1] 2020-06-09 14:50:50 ( 81.0ms ) python3 ( 170ms )","title":"Using MkApi within Python"},{"location":"usage/library/#node-object","text":"Define a simple class to show how MkApi works. class A: \"\"\"Class docstring. Note: Docstring of `__init__()` is deleted, if there is a class-level docstring. \"\"\" def __init__(self): \"\"\"Init docstring.\"\"\" def to_str(self, x: int) -> str: \"\"\"Converts `int` to `str`. Args: x: Input value. \"\"\" return str(x) [2] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 174ms ) mkapi.get_node() generates a Node object that has tree structure. node = mkapi.get_node(A) type(node) [3] 2020-06-09 14:50:50 ( 5.00ms ) python3 ( 179ms ) mkapi.core.node.Node Some attributes: node.object.kind, node.object.name [4] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 183ms ) ('class', 'A') docstring = node.docstring len(docstring.sections) [5] 2020-06-09 14:50:50 ( 3.00ms ) python3 ( 186ms ) 2 section = docstring.sections[0] section.name, section.markdown [6] 2020-06-09 14:50:50 ( 3.00ms ) python3 ( 189ms ) ('', 'Class docstring.') section = docstring.sections[1] section.name, section.markdown [7] 2020-06-09 14:50:50 ( 3.00ms ) python3 ( 192ms ) ('Note', 'Docstring of `__init__()` is deleted, if there is\\na class-level docstring.') The members attribute gives children, for example, bound methods of a class. len(node.members) [8] 2020-06-09 14:50:50 ( 3.00ms ) python3 ( 195ms ) 1 child = node.members[0] type(child) [9] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 199ms ) mkapi.core.node.Node Elements of Node.members are also Node objects, so this is a tree structure. child.object.kind, child.object.name [10] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 203ms ) ('method', 'to_str') docstring = child.docstring len(docstring.sections) [11] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 207ms ) 2 section = docstring.sections[0] section.name, section.markdown [12] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 211ms ) ('', 'Converts `int` to `str`.') section = docstring.sections[1] section.name, section.markdown [13] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 215ms ) ('Parameters', '') The above Parameters section has an empty markdown , while its items represents an argument list: item = section.items[0] print(f\"name={item.name!r}\") print(f\"markdown={item.markdown!r}, html={item.html!r}\") print(item.type) [14] 2020-06-09 14:50:50 ( 5.00ms ) python3 ( 220ms ) name='x' markdown='Input value.', html='' Type(name='int', markdown='int', html='') You can see that the type of the argument x is inspected. Note that the markdown attribute has been set from the docstring, while the html attribute hasn't had any value yet. Node.get_markdown() creates a joint Markdown of this node. markdown = node.get_markdown() print(markdown) [15] 2020-06-09 14:50:50 ( 3.00ms ) python3 ( 223ms ) A <!-- mkapi:sep --> Class docstring. <!-- mkapi:sep --> Docstring of `__init__()` is deleted, if there is a class-level docstring. <!-- mkapi:sep --> __main__.A.to_str <!-- mkapi:sep --> Converts `int` to `str`. <!-- mkapi:sep --> Input value. Where is Note or Parameters section heading, etc. ? No problem. The Node.get_markdown() divides docstrings into two parts. One is a plain Markdown that will be converted into HTML by any Markdown converter, for example, MkDocs. The other is the outline structure of docstrings such as sections or arguments that will be processed by MkApi itself.","title":"Node object"},{"location":"usage/library/#converting-markdown","text":"For simplicity, we use Python-Markdown library instead of MkDocs. from markdown import Markdown converter = Markdown() html = converter.convert(markdown) print(html) [16] 2020-06-09 14:50:50 ( 5.00ms ) python3 ( 228ms ) <p><a href=\"!A\">A</a></p> <!-- mkapi:sep --> <p>Class docstring.</p> <!-- mkapi:sep --> <p>Docstring of <code>__init__()</code> is deleted, if there is a class-level docstring.</p> <!-- mkapi:sep --> <p><a href=\"!__main__.A\"><strong>main</strong>.A</a>.<a href=\"!__main__.A.to_str\">to_str</a></p> <!-- mkapi:sep --> <p>Converts <code>int</code> to <code>str</code>.</p> <!-- mkapi:sep --> <p>Input value.</p>","title":"Converting Markdown"},{"location":"usage/library/#distributing-html","text":"Node.set_html() distributes HTML into docstring and members. node.set_html(html) [17] 2020-06-09 14:50:50 ( 2.00ms ) python3 ( 230ms ) Take a look at what happened. section = node.docstring.sections[0] section.markdown, section.html [18] 2020-06-09 14:50:50 ( 3.00ms ) python3 ( 233ms ) ('Class docstring.', '<p>Class docstring.</p>') section = node.docstring.sections[1] section.markdown, section.html [19] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 237ms ) ('Docstring of `__init__()` is deleted, if there is\\na class-level docstring.', '<p>Docstring of <code>__init__()</code> is deleted, if there is\\na class-level docstring.</p>') child = node.members[0] section = child.docstring.sections[0] section.markdown, section.html [20] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 241ms ) ('Converts `int` to `str`.', '<p>Converts <code>int</code> to <code>str</code>.</p>') section = child.docstring.sections[1] item = section.items[0] item.markdown, item.html # A <p> tag is deleted. [21] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 245ms ) ('Input value.', 'Input value.')","title":"Distributing HTML"},{"location":"usage/library/#constructing-html","text":"Finally, construct HTML calling Node.render() that internally uses Jinja library. html = node.render() print(html[:300].strip()) [22] 2020-06-09 14:50:50 ( 27.0ms ) python3 ( 272ms ) <div class=\"mkapi-node\" id=\"A\"> <div class=\"mkapi-object mkapi-object-class\"> <div class=\"mkapi-object-kind mkapi-object-kind-class\">CLASS</div> <div class=\"mkapi-object-body\"><code class=\"mkapi-object-name\">A</code> <code class=\"mkapi-object-signature\">()</code> </div> </div> <div class= Jupyter allows us to see the rendered HTML. from IPython.display import HTML HTML(html) [23] 2020-06-09 14:50:50 ( 4.00ms ) python3 ( 276ms ) CLASS A () Class docstring. Note Docstring of __init__() is deleted, if there is a class-level docstring. METHOD to_str (x) \u2192 str Converts int to str . Parameters x (int) \u2014 Input value.","title":"Constructing HTML"},{"location":"usage/library/#summary","text":"All you need to get API documentation of an object is described by the following function. def get_html(obj) -> str: # Construct a node tree structure. node = mkapi.get_node(obj) # Create a joint Markdown from components of the node. markdown = node.get_markdown() # Convert it into HTML by any external converter. html = converter.convert(markdown) # Split and distribute the HTML into original components. node.set_html(html) # Render the node to create final HTML. return node.render() [24] 2020-06-09 14:50:50 ( 3.00ms ) python3 ( 279ms )","title":"Summary"},{"location":"usage/module/","text":"Module and Package <!-- .mkapi-node { border: 2px dashed #88AA88; } --> MkApi can create module and package documentation as well as function and class. Embeding Documentation Specify a package or module by its full path name. ![mkapi](mkapi.core) PACKAGE mkapi. core Package level documentation is written in __init__.py . ![mkapi](mkapi.core.base) MODULE mkapi.core . base This module provides entity classes to represent docstring structure. Unlike function or class, API for its members is not created, so that you can select members to show. Or you can use Page mode that allows us to get entire project API. Heading Documentation The other method to create module API is heading. For example ### ![mkapi](mkapi.core.base) MODULE mkapi.core . base This module provides entity classes to represent docstring structure. If you prefer upper case heading, use the upper filter . ### ![mkapi](mkapi.core.base|upper) MODULE MKAPI.CORE . BASE This module provides entity classes to represent docstring structure.","title":"Module and Package"},{"location":"usage/module/#module-and-package","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; } --> MkApi can create module and package documentation as well as function and class.","title":"Module and Package"},{"location":"usage/module/#embeding-documentation","text":"Specify a package or module by its full path name. ![mkapi](mkapi.core) PACKAGE mkapi. core Package level documentation is written in __init__.py . ![mkapi](mkapi.core.base) MODULE mkapi.core . base This module provides entity classes to represent docstring structure. Unlike function or class, API for its members is not created, so that you can select members to show. Or you can use Page mode that allows us to get entire project API.","title":"Embeding Documentation"},{"location":"usage/module/#heading-documentation","text":"The other method to create module API is heading. For example ### ![mkapi](mkapi.core.base)","title":"Heading Documentation"},{"location":"usage/module/#mkapicorebase","text":"This module provides entity classes to represent docstring structure. If you prefer upper case heading, use the upper filter . ### ![mkapi](mkapi.core.base|upper)","title":"mkapi.core.base"},{"location":"usage/module/#mkapicorebase_1","text":"This module provides entity classes to represent docstring structure.","title":"mkapi.core.base"},{"location":"usage/page/","text":"Page Mode and Internal Links <!-- .mkapi-node { border: 2px dashed #88AA88; } --> Page Mode Page mode is a powerful feature that constructs a comprehensive API documentation for your project. To use the page mode, just write one line in mkdocs.yml : nav: - index.md - API: mkapi/api/mkapi MkApi scans the nav to find an entry that starts with 'mkapi/' . This entry must include two or more slashes ( '/' ). Second part ( 'api' ) splitted by slash is a directory name. MkApi automatically creates this directory in the docs directory at the beginning of the process and deletes it and its contents after the process. The rest ( 'mkapi' ) is a root package name, which is assumed to exist in the mkdocs.yml directory. However, if a root package is in src directory, for example, you can specify it like this: - API: mkapi/api/src/mkapi MkApi searches all packages and modules and create a Markdown source for one package or module, which is saved in the api directory. The rest work is done by MkDocs. You can see the API documentation of MkApi in the navigation menu. Note If a package or module has no package- or module-level docstring, MkApi doesn't process it. For upper case heading, use the upper filter like this: - API: mkapi/api/mkapi|upper . See Heading Documentation . Internal Links Link from Markdown Once a project API documentation is generated, you can use hyperlink to it using normal Markdown syntax. Go to [Section](mkapi.core.base.Section). The above line create a link to mkapi.core.base.Section object: Go to Section . Link from Docstring You can use this feature even in your docstring. For example, assume that func() is defined in a link.fullname module: File 2 link/fullname.py def func(): \"\"\"Internal link example. See Also: [a method](mkapi.core.base.Item.set_html) \"\"\" The link.fullname.func() is rendered as: FUNCTION link.fullname. func () Internal link example. See Also a method You can click the above \"a method\" to visit its API. Furthermore, if your module imports an object, you can refer it by its qualified name only. File 3 link/qualname.py from mkapi.core.base import Section from mkapi.core.docstring import get_docstring def func(): \"\"\"Internal link example. * [Section]() --- Imported object. * [](get_docstring) --- Imported object. * [Section.set_html]() --- Member of imported object. * [Section definition](Section) --- Alternative text. \"\"\" return Section(), get_docstring(None) The link.qualname.func() is rendered as: FUNCTION link.qualname. func () Internal link example. Section --- Imported object. get_docstring --- Imported object. Section.set_html --- Member of imported object. Section definition --- Alternative text. Link from Embedding Mode API documentation created by the embedding mode has link to its project documentation. ![mkapi](mkapi.core.docstring.section_heading) creates API of the section_heading() : FUNCTION mkapi.core.docstring . section_heading (line) \u2192 (str, str) Returns a tuple of (section name, style name). Parameters line (str) \u2014 Docstring line. Examples >>> section_heading(\"Args:\") ('Args', 'google') >>> section_heading(\"Raises\") ('Raises', 'numpy') >>> section_heading(\"other\") ('', '') Then, you can click the prefix ( mkapi.core.docstring ) or the function name ( section_heading ) to go to the project documentation. Link from Type The Docstring class of MkApi has an attribute sections that is a list of Section class instance like below: # Mimic code of Docstring class. from dataclasses import dataclass from typing import List from mkapi.core.base import Section @dataclass class Docstring: \"\"\"Docstring ....\"\"\" sections: List[Section] = field(default_factory=list) type: str = \"\" Corresponding real API documentation is like below: DATACLASS mkapi.core.base . Docstring (sections=<factory>, type=<factory>) Docstring class represents a docstring of an object. Parameters sections (list of Section , optional) \u2014 List of Section instance. type ( Type , optional) \u2014 Type for Returns and Yields sections. Attributes sections (list of Section ) \u2014 List of Section instance. type ( Type ) \u2014 Type for missing Returns and Yields sections. Examples Empty docstring: >>> docstring = Docstring() >>> assert not docstring Docstring with 3 sections: >>> default = Section(\"\", markdown=\"Default\") >>> parameters = Section(\"Parameters\", items=[Item(\"a\"), Item(\"b\")]) >>> returns = Section(\"Returns\", markdown=\"Results\") >>> docstring = Docstring([default, parameters, returns]) Docstring is iterable: >>> [base.name for base in docstring] ['', 'a', 'b', 'Returns'] Indexing: >>> docstring[\"Parameters\"].items[0].name 'a' Note that Section and Type are bold, which indicates that it is a link. Let's click. This link system using type annotation is useful to navigate users throughout the project documentation.","title":"Page Mode and Internal Links"},{"location":"usage/page/#page-mode-and-internal-links","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; } -->","title":"Page Mode and Internal Links"},{"location":"usage/page/#page-mode","text":"Page mode is a powerful feature that constructs a comprehensive API documentation for your project. To use the page mode, just write one line in mkdocs.yml : nav: - index.md - API: mkapi/api/mkapi MkApi scans the nav to find an entry that starts with 'mkapi/' . This entry must include two or more slashes ( '/' ). Second part ( 'api' ) splitted by slash is a directory name. MkApi automatically creates this directory in the docs directory at the beginning of the process and deletes it and its contents after the process. The rest ( 'mkapi' ) is a root package name, which is assumed to exist in the mkdocs.yml directory. However, if a root package is in src directory, for example, you can specify it like this: - API: mkapi/api/src/mkapi MkApi searches all packages and modules and create a Markdown source for one package or module, which is saved in the api directory. The rest work is done by MkDocs. You can see the API documentation of MkApi in the navigation menu. Note If a package or module has no package- or module-level docstring, MkApi doesn't process it. For upper case heading, use the upper filter like this: - API: mkapi/api/mkapi|upper . See Heading Documentation .","title":"Page Mode"},{"location":"usage/page/#internal-links","text":"","title":"Internal Links"},{"location":"usage/page/#link-from-markdown","text":"Once a project API documentation is generated, you can use hyperlink to it using normal Markdown syntax. Go to [Section](mkapi.core.base.Section). The above line create a link to mkapi.core.base.Section object: Go to Section .","title":"Link from Markdown"},{"location":"usage/page/#link-from-docstring","text":"You can use this feature even in your docstring. For example, assume that func() is defined in a link.fullname module: File 2 link/fullname.py def func(): \"\"\"Internal link example. See Also: [a method](mkapi.core.base.Item.set_html) \"\"\" The link.fullname.func() is rendered as: FUNCTION link.fullname. func () Internal link example. See Also a method You can click the above \"a method\" to visit its API. Furthermore, if your module imports an object, you can refer it by its qualified name only. File 3 link/qualname.py from mkapi.core.base import Section from mkapi.core.docstring import get_docstring def func(): \"\"\"Internal link example. * [Section]() --- Imported object. * [](get_docstring) --- Imported object. * [Section.set_html]() --- Member of imported object. * [Section definition](Section) --- Alternative text. \"\"\" return Section(), get_docstring(None) The link.qualname.func() is rendered as: FUNCTION link.qualname. func () Internal link example. Section --- Imported object. get_docstring --- Imported object. Section.set_html --- Member of imported object. Section definition --- Alternative text.","title":"Link from Docstring"},{"location":"usage/page/#link-from-embedding-mode","text":"API documentation created by the embedding mode has link to its project documentation. ![mkapi](mkapi.core.docstring.section_heading) creates API of the section_heading() : FUNCTION mkapi.core.docstring . section_heading (line) \u2192 (str, str) Returns a tuple of (section name, style name). Parameters line (str) \u2014 Docstring line. Examples >>> section_heading(\"Args:\") ('Args', 'google') >>> section_heading(\"Raises\") ('Raises', 'numpy') >>> section_heading(\"other\") ('', '') Then, you can click the prefix ( mkapi.core.docstring ) or the function name ( section_heading ) to go to the project documentation.","title":"Link from Embedding Mode"},{"location":"usage/page/#link-from-type","text":"The Docstring class of MkApi has an attribute sections that is a list of Section class instance like below: # Mimic code of Docstring class. from dataclasses import dataclass from typing import List from mkapi.core.base import Section @dataclass class Docstring: \"\"\"Docstring ....\"\"\" sections: List[Section] = field(default_factory=list) type: str = \"\" Corresponding real API documentation is like below: DATACLASS mkapi.core.base . Docstring (sections=<factory>, type=<factory>) Docstring class represents a docstring of an object. Parameters sections (list of Section , optional) \u2014 List of Section instance. type ( Type , optional) \u2014 Type for Returns and Yields sections. Attributes sections (list of Section ) \u2014 List of Section instance. type ( Type ) \u2014 Type for missing Returns and Yields sections. Examples Empty docstring: >>> docstring = Docstring() >>> assert not docstring Docstring with 3 sections: >>> default = Section(\"\", markdown=\"Default\") >>> parameters = Section(\"Parameters\", items=[Item(\"a\"), Item(\"b\")]) >>> returns = Section(\"Returns\", markdown=\"Results\") >>> docstring = Docstring([default, parameters, returns]) Docstring is iterable: >>> [base.name for base in docstring] ['', 'a', 'b', 'Returns'] Indexing: >>> docstring[\"Parameters\"].items[0].name 'a' Note that Section and Type are bold, which indicates that it is a link. Let's click. This link system using type annotation is useful to navigate users throughout the project documentation.","title":"Link from Type"},{"location":"usage/type/","text":"Type Annotation Examples <!-- .mkapi-node { border: 2px dashed #88AA88; } --> import mkapi [1] 2020-06-09 14:50:50 ( 3.00ms ) python3 ( 285ms ) Builtin Types def builtin(i: int, f: float, s: str, l: list, d: dict, t: tuple, e: set) -> bool: \"\"\"Function with buitin type annotation. Args: i: Integer. f: Float. s: String. l: List. d: Dictionary. t: Tuple. e: Set. \"\"\" return True mkapi.display(builtin) [2] 2020-06-09 14:50:50 ( 7.00ms ) python3 ( 292ms ) FUNCTION builtin (i, f, s, l, d, t, e) \u2192 bool Function with buitin type annotation. Parameters i (int) \u2014 Integer. f (float) \u2014 Float. s (str) \u2014 String. l (list) \u2014 List. d (dict) \u2014 Dictionary. t (tuple) \u2014 Tuple. e (set) \u2014 Set. Builtin Types with Default def builtin_default(i: int = 1, f: float = 1.0, s: str = \"abc\", t: tuple = (1, 2)): \"\"\"Function with buitin type annotation and default. Args: i: Integer. Default={default}. f: Float. Default={default}. s: String. Default={default}. t: Tuple. Default={default}. \"\"\" mkapi.display(builtin_default) [3] 2020-06-09 14:50:50 ( 8.00ms ) python3 ( 300ms ) FUNCTION builtin_default (i=1, f=1.0, s='abc', t=(1, 2)) Function with buitin type annotation and default. Parameters i (int, optional) \u2014 Integer. Default=1. f (float, optional) \u2014 Float. Default=1.0. s (str, optional) \u2014 String. Default='abc'. t (tuple, optional) \u2014 Tuple. Default=(1, 2). Basic Collection Types from typing import Dict, List, Set, Tuple def basic(l: List[int], t: Tuple[str, int, float], d: Dict[str, int], s: Set[int]): \"\"\"Function with basic collection type annotation. Args: l: List of integer. t: Tuple of (string, string). d: Dictionary from string to integer. s: Set of integer. \"\"\" mkapi.display(basic) [4] 2020-06-09 14:50:50 ( 9.00ms ) python3 ( 309ms ) FUNCTION basic (l, t, d, s) Function with basic collection type annotation. Parameters l (list of int) \u2014 List of integer. t (str, int, float) \u2014 Tuple of (string, string). d (dict(str: int)) \u2014 Dictionary from string to integer. s (set of int) \u2014 Set of integer. Iterator and Iterable from typing import Iterator, Iterable def function(x: Iterable[str]) -> Iterator[str]: \"\"\"Function that returns an iterator. Args: x: Iterable of string \"\"\" return iter(x) mkapi.display(function) [5] 2020-06-09 14:50:50 ( 9.00ms ) python3 ( 318ms ) FUNCTION function (x) \u2192 iterator of str Function that returns an iterator. Parameters x (iterable of str) \u2014 Iterable of string def generator(x: Iterable[str]) -> Iterator[str]: \"\"\"Generator that yields string.\"\"\" yield from x mkapi.display(generator) [6] 2020-06-09 14:50:50 ( 8.00ms ) python3 ( 326ms ) GENERATOR generator (x) \u2192 str Generator that yields string. Union and Optional from typing import Optional, Union def optional(x: Optional[List[int]]): \"\"\"Function with optional list. Args: x: List of integer or None. \"\"\" mkapi.display(optional) [7] 2020-06-09 14:50:50 ( 7.00ms ) python3 ( 333ms ) FUNCTION optional (x) Function with optional list. Parameters x (list of int, optional) \u2014 List of integer or None. def optional_default(x: Optional[List[int]] = None): \"\"\"Function with optional list and default. Args: x: List of integer or None \"\"\" mkapi.display(optional_default) [8] 2020-06-09 14:50:50 ( 7.00ms ) python3 ( 340ms ) FUNCTION optional_default (x=None) Function with optional list and default. Parameters x (list of int, optional) \u2014 List of integer or None def union(x: Union[int, float], y: Union[int, str, dict]): \"\"\"Function with union of builtin. Args: x: Integer or float. y: Integer, string, or dictionary. \"\"\" mkapi.display(union) [9] 2020-06-09 14:50:50 ( 7.00ms ) python3 ( 347ms ) FUNCTION union (x, y) Function with union of builtin. Parameters x (int or float) \u2014 Integer or float. y (int, str, or dict) \u2014 Integer, string, or dictionary. def union_collection(x: Union[List[int], Tuple[str, str]]): \"\"\"Function with union of collection. Args: x: List of integer or tuple of (string, string). \"\"\" mkapi.display(union_collection) [10] 2020-06-09 14:50:50 ( 7.00ms ) python3 ( 354ms ) FUNCTION union_collection (x) Function with union of collection. Parameters x (Union(list of int, (str, str))) \u2014 List of integer or tuple of (string, string).","title":"Type Annotation Examples"},{"location":"usage/type/#type-annotation-examples","text":"<!-- .mkapi-node { border: 2px dashed #88AA88; } --> import mkapi [1] 2020-06-09 14:50:50 ( 3.00ms ) python3 ( 285ms )","title":"Type Annotation Examples"},{"location":"usage/type/#builtin-types","text":"def builtin(i: int, f: float, s: str, l: list, d: dict, t: tuple, e: set) -> bool: \"\"\"Function with buitin type annotation. Args: i: Integer. f: Float. s: String. l: List. d: Dictionary. t: Tuple. e: Set. \"\"\" return True mkapi.display(builtin) [2] 2020-06-09 14:50:50 ( 7.00ms ) python3 ( 292ms ) FUNCTION builtin (i, f, s, l, d, t, e) \u2192 bool Function with buitin type annotation. Parameters i (int) \u2014 Integer. f (float) \u2014 Float. s (str) \u2014 String. l (list) \u2014 List. d (dict) \u2014 Dictionary. t (tuple) \u2014 Tuple. e (set) \u2014 Set.","title":"Builtin Types"},{"location":"usage/type/#builtin-types-with-default","text":"def builtin_default(i: int = 1, f: float = 1.0, s: str = \"abc\", t: tuple = (1, 2)): \"\"\"Function with buitin type annotation and default. Args: i: Integer. Default={default}. f: Float. Default={default}. s: String. Default={default}. t: Tuple. Default={default}. \"\"\" mkapi.display(builtin_default) [3] 2020-06-09 14:50:50 ( 8.00ms ) python3 ( 300ms ) FUNCTION builtin_default (i=1, f=1.0, s='abc', t=(1, 2)) Function with buitin type annotation and default. Parameters i (int, optional) \u2014 Integer. Default=1. f (float, optional) \u2014 Float. Default=1.0. s (str, optional) \u2014 String. Default='abc'. t (tuple, optional) \u2014 Tuple. Default=(1, 2).","title":"Builtin Types with Default"},{"location":"usage/type/#basic-collection-types","text":"from typing import Dict, List, Set, Tuple def basic(l: List[int], t: Tuple[str, int, float], d: Dict[str, int], s: Set[int]): \"\"\"Function with basic collection type annotation. Args: l: List of integer. t: Tuple of (string, string). d: Dictionary from string to integer. s: Set of integer. \"\"\" mkapi.display(basic) [4] 2020-06-09 14:50:50 ( 9.00ms ) python3 ( 309ms ) FUNCTION basic (l, t, d, s) Function with basic collection type annotation. Parameters l (list of int) \u2014 List of integer. t (str, int, float) \u2014 Tuple of (string, string). d (dict(str: int)) \u2014 Dictionary from string to integer. s (set of int) \u2014 Set of integer.","title":"Basic Collection Types"},{"location":"usage/type/#iterator-and-iterable","text":"from typing import Iterator, Iterable def function(x: Iterable[str]) -> Iterator[str]: \"\"\"Function that returns an iterator. Args: x: Iterable of string \"\"\" return iter(x) mkapi.display(function) [5] 2020-06-09 14:50:50 ( 9.00ms ) python3 ( 318ms ) FUNCTION function (x) \u2192 iterator of str Function that returns an iterator. Parameters x (iterable of str) \u2014 Iterable of string def generator(x: Iterable[str]) -> Iterator[str]: \"\"\"Generator that yields string.\"\"\" yield from x mkapi.display(generator) [6] 2020-06-09 14:50:50 ( 8.00ms ) python3 ( 326ms ) GENERATOR generator (x) \u2192 str Generator that yields string.","title":"Iterator and Iterable"},{"location":"usage/type/#union-and-optional","text":"from typing import Optional, Union def optional(x: Optional[List[int]]): \"\"\"Function with optional list. Args: x: List of integer or None. \"\"\" mkapi.display(optional) [7] 2020-06-09 14:50:50 ( 7.00ms ) python3 ( 333ms ) FUNCTION optional (x) Function with optional list. Parameters x (list of int, optional) \u2014 List of integer or None. def optional_default(x: Optional[List[int]] = None): \"\"\"Function with optional list and default. Args: x: List of integer or None \"\"\" mkapi.display(optional_default) [8] 2020-06-09 14:50:50 ( 7.00ms ) python3 ( 340ms ) FUNCTION optional_default (x=None) Function with optional list and default. Parameters x (list of int, optional) \u2014 List of integer or None def union(x: Union[int, float], y: Union[int, str, dict]): \"\"\"Function with union of builtin. Args: x: Integer or float. y: Integer, string, or dictionary. \"\"\" mkapi.display(union) [9] 2020-06-09 14:50:50 ( 7.00ms ) python3 ( 347ms ) FUNCTION union (x, y) Function with union of builtin. Parameters x (int or float) \u2014 Integer or float. y (int, str, or dict) \u2014 Integer, string, or dictionary. def union_collection(x: Union[List[int], Tuple[str, str]]): \"\"\"Function with union of collection. Args: x: List of integer or tuple of (string, string). \"\"\" mkapi.display(union_collection) [10] 2020-06-09 14:50:50 ( 7.00ms ) python3 ( 354ms ) FUNCTION union_collection (x) Function with union of collection. Parameters x (Union(list of int, (str, str))) \u2014 List of integer or tuple of (string, string).","title":"Union and Optional"}]}