{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MkApi Documentation MkApi plugin for MkDocs generates API documentation for Python code. MkApi (partially) supports two styles of docstrings: Google and NumPy . Napoleon package provides complete examples: Example Google Style Python Docstrings Example NumPy Style Python Docstrings Features of MkApi are: Section syntax. Supported sections are Args , Arguments , Attributes , Example[s] , Note[s] , Parameters , Raises , Returns , References , Todo , Warning[s] , Warns , and Yields . Type annotation. If you write your function such as def func(x: int) -> str: , you don't need write type(s) in Args , Parameters , Returns , or Yields section again. You can overwrite the type annotation in the corresponding docstring. Object type inspection. MkApi plugin creates CLASS , DATACLASS , FUNCTION , GENERATOR , METHOD , or PROPERTY prefix for each object. Installation Install the plugin using pip: pip install mkapi Configuration Add the following lines to mkdocs.yml : plugins: - search # necessary for search to work - mkapi Usage MkApi provides two modes to generate API documentation: Embedding mode and Page mode. Embedding Mode To generate the API documentation in a Markdown source, add an exclamation mark (!), followed by mkapi in brackets, and the object qualname in parentheses. Yes, this is like adding an image. The object can be a package, module, function, class, etc . ![mkapi](<object.qualname>) The MkApi plugin imports objects that you specify. If they aren't in the sys.path , configure mkdocs.yml like below: plugins: - search - mkapi: src_dirs: [<path_1>, <path_2>, ...] Here, path_X s are inserted to sys.path . These path_X s are relative paths to the directory in which mkdocs.yml exists. The embedding mode is useful to embed object interface in a arbitrary position of a Markdown source. Page Mode Using the page mode, you can construct a comprehensive API documentation for a package. The following YAML is nav part of MkApi's own mkdocs.yml : nav: - index.md - Examples: - google_style.md - numpy_style.md - API: mkapi/api/mkapi MkApi scans the nav to find an entry that starts with 'mkapi/' . This entry must includes two or more slashs ( '/' ). Second string ( 'api' ) splitted by slash is a directory name. MkApi automatically creates this directory in the docs directory at the beginning of the process and deletes after the process. The rest string( 'mkapi' ) is a directory path to a package that exists in the config directory. MkApi searches all packages and modules and create a Markdown source for one package or module, which is saved in the api directory. The rest work is done by MkDocs. You can see the API documentation of MkApi in nav area. Note If a package or module has no package- or module-level docstring, MkApi doesn't process it.","title":"MkApi Documentation"},{"location":"#mkapi-documentation","text":"MkApi plugin for MkDocs generates API documentation for Python code. MkApi (partially) supports two styles of docstrings: Google and NumPy . Napoleon package provides complete examples: Example Google Style Python Docstrings Example NumPy Style Python Docstrings Features of MkApi are: Section syntax. Supported sections are Args , Arguments , Attributes , Example[s] , Note[s] , Parameters , Raises , Returns , References , Todo , Warning[s] , Warns , and Yields . Type annotation. If you write your function such as def func(x: int) -> str: , you don't need write type(s) in Args , Parameters , Returns , or Yields section again. You can overwrite the type annotation in the corresponding docstring. Object type inspection. MkApi plugin creates CLASS , DATACLASS , FUNCTION , GENERATOR , METHOD , or PROPERTY prefix for each object.","title":"MkApi Documentation"},{"location":"#installation","text":"Install the plugin using pip: pip install mkapi","title":"Installation"},{"location":"#configuration","text":"Add the following lines to mkdocs.yml : plugins: - search # necessary for search to work - mkapi","title":"Configuration"},{"location":"#usage","text":"MkApi provides two modes to generate API documentation: Embedding mode and Page mode.","title":"Usage"},{"location":"#embedding-mode","text":"To generate the API documentation in a Markdown source, add an exclamation mark (!), followed by mkapi in brackets, and the object qualname in parentheses. Yes, this is like adding an image. The object can be a package, module, function, class, etc . ![mkapi](<object.qualname>) The MkApi plugin imports objects that you specify. If they aren't in the sys.path , configure mkdocs.yml like below: plugins: - search - mkapi: src_dirs: [<path_1>, <path_2>, ...] Here, path_X s are inserted to sys.path . These path_X s are relative paths to the directory in which mkdocs.yml exists. The embedding mode is useful to embed object interface in a arbitrary position of a Markdown source.","title":"Embedding Mode"},{"location":"#page-mode","text":"Using the page mode, you can construct a comprehensive API documentation for a package. The following YAML is nav part of MkApi's own mkdocs.yml : nav: - index.md - Examples: - google_style.md - numpy_style.md - API: mkapi/api/mkapi MkApi scans the nav to find an entry that starts with 'mkapi/' . This entry must includes two or more slashs ( '/' ). Second string ( 'api' ) splitted by slash is a directory name. MkApi automatically creates this directory in the docs directory at the beginning of the process and deletes after the process. The rest string( 'mkapi' ) is a directory path to a package that exists in the config directory. MkApi searches all packages and modules and create a Markdown source for one package or module, which is saved in the api directory. The rest work is done by MkDocs. You can see the API documentation of MkApi in nav area. Note If a package or module has no package- or module-level docstring, MkApi doesn't process it.","title":"Page Mode"},{"location":"google_style/","text":"<!-- .mkapi-node-depth-0 { border: 2px dashed #88AA88; } --> Google Style Let's start realistic examples. Here, a sample Python file google_style.py is stored under the examples directory relative to the mkdocs.yml directory, so you should configure mkdocs.yml like below. In addition, we add two extensions and an extra javascript for demonstration. plugins: - search - mkapi: src_dirs: [examples] markdown_extensions: - admonition - pymdownx.arithmatex extra_javascript: # for pymdownx.arithmatex - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML Function The google_style module defines a simple function add() . Code 1 google_style.add() def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Args: x: The first parameter. y: The second parameter. Default={default}. Returns: Added value. Examples: Examples should be written in doctest format >>> add(1, 2) 3 !!! note You can use the [admonition extension of MkDocs](https://squidfunk.github.io/mkdocs-material/extensions/admonition/). Note: But you should use `Note` section instead for consistency. \"\"\" return x + y Then, you can write an entry to generate API for the function anywhere in your Markdown source: ![mkapi][google_style.add] MkApi generates the API documentation for the add() function. FUNCTION google_style.add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note You can use the admonition extension of MkDocs . Note But you should use Note section instead for consistency. Note In the above example, green dashed border lines are just guide for the eye to show the region of the documentation generated by MkApi for convenience. In this simple example, you can see some features of MkApi. Type inspection of add (FUNCTION prefix is added before google_style.add ). Use of type annotation for both Parameters and Returns sections. Add optional if parameters have default values. Default value replacement by the {default} keyword in the Args section. External hyperlink. Use of MkDocs extensions: MathJax rendering and admonition. Generator The google_style module also defines a simple generator gen() . Code 2 google_style.gen() def gen(n) -> Iterator[str]: \"\"\"Yields a numbered string. Args: n (int): The length of iteration. Yields: A numbered string. \"\"\" for x in range(n): yield f\"a{x}\" Then, ![mkapi][google_style.gen] creates the API documentation for the gen() generator. GENERATOR google_style.gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. In this simple example, notice that: A GENERATOR prefix instead of a FUNCTION prefix. The parameter n has no type annotation but you can specify it in the Args section directly. Yields type is not iterator of str but str , because gen() is a generator. Class The google_style module also defines a simple class ExampleClass . Code 3 google_style.ExampleClass class ExampleClass: def __init__(self, x: List[int], y: Tuple[str, int]): \"\"\"A normal class. Args: x: The first parameter. y: The second parameter. Attributes: z (str): The first attribute. Raises: ValueError: If the length of `x` is equal to 0. \"\"\" if len(x) == 0: raise ValueError() self.z = \"abc\" def message(self, n: int) -> List[str]: \"\"\"Returns a message list. Args: n: Repeatation. \"\"\" return [self.z] * n @property def readonly_property(self): \"\"\"str: Read-only property documentation.\"\"\" return \"readonly_property\" @property def readwrite_property(self) -> List[int]: \"\"\"Read-write property documentation.\"\"\" return [1, 2, 3] @readwrite_property.setter def readwrite_property(self, value): \"\"\"Docstring in setter is ignored.\"\"\" As usual, ![mkapi][google_style.ExampleClass] creates the API documentation for the ExampleClass class. CLASS google_style.ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes z (str) \u2014 The first attribute. Raises ValueError \u2014 If the length of x is equal to 0. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. READONLY_PROPERTY readonly_property \u2192 str Read-only property documentation. READWRITE_PROPERTY readwrite_property \u2192 list of int Read-write property documentation. In this example, notice that: Docstring of __init__ function is treated as a class-level docstring. Type annotation using typing package ( List and Tuple in this case) is converted into readable style. So far, only List and Tuple are supported. Bound methods ( message in this case) have a METHOD prefix instead of a FUNCTION prefix. If callable objects have neither Returns nor Yields , the type appears on the object definition line like type annotation. For properties, the type can be written at the beginning of the docstring or as type annotation. Whether a property is read-only or read-write is inspected. Data Class The google_style module also defines a simple data class ExampleDataClass . Code 4 google_style.ExampleDataClass @dataclass class ExampleDataClass: \"\"\"A dataclass. Args: x: The first parameter. Attributes: x: The first attribute. y: The second attribute. \"\"\" x: int = 0 y: int = field(default=1, init=False) Then, ![mkapi][google_style.ExampleDataClass] creates the API documentation for the ExampleDataClass class. DATACLASS google_style.ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute. In this example, notice that: A DATACLASS prefix instead of a CLASS prefix. Attributes type inspection as well as parameters if they are data class fields. Module Finally, let's generate the API documentation for the google_style module. The module has a module level docstring like below: File 1 google_style.py (line 1~10) \"\"\"Module level docstring.\"\"\" from dataclasses import dataclass, field from typing import Iterator, List, Tuple def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Args: x: The first parameter. Then, ![mkapi][google_style] creates the API documentation for the entire google_style module. MODULE google_style Module level docstring. FUNCTION google_style. add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note You can use the admonition extension of MkDocs . Note But you should use Note section instead for consistency. GENERATOR google_style. gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. CLASS google_style. ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes z (str) \u2014 The first attribute. Raises ValueError \u2014 If the length of x is equal to 0. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. READONLY_PROPERTY readonly_property \u2192 str Read-only property documentation. READWRITE_PROPERTY readwrite_property \u2192 list of int Read-write property documentation. DATACLASS google_style. ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute.","title":"Google style"},{"location":"google_style/#google-style","text":"Let's start realistic examples. Here, a sample Python file google_style.py is stored under the examples directory relative to the mkdocs.yml directory, so you should configure mkdocs.yml like below. In addition, we add two extensions and an extra javascript for demonstration. plugins: - search - mkapi: src_dirs: [examples] markdown_extensions: - admonition - pymdownx.arithmatex extra_javascript: # for pymdownx.arithmatex - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML","title":"Google Style"},{"location":"google_style/#function","text":"The google_style module defines a simple function add() . Code 1 google_style.add() def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Args: x: The first parameter. y: The second parameter. Default={default}. Returns: Added value. Examples: Examples should be written in doctest format >>> add(1, 2) 3 !!! note You can use the [admonition extension of MkDocs](https://squidfunk.github.io/mkdocs-material/extensions/admonition/). Note: But you should use `Note` section instead for consistency. \"\"\" return x + y Then, you can write an entry to generate API for the function anywhere in your Markdown source: ![mkapi][google_style.add] MkApi generates the API documentation for the add() function. FUNCTION google_style.add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note You can use the admonition extension of MkDocs . Note But you should use Note section instead for consistency. Note In the above example, green dashed border lines are just guide for the eye to show the region of the documentation generated by MkApi for convenience. In this simple example, you can see some features of MkApi. Type inspection of add (FUNCTION prefix is added before google_style.add ). Use of type annotation for both Parameters and Returns sections. Add optional if parameters have default values. Default value replacement by the {default} keyword in the Args section. External hyperlink. Use of MkDocs extensions: MathJax rendering and admonition.","title":"Function"},{"location":"google_style/#generator","text":"The google_style module also defines a simple generator gen() . Code 2 google_style.gen() def gen(n) -> Iterator[str]: \"\"\"Yields a numbered string. Args: n (int): The length of iteration. Yields: A numbered string. \"\"\" for x in range(n): yield f\"a{x}\" Then, ![mkapi][google_style.gen] creates the API documentation for the gen() generator. GENERATOR google_style.gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. In this simple example, notice that: A GENERATOR prefix instead of a FUNCTION prefix. The parameter n has no type annotation but you can specify it in the Args section directly. Yields type is not iterator of str but str , because gen() is a generator.","title":"Generator"},{"location":"google_style/#class","text":"The google_style module also defines a simple class ExampleClass . Code 3 google_style.ExampleClass class ExampleClass: def __init__(self, x: List[int], y: Tuple[str, int]): \"\"\"A normal class. Args: x: The first parameter. y: The second parameter. Attributes: z (str): The first attribute. Raises: ValueError: If the length of `x` is equal to 0. \"\"\" if len(x) == 0: raise ValueError() self.z = \"abc\" def message(self, n: int) -> List[str]: \"\"\"Returns a message list. Args: n: Repeatation. \"\"\" return [self.z] * n @property def readonly_property(self): \"\"\"str: Read-only property documentation.\"\"\" return \"readonly_property\" @property def readwrite_property(self) -> List[int]: \"\"\"Read-write property documentation.\"\"\" return [1, 2, 3] @readwrite_property.setter def readwrite_property(self, value): \"\"\"Docstring in setter is ignored.\"\"\" As usual, ![mkapi][google_style.ExampleClass] creates the API documentation for the ExampleClass class. CLASS google_style.ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes z (str) \u2014 The first attribute. Raises ValueError \u2014 If the length of x is equal to 0. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. READONLY_PROPERTY readonly_property \u2192 str Read-only property documentation. READWRITE_PROPERTY readwrite_property \u2192 list of int Read-write property documentation. In this example, notice that: Docstring of __init__ function is treated as a class-level docstring. Type annotation using typing package ( List and Tuple in this case) is converted into readable style. So far, only List and Tuple are supported. Bound methods ( message in this case) have a METHOD prefix instead of a FUNCTION prefix. If callable objects have neither Returns nor Yields , the type appears on the object definition line like type annotation. For properties, the type can be written at the beginning of the docstring or as type annotation. Whether a property is read-only or read-write is inspected.","title":"Class"},{"location":"google_style/#data-class","text":"The google_style module also defines a simple data class ExampleDataClass . Code 4 google_style.ExampleDataClass @dataclass class ExampleDataClass: \"\"\"A dataclass. Args: x: The first parameter. Attributes: x: The first attribute. y: The second attribute. \"\"\" x: int = 0 y: int = field(default=1, init=False) Then, ![mkapi][google_style.ExampleDataClass] creates the API documentation for the ExampleDataClass class. DATACLASS google_style.ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute. In this example, notice that: A DATACLASS prefix instead of a CLASS prefix. Attributes type inspection as well as parameters if they are data class fields.","title":"Data Class"},{"location":"google_style/#module","text":"Finally, let's generate the API documentation for the google_style module. The module has a module level docstring like below: File 1 google_style.py (line 1~10) \"\"\"Module level docstring.\"\"\" from dataclasses import dataclass, field from typing import Iterator, List, Tuple def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Args: x: The first parameter. Then, ![mkapi][google_style] creates the API documentation for the entire google_style module. MODULE google_style Module level docstring. FUNCTION google_style. add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note You can use the admonition extension of MkDocs . Note But you should use Note section instead for consistency. GENERATOR google_style. gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. CLASS google_style. ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes z (str) \u2014 The first attribute. Raises ValueError \u2014 If the length of x is equal to 0. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. READONLY_PROPERTY readonly_property \u2192 str Read-only property documentation. READWRITE_PROPERTY readwrite_property \u2192 list of int Read-write property documentation. DATACLASS google_style. ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute.","title":"Module"},{"location":"library/","text":"Using MkApi within Python MkApi is a standalone library as well as a MkDocs plugin, so that you can use it within Python. First, import MkApi: import mkapi [1] 2020-06-03 21:45:17 ( 25.0ms ) python3 ( 107ms ) Node object Define a simple class to show how MkApi works. class A: \"\"\"Class docstring. Note: Docstring of `__init__()` is deleted, if there is a class-level docstring. \"\"\" def __init__(self): \"\"\"Init docstring.\"\"\" def to_str(self, x: int) -> str: \"\"\"Converts `int` to `str`. Args: x: Input value. \"\"\" return str(x) [2] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 111ms ) mkapi.get_node() generates a Node object that has tree structure. node = mkapi.get_node(A) type(node) [3] 2020-06-03 21:45:17 ( 6.00ms ) python3 ( 117ms ) mkapi.core.base.Node Some attributes: node.kind, node.name [4] 2020-06-03 21:45:17 ( 3.00ms ) python3 ( 120ms ) ('class', 'A') docstring = node.docstring len(docstring.sections) [5] 2020-06-03 21:45:17 ( 3.00ms ) python3 ( 123ms ) 2 section = docstring.sections[0] section.name, section.markdown [6] 2020-06-03 21:45:17 ( 5.00ms ) python3 ( 128ms ) ('', 'Class docstring.') section = docstring.sections[1] section.name, section.markdown [7] 2020-06-03 21:45:17 ( 3.00ms ) python3 ( 131ms ) ('Note', 'Docstring of `__init__()` is deleted, if there is\\na class-level docstring.') The members attribute gives children, for example, bound methods of a class. len(node.members) [8] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 135ms ) 1 child = node.members[0] type(child) [9] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 139ms ) mkapi.core.base.Node Elements of Node.members are also Node objects, so this is a tree structure. child.kind, child.name [10] 2020-06-03 21:45:17 ( 3.00ms ) python3 ( 142ms ) ('method', 'to_str') docstring = child.docstring len(docstring.sections) [11] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 146ms ) 2 section = docstring.sections[0] section.name, section.markdown [12] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 150ms ) ('', 'Converts `int` to `str`.') section = docstring.sections[1] section.name, section.markdown [13] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 154ms ) ('Parameters', '') Parameters section has no markdown but items that represent argument list: section.items [14] 2020-06-03 21:45:17 ( 3.00ms ) python3 ( 157ms ) [Item(name='x', type='int', markdown='Input value.', html='')] You can see that the type of argument x is inspected. Note that the markdown attribute is set from docstring, while the html attribute is empty. Node.get_markdown() creates a joint Markdown of this node. markdown = node.get_markdown() print(markdown) [15] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 161ms ) Class docstring. <!-- mkapi:sep --> Docstring of `__init__()` is deleted, if there is a class-level docstring. <!-- mkapi:sep --> Converts `int` to `str`. <!-- mkapi:sep --> Input value. Where is Note or Parameters section header, etc. ? No problem. The Node.get_markdown() divides docstring into two parts. One is a plain Markdown that will be converted into HTML by any Markdown converter, for example, MkDocs. The other is the outline structure of a docstring such as sections or arguments that will be processed by MkApi itself. Converting Markdown For simplicity, we use Python-Markdown library instead of MkDocs . from markdown import Markdown converter = Markdown() html = converter.convert(markdown) print(html) [16] 2020-06-03 21:45:17 ( 70.0ms ) python3 ( 231ms ) <p>Class docstring.</p> <!-- mkapi:sep --> <p>Docstring of <code>__init__()</code> is deleted, if there is a class-level docstring.</p> <!-- mkapi:sep --> <p>Converts <code>int</code> to <code>str</code>.</p> <!-- mkapi:sep --> <p>Input value.</p> Distributing HTML Node.set_html() distributes HTML into docstring and members. node.set_html(html) [17] 2020-06-03 21:45:17 ( 2.00ms ) python3 ( 233ms ) Take a look at what happened. section = node.docstring.sections[0] section.markdown, section.html [18] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 237ms ) ('Class docstring.', '<p>Class docstring.</p>') section = node.docstring.sections[1] section.markdown, section.html [19] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 241ms ) ('Docstring of `__init__()` is deleted, if there is\\na class-level docstring.', '<p>Docstring of <code>__init__()</code> is deleted, if there is\\na class-level docstring.</p>') child = node.members[0] section = child.docstring.sections[0] section.markdown, section.html [20] 2020-06-03 21:45:17 ( 3.00ms ) python3 ( 244ms ) ('Converts `int` to `str`.', '<p>Converts <code>int</code> to <code>str</code>.</p>') section = child.docstring.sections[1] item = section.items[0] item.markdown, item.html # A <p> tag is deleted. [21] 2020-06-03 21:45:17 ( 5.00ms ) python3 ( 249ms ) ('Input value.', 'Input value.') Constructing HTML Finally, construct one HTML calling Node.render() that internally uses Jinja library. html = node.render() print(html[:300].strip()) [22] 2020-06-03 21:45:17 ( 5.00ms ) python3 ( 254ms ) <div class=\"mkapi-node mkapi-node-depth-0\" id=\"A\"> <div class=\"mkapi-node-header mkapi-node-header-class\"> <div class=\"mkapi-node-kind mkapi-node-kind-class\">CLASS</div> <div class=\"mkapi-node-name\"> <code class=\"mkapi-node-basename\">A</code><code class=\"mkapi-node-signatur Jupyter allows us to see the rendered HTML. from IPython.display import HTML HTML(html) [23] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 258ms ) CLASS A () Class docstring. Note Docstring of __init__() is deleted, if there is a class-level docstring. METHOD to_str (x) \u2192 str Converts int to str . Parameters x (int) \u2014 Input value.","title":"Using MkApi within Python"},{"location":"library/#using-mkapi-within-python","text":"MkApi is a standalone library as well as a MkDocs plugin, so that you can use it within Python. First, import MkApi: import mkapi [1] 2020-06-03 21:45:17 ( 25.0ms ) python3 ( 107ms )","title":"Using MkApi within Python"},{"location":"library/#node-object","text":"Define a simple class to show how MkApi works. class A: \"\"\"Class docstring. Note: Docstring of `__init__()` is deleted, if there is a class-level docstring. \"\"\" def __init__(self): \"\"\"Init docstring.\"\"\" def to_str(self, x: int) -> str: \"\"\"Converts `int` to `str`. Args: x: Input value. \"\"\" return str(x) [2] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 111ms ) mkapi.get_node() generates a Node object that has tree structure. node = mkapi.get_node(A) type(node) [3] 2020-06-03 21:45:17 ( 6.00ms ) python3 ( 117ms ) mkapi.core.base.Node Some attributes: node.kind, node.name [4] 2020-06-03 21:45:17 ( 3.00ms ) python3 ( 120ms ) ('class', 'A') docstring = node.docstring len(docstring.sections) [5] 2020-06-03 21:45:17 ( 3.00ms ) python3 ( 123ms ) 2 section = docstring.sections[0] section.name, section.markdown [6] 2020-06-03 21:45:17 ( 5.00ms ) python3 ( 128ms ) ('', 'Class docstring.') section = docstring.sections[1] section.name, section.markdown [7] 2020-06-03 21:45:17 ( 3.00ms ) python3 ( 131ms ) ('Note', 'Docstring of `__init__()` is deleted, if there is\\na class-level docstring.') The members attribute gives children, for example, bound methods of a class. len(node.members) [8] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 135ms ) 1 child = node.members[0] type(child) [9] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 139ms ) mkapi.core.base.Node Elements of Node.members are also Node objects, so this is a tree structure. child.kind, child.name [10] 2020-06-03 21:45:17 ( 3.00ms ) python3 ( 142ms ) ('method', 'to_str') docstring = child.docstring len(docstring.sections) [11] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 146ms ) 2 section = docstring.sections[0] section.name, section.markdown [12] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 150ms ) ('', 'Converts `int` to `str`.') section = docstring.sections[1] section.name, section.markdown [13] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 154ms ) ('Parameters', '') Parameters section has no markdown but items that represent argument list: section.items [14] 2020-06-03 21:45:17 ( 3.00ms ) python3 ( 157ms ) [Item(name='x', type='int', markdown='Input value.', html='')] You can see that the type of argument x is inspected. Note that the markdown attribute is set from docstring, while the html attribute is empty. Node.get_markdown() creates a joint Markdown of this node. markdown = node.get_markdown() print(markdown) [15] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 161ms ) Class docstring. <!-- mkapi:sep --> Docstring of `__init__()` is deleted, if there is a class-level docstring. <!-- mkapi:sep --> Converts `int` to `str`. <!-- mkapi:sep --> Input value. Where is Note or Parameters section header, etc. ? No problem. The Node.get_markdown() divides docstring into two parts. One is a plain Markdown that will be converted into HTML by any Markdown converter, for example, MkDocs. The other is the outline structure of a docstring such as sections or arguments that will be processed by MkApi itself.","title":"Node object"},{"location":"library/#converting-markdown","text":"For simplicity, we use Python-Markdown library instead of MkDocs . from markdown import Markdown converter = Markdown() html = converter.convert(markdown) print(html) [16] 2020-06-03 21:45:17 ( 70.0ms ) python3 ( 231ms ) <p>Class docstring.</p> <!-- mkapi:sep --> <p>Docstring of <code>__init__()</code> is deleted, if there is a class-level docstring.</p> <!-- mkapi:sep --> <p>Converts <code>int</code> to <code>str</code>.</p> <!-- mkapi:sep --> <p>Input value.</p>","title":"Converting Markdown"},{"location":"library/#distributing-html","text":"Node.set_html() distributes HTML into docstring and members. node.set_html(html) [17] 2020-06-03 21:45:17 ( 2.00ms ) python3 ( 233ms ) Take a look at what happened. section = node.docstring.sections[0] section.markdown, section.html [18] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 237ms ) ('Class docstring.', '<p>Class docstring.</p>') section = node.docstring.sections[1] section.markdown, section.html [19] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 241ms ) ('Docstring of `__init__()` is deleted, if there is\\na class-level docstring.', '<p>Docstring of <code>__init__()</code> is deleted, if there is\\na class-level docstring.</p>') child = node.members[0] section = child.docstring.sections[0] section.markdown, section.html [20] 2020-06-03 21:45:17 ( 3.00ms ) python3 ( 244ms ) ('Converts `int` to `str`.', '<p>Converts <code>int</code> to <code>str</code>.</p>') section = child.docstring.sections[1] item = section.items[0] item.markdown, item.html # A <p> tag is deleted. [21] 2020-06-03 21:45:17 ( 5.00ms ) python3 ( 249ms ) ('Input value.', 'Input value.')","title":"Distributing HTML"},{"location":"library/#constructing-html","text":"Finally, construct one HTML calling Node.render() that internally uses Jinja library. html = node.render() print(html[:300].strip()) [22] 2020-06-03 21:45:17 ( 5.00ms ) python3 ( 254ms ) <div class=\"mkapi-node mkapi-node-depth-0\" id=\"A\"> <div class=\"mkapi-node-header mkapi-node-header-class\"> <div class=\"mkapi-node-kind mkapi-node-kind-class\">CLASS</div> <div class=\"mkapi-node-name\"> <code class=\"mkapi-node-basename\">A</code><code class=\"mkapi-node-signatur Jupyter allows us to see the rendered HTML. from IPython.display import HTML HTML(html) [23] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 258ms ) CLASS A () Class docstring. Note Docstring of __init__() is deleted, if there is a class-level docstring. METHOD to_str (x) \u2192 str Converts int to str . Parameters x (int) \u2014 Input value.","title":"Constructing HTML"},{"location":"numpy_style/","text":"<!-- .mkapi-node-depth-0 { border: 2px dashed #88AA88; } --> NumPy Style Let's start realistic examples. Here, a sample Python file numpy_style.py is stored under the examples directory relative to the mkdocs.yml directory, so you should configure mkdocs.yml like below. In addition, we add two extensions and an extra javascript for demonstration. plugins: - search - mkapi: src_dirs: [examples] markdown_extensions: - admonition - pymdownx.arithmatex extra_javascript: # for pymdownx.arithmatex - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML Function The numpy_style module defines a simple function add() . Code 5 numpy_style.add() def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Parameters ---------- x The first parameter. y The second parameter. Default={default}. Returns ------- int Added value. !!! note The return type must be duplicated in the docstring to comply with the NumPy docstring style. Examples -------- Examples should be written in doctest format >>> add(1, 2) 3 Note ---- MkApi doesn't check an underline that follows a section header. Just skip one line. \"\"\" return x + y Then, you can write an entry to generate API for the function anywhere in your Markdown source: ![mkapi][numpy_style.add] MkApi generates the API documentation for the add() function. FUNCTION numpy_style.add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Note The return type must be duplicated in the docstring to comply with the NumPy docstring style. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note MkApi doesn't check an underline that follows a section header. Just skip one line. Note In the above example, green dashed border lines are just guide for the eye to show the region of the documentation generated by MkApi for convenience. In this simple example, you can see some features of MkApi. Type inspection of add (FUNCTION prefix is added before numpy_style.add ). Use of type annotation for both Parameters and Returns sections. Add optional if parameters have default values. Default value replacement by the {default} keyword in the Args section. External hyperlink. Use of MkDocs extensions: MathJax rendering and admonition. Generator The numpy_style module also defines a simple generator gen() . Code 6 numpy_style.gen() def gen(n) -> Iterator[str]: \"\"\"Yields a numbered string. Parameters ---------- n : int The length of iteration. Yields ------ str A numbered string. \"\"\" for x in range(n): yield f\"a{x}\" Then, ![mkapi][numpy_style.gen] creates the API documentation for the gen() generator. GENERATOR numpy_style.gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. In this simple example, notice that: A GENERATOR prefix instead of a FUNCTION prefix. The parameter n has no type annotation but you can specify it in the Args section directly. Yields type is not iterator of str but str , because gen() is a generator. Class The numpy_style module also defines a simple class ExampleClass . Code 7 numpy_style.ExampleClass class ExampleClass: def __init__(self, x: List[int], y: Tuple[str, int]): \"\"\"A normal class. Parameters ---------- x The first parameter. y The second parameter. Attributes ---------- z : str The first attribute. Raises ------ ValueError If the length of `x` is equal to 0. \"\"\" if len(x) == 0: raise ValueError() self.z = \"abc\" def message(self, n: int) -> List[str]: \"\"\"Returns a message list. Parameters ---------- n Repeatation. \"\"\" return [self.z] * n @property def readonly_property(self): \"\"\"str: Read-only property documentation.\"\"\" return \"readonly_property\" @property def readwrite_property(self) -> List[int]: \"\"\"Read-write property documentation.\"\"\" return [1, 2, 3] @readwrite_property.setter def readwrite_property(self, value): \"\"\"Docstring in setter is ignored.\"\"\" As usual, ![mkapi][numpy_style.ExampleClass] creates the API documentation for the ExampleClass class. CLASS numpy_style.ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes z (str) \u2014 The first attribute. Raises ValueError \u2014 If the length of x is equal to 0. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. READONLY_PROPERTY readonly_property \u2192 str Read-only property documentation. READWRITE_PROPERTY readwrite_property \u2192 list of int Read-write property documentation. In this example, notice that: Docstring of __init__ function is treated as a class-level docstring. Type annotation using typing package ( List and Tuple in this case) is converted into readable style. So far, only List and Tuple are supported. Bound methods ( message in this case) have a METHOD prefix instead of a FUNCTION prefix. If callable objects have neither Returns nor Yields , the type appears on the object definition line like type annotation. For properties, the type can be written at the beginning of the docstring or as type annotation. Whether a property is read-only or read-write is inspected. Data Class The numpy_style module also defines a simple data class ExampleDataClass . Code 8 numpy_style.ExampleDataClass @dataclass class ExampleDataClass: \"\"\"A dataclass. Parameters ---------- x The first parameter. Attributes ---------- x The first attribute. y The second attribute. \"\"\" x: int = 0 y: int = field(default=1, init=False) Then, ![mkapi][numpy_style.ExampleDataClass] creates the API documentation for the ExampleDataClass class. DATACLASS numpy_style.ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute. In this example, notice that: A DATACLASS prefix instead of a CLASS prefix. Attributes type inspection as well as parameters if they are data class fields. Module Finally, let's generate the API documentation for the numpy_style module. The module has a module level docstring like below: File 2 numpy_style.py (line 1~10) \"\"\"Module level docstring.\"\"\" from dataclasses import dataclass, field from typing import Iterator, List, Tuple def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Parameters ---------- Then, ![mkapi][numpy_style] creates the API documentation for the entire numpy_style module. MODULE numpy_style Module level docstring. FUNCTION numpy_style. add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Note The return type must be duplicated in the docstring to comply with the NumPy docstring style. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note MkApi doesn't check an underline that follows a section header. Just skip one line. GENERATOR numpy_style. gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. CLASS numpy_style. ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes z (str) \u2014 The first attribute. Raises ValueError \u2014 If the length of x is equal to 0. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. READONLY_PROPERTY readonly_property \u2192 str Read-only property documentation. READWRITE_PROPERTY readwrite_property \u2192 list of int Read-write property documentation. DATACLASS numpy_style. ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute.","title":"Numpy style"},{"location":"numpy_style/#numpy-style","text":"Let's start realistic examples. Here, a sample Python file numpy_style.py is stored under the examples directory relative to the mkdocs.yml directory, so you should configure mkdocs.yml like below. In addition, we add two extensions and an extra javascript for demonstration. plugins: - search - mkapi: src_dirs: [examples] markdown_extensions: - admonition - pymdownx.arithmatex extra_javascript: # for pymdownx.arithmatex - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML","title":"NumPy Style"},{"location":"numpy_style/#function","text":"The numpy_style module defines a simple function add() . Code 5 numpy_style.add() def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Parameters ---------- x The first parameter. y The second parameter. Default={default}. Returns ------- int Added value. !!! note The return type must be duplicated in the docstring to comply with the NumPy docstring style. Examples -------- Examples should be written in doctest format >>> add(1, 2) 3 Note ---- MkApi doesn't check an underline that follows a section header. Just skip one line. \"\"\" return x + y Then, you can write an entry to generate API for the function anywhere in your Markdown source: ![mkapi][numpy_style.add] MkApi generates the API documentation for the add() function. FUNCTION numpy_style.add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Note The return type must be duplicated in the docstring to comply with the NumPy docstring style. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note MkApi doesn't check an underline that follows a section header. Just skip one line. Note In the above example, green dashed border lines are just guide for the eye to show the region of the documentation generated by MkApi for convenience. In this simple example, you can see some features of MkApi. Type inspection of add (FUNCTION prefix is added before numpy_style.add ). Use of type annotation for both Parameters and Returns sections. Add optional if parameters have default values. Default value replacement by the {default} keyword in the Args section. External hyperlink. Use of MkDocs extensions: MathJax rendering and admonition.","title":"Function"},{"location":"numpy_style/#generator","text":"The numpy_style module also defines a simple generator gen() . Code 6 numpy_style.gen() def gen(n) -> Iterator[str]: \"\"\"Yields a numbered string. Parameters ---------- n : int The length of iteration. Yields ------ str A numbered string. \"\"\" for x in range(n): yield f\"a{x}\" Then, ![mkapi][numpy_style.gen] creates the API documentation for the gen() generator. GENERATOR numpy_style.gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. In this simple example, notice that: A GENERATOR prefix instead of a FUNCTION prefix. The parameter n has no type annotation but you can specify it in the Args section directly. Yields type is not iterator of str but str , because gen() is a generator.","title":"Generator"},{"location":"numpy_style/#class","text":"The numpy_style module also defines a simple class ExampleClass . Code 7 numpy_style.ExampleClass class ExampleClass: def __init__(self, x: List[int], y: Tuple[str, int]): \"\"\"A normal class. Parameters ---------- x The first parameter. y The second parameter. Attributes ---------- z : str The first attribute. Raises ------ ValueError If the length of `x` is equal to 0. \"\"\" if len(x) == 0: raise ValueError() self.z = \"abc\" def message(self, n: int) -> List[str]: \"\"\"Returns a message list. Parameters ---------- n Repeatation. \"\"\" return [self.z] * n @property def readonly_property(self): \"\"\"str: Read-only property documentation.\"\"\" return \"readonly_property\" @property def readwrite_property(self) -> List[int]: \"\"\"Read-write property documentation.\"\"\" return [1, 2, 3] @readwrite_property.setter def readwrite_property(self, value): \"\"\"Docstring in setter is ignored.\"\"\" As usual, ![mkapi][numpy_style.ExampleClass] creates the API documentation for the ExampleClass class. CLASS numpy_style.ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes z (str) \u2014 The first attribute. Raises ValueError \u2014 If the length of x is equal to 0. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. READONLY_PROPERTY readonly_property \u2192 str Read-only property documentation. READWRITE_PROPERTY readwrite_property \u2192 list of int Read-write property documentation. In this example, notice that: Docstring of __init__ function is treated as a class-level docstring. Type annotation using typing package ( List and Tuple in this case) is converted into readable style. So far, only List and Tuple are supported. Bound methods ( message in this case) have a METHOD prefix instead of a FUNCTION prefix. If callable objects have neither Returns nor Yields , the type appears on the object definition line like type annotation. For properties, the type can be written at the beginning of the docstring or as type annotation. Whether a property is read-only or read-write is inspected.","title":"Class"},{"location":"numpy_style/#data-class","text":"The numpy_style module also defines a simple data class ExampleDataClass . Code 8 numpy_style.ExampleDataClass @dataclass class ExampleDataClass: \"\"\"A dataclass. Parameters ---------- x The first parameter. Attributes ---------- x The first attribute. y The second attribute. \"\"\" x: int = 0 y: int = field(default=1, init=False) Then, ![mkapi][numpy_style.ExampleDataClass] creates the API documentation for the ExampleDataClass class. DATACLASS numpy_style.ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute. In this example, notice that: A DATACLASS prefix instead of a CLASS prefix. Attributes type inspection as well as parameters if they are data class fields.","title":"Data Class"},{"location":"numpy_style/#module","text":"Finally, let's generate the API documentation for the numpy_style module. The module has a module level docstring like below: File 2 numpy_style.py (line 1~10) \"\"\"Module level docstring.\"\"\" from dataclasses import dataclass, field from typing import Iterator, List, Tuple def add(x: int, y: int = 1) -> int: \"\"\"Returns $x + y$. Parameters ---------- Then, ![mkapi][numpy_style] creates the API documentation for the entire numpy_style module. MODULE numpy_style Module level docstring. FUNCTION numpy_style. add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Note The return type must be duplicated in the docstring to comply with the NumPy docstring style. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note MkApi doesn't check an underline that follows a section header. Just skip one line. GENERATOR numpy_style. gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. CLASS numpy_style. ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes z (str) \u2014 The first attribute. Raises ValueError \u2014 If the length of x is equal to 0. METHOD message (n) \u2192 list of str Returns a message list. Parameters n (int) \u2014 Repeatation. READONLY_PROPERTY readonly_property \u2192 str Read-only property documentation. READWRITE_PROPERTY readwrite_property \u2192 list of int Read-write property documentation. DATACLASS numpy_style. ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute.","title":"Module"},{"location":"options/","text":"<!-- .mkapi-node-depth-0 { border: 2px dashed #88AA88; } --> Options Depth Limitation By default, MkApi searchs objects to unlimited depth. You can control the depth by adding \":(depth)\" to the object name. ![mkapi][numpy_style:0] MODULE numpy_style Module level docstring. ![mkapi][numpy_style:1] MODULE numpy_style Module level docstring. FUNCTION numpy_style. add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Note The return type must be duplicated in the docstring to comply with the NumPy docstring style. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note MkApi doesn't check an underline that follows a section header. Just skip one line. GENERATOR numpy_style. gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. CLASS numpy_style. ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes z (str) \u2014 The first attribute. Raises ValueError \u2014 If the length of x is equal to 0. DATACLASS numpy_style. ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute.","title":"Options"},{"location":"options/#options","text":"","title":"Options"},{"location":"options/#depth-limitation","text":"By default, MkApi searchs objects to unlimited depth. You can control the depth by adding \":(depth)\" to the object name. ![mkapi][numpy_style:0] MODULE numpy_style Module level docstring. ![mkapi][numpy_style:1] MODULE numpy_style Module level docstring. FUNCTION numpy_style. add (x, y=1) Returns x + y x + y . Parameters x (int) \u2014 The first parameter. y (int, optional) \u2014 The second parameter. Default=1. Returns (int) Added value. Note The return type must be duplicated in the docstring to comply with the NumPy docstring style. Examples Examples should be written in doctest format >>> add(1, 2) 3 Note MkApi doesn't check an underline that follows a section header. Just skip one line. GENERATOR numpy_style. gen (n) Yields a numbered string. Parameters n (int) \u2014 The length of iteration. Yields (str) A numbered string. CLASS numpy_style. ExampleClass (x, y) A normal class. Parameters x (list of int) \u2014 The first parameter. y (str, int) \u2014 The second parameter. Attributes z (str) \u2014 The first attribute. Raises ValueError \u2014 If the length of x is equal to 0. DATACLASS numpy_style. ExampleDataClass (x=0) A dataclass. Parameters x (int, optional) \u2014 The first parameter. Attributes x (int) \u2014 The first attribute. y (int) \u2014 The second attribute.","title":"Depth Limitation"},{"location":"type/","text":"Type Annotation Examples Import libraries and create a Markdown conveter. from typing import Any, Dict, List, Set, Tuple from IPython.display import HTML from markdown import Markdown import mkapi converter = Markdown() [1] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 266ms ) Helper Function Define a helper function that performs everything at one step. def render(obj: Any): node = mkapi.get_node(obj) markdown = node.get_markdown() html = converter.convert(markdown) node.set_html(html) html = node.render() return HTML(html) [2] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 270ms ) Builtin Types def builtin(i: int, f: float, s: str, l: list, d: dict, t: tuple, e: set) -> bool: \"\"\"Function with buitin type annotation. Args: i: Integer. f: Float. s: String. l: List. d: Dictionary. t: Tuple. e: Set. \"\"\" return True render(builtin) [3] 2020-06-03 21:45:17 ( 7.00ms ) python3 ( 277ms ) FUNCTION builtin (i, f, s, l, d, t, e) \u2192 bool Function with buitin type annotation. Parameters i (int) \u2014 Integer. f (float) \u2014 Float. s (str) \u2014 String. l (list) \u2014 List. d (dict) \u2014 Dictionary. t (tuple) \u2014 Tuple. e (set) \u2014 Set. Builtin Types with Default def builtin_default(i: int = 1, f: float = 1.0, s: str = \"abc\", t: tuple = (1, 2)): \"\"\"Function with buitin type annotation. Args: i: Integer. f: Float. s: String. t: String. \"\"\" return True render(builtin_default) [4] 2020-06-03 21:45:17 ( 7.00ms ) python3 ( 284ms ) FUNCTION builtin_default (i=1, f=1.0, s='abc', t=(1, 2)) Function with buitin type annotation. Parameters i (int, optional) \u2014 Integer. f (float, optional) \u2014 Float. s (str, optional) \u2014 String. t (tuple, optional) \u2014 String. Basic Collection Types def basic(l: List[int], t: Tuple[str, int, float], d: Dict[str, int], s: Set[int]): \"\"\"Function with basic generic type annotation. Args: l: List of int. t: Tuple of (str, str). d: Dictionary from str to int. s: Set of int. \"\"\" return set([1, 2, 3]) render(basic) [5] 2020-06-03 21:45:17 ( 8.00ms ) python3 ( 292ms ) FUNCTION basic (l, t, d, s) Function with basic generic type annotation. Parameters l (list of int) \u2014 List of int. t (str, int, float) \u2014 Tuple of (str, str). d (dict(str: int)) \u2014 Dictionary from str to int. s (set of int) \u2014 Set of int.","title":"Type Annotation Examples"},{"location":"type/#type-annotation-examples","text":"Import libraries and create a Markdown conveter. from typing import Any, Dict, List, Set, Tuple from IPython.display import HTML from markdown import Markdown import mkapi converter = Markdown() [1] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 266ms )","title":"Type Annotation Examples"},{"location":"type/#helper-function","text":"Define a helper function that performs everything at one step. def render(obj: Any): node = mkapi.get_node(obj) markdown = node.get_markdown() html = converter.convert(markdown) node.set_html(html) html = node.render() return HTML(html) [2] 2020-06-03 21:45:17 ( 4.00ms ) python3 ( 270ms )","title":"Helper Function"},{"location":"type/#builtin-types","text":"def builtin(i: int, f: float, s: str, l: list, d: dict, t: tuple, e: set) -> bool: \"\"\"Function with buitin type annotation. Args: i: Integer. f: Float. s: String. l: List. d: Dictionary. t: Tuple. e: Set. \"\"\" return True render(builtin) [3] 2020-06-03 21:45:17 ( 7.00ms ) python3 ( 277ms ) FUNCTION builtin (i, f, s, l, d, t, e) \u2192 bool Function with buitin type annotation. Parameters i (int) \u2014 Integer. f (float) \u2014 Float. s (str) \u2014 String. l (list) \u2014 List. d (dict) \u2014 Dictionary. t (tuple) \u2014 Tuple. e (set) \u2014 Set.","title":"Builtin Types"},{"location":"type/#builtin-types-with-default","text":"def builtin_default(i: int = 1, f: float = 1.0, s: str = \"abc\", t: tuple = (1, 2)): \"\"\"Function with buitin type annotation. Args: i: Integer. f: Float. s: String. t: String. \"\"\" return True render(builtin_default) [4] 2020-06-03 21:45:17 ( 7.00ms ) python3 ( 284ms ) FUNCTION builtin_default (i=1, f=1.0, s='abc', t=(1, 2)) Function with buitin type annotation. Parameters i (int, optional) \u2014 Integer. f (float, optional) \u2014 Float. s (str, optional) \u2014 String. t (tuple, optional) \u2014 String.","title":"Builtin Types with Default"},{"location":"type/#basic-collection-types","text":"def basic(l: List[int], t: Tuple[str, int, float], d: Dict[str, int], s: Set[int]): \"\"\"Function with basic generic type annotation. Args: l: List of int. t: Tuple of (str, str). d: Dictionary from str to int. s: Set of int. \"\"\" return set([1, 2, 3]) render(basic) [5] 2020-06-03 21:45:17 ( 8.00ms ) python3 ( 292ms ) FUNCTION basic (l, t, d, s) Function with basic generic type annotation. Parameters l (list of int) \u2014 List of int. t (str, int, float) \u2014 Tuple of (str, str). d (dict(str: int)) \u2014 Dictionary from str to int. s (set of int) \u2014 Set of int.","title":"Basic Collection Types"},{"location":"api/mkapi.core.base/","text":"MKAPI.CORE.BASE This module provides entity classes to represent docstring structure. DATACLASS mkapi.core.base.Base (name, type='', markdown='') Base class. Parameters name (str) \u2014 Object name. type (str, optional) \u2014 Object type. markdown (str, optional) \u2014 Markdown source. Attributes name (str) \u2014 Object name. type (str) \u2014 Object type. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML after conversion. METHOD set_html (html) Sets html attribute according to the givin html argument. In the simplest case, just store the argument to the attribute. But modify the attribute if necessary. DATACLASS mkapi.core.base.Item (name, type='', markdown='') Item class represents an item in Parameters, Attributes, and Raises sections. Parameters name (str) \u2014 Object name. type (str, optional) \u2014 Object type. markdown (str, optional) \u2014 Markdown source. Attributes name (str) \u2014 Object name. type (str) \u2014 Object type. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML after conversion. METHOD set_html (html) Sets html attribute according to the givin html argument. p tags are removed and br tags are inserted. DATACLASS mkapi.core.base.Section (name, type='', markdown='', items=<factory>) Section class represents a section in docstring. Parameters name (str) \u2014 Object name. type (str, optional) \u2014 Object type. markdown (str, optional) \u2014 Markdown source. items (list of Item, optional) \u2014 List for arguments, attributes, or exceptions. Attributes name (str) \u2014 Object name. type (str) \u2014 Object type. markdown (str) \u2014 Markdown source. items (list of Item) \u2014 List for arguments, attributes, or exceptions. html (str) \u2014 HTML after conversion. DATACLASS mkapi.core.base.Docstring (sections, type='') Docstring class represents a docstring of an object. Parameters sections (list of Section) \u2014 List of Section instance type (str, optional) \u2014 Type for Returns and Yields sections. Attributes sections (list of Section) \u2014 List of Section instance type (str) \u2014 Type for Returns and Yields sections. DATACLASS mkapi.core.base.Node (name, type='', markdown='', obj=None, depth=0, prefix='', kind='', sourcefile='', lineno=0, signature=None, docstring=None, members=<factory>, headless=False) Node class represents an object. Attributes obj (Any) \u2014 Object. depth (int) \u2014 Current depth of object searching. prefix (str) \u2014 Prefix. kind (str) \u2014 Kind such as function , class , module , etc. sourcefile (str) \u2014 Souce filename thats defines this object. lineno (int) \u2014 Line number. signature (Union[mkapi.core.inspect.Signature, NoneType]) \u2014 Signature instance. docstring (Union[mkapi.core.base.Docstring, NoneType]) \u2014 Docstring instance. members (list of ForwardRef('Node')) \u2014 Member objects. For example, methods of class. headless (bool) \u2014 Used in page mode. html (str) \u2014 HTML after rendering. METHOD get_markdown () \u2192 str Returns a Markdown source for docstring of this object. METHOD set_html (html) Sets HTML to Base instances recursively.","title":"base"},{"location":"api/mkapi.core.base/#mkapicorebase","text":"This module provides entity classes to represent docstring structure. DATACLASS mkapi.core.base.Base (name, type='', markdown='') Base class. Parameters name (str) \u2014 Object name. type (str, optional) \u2014 Object type. markdown (str, optional) \u2014 Markdown source. Attributes name (str) \u2014 Object name. type (str) \u2014 Object type. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML after conversion. METHOD set_html (html) Sets html attribute according to the givin html argument. In the simplest case, just store the argument to the attribute. But modify the attribute if necessary. DATACLASS mkapi.core.base.Item (name, type='', markdown='') Item class represents an item in Parameters, Attributes, and Raises sections. Parameters name (str) \u2014 Object name. type (str, optional) \u2014 Object type. markdown (str, optional) \u2014 Markdown source. Attributes name (str) \u2014 Object name. type (str) \u2014 Object type. markdown (str) \u2014 Markdown source. html (str) \u2014 HTML after conversion. METHOD set_html (html) Sets html attribute according to the givin html argument. p tags are removed and br tags are inserted. DATACLASS mkapi.core.base.Section (name, type='', markdown='', items=<factory>) Section class represents a section in docstring. Parameters name (str) \u2014 Object name. type (str, optional) \u2014 Object type. markdown (str, optional) \u2014 Markdown source. items (list of Item, optional) \u2014 List for arguments, attributes, or exceptions. Attributes name (str) \u2014 Object name. type (str) \u2014 Object type. markdown (str) \u2014 Markdown source. items (list of Item) \u2014 List for arguments, attributes, or exceptions. html (str) \u2014 HTML after conversion. DATACLASS mkapi.core.base.Docstring (sections, type='') Docstring class represents a docstring of an object. Parameters sections (list of Section) \u2014 List of Section instance type (str, optional) \u2014 Type for Returns and Yields sections. Attributes sections (list of Section) \u2014 List of Section instance type (str) \u2014 Type for Returns and Yields sections. DATACLASS mkapi.core.base.Node (name, type='', markdown='', obj=None, depth=0, prefix='', kind='', sourcefile='', lineno=0, signature=None, docstring=None, members=<factory>, headless=False) Node class represents an object. Attributes obj (Any) \u2014 Object. depth (int) \u2014 Current depth of object searching. prefix (str) \u2014 Prefix. kind (str) \u2014 Kind such as function , class , module , etc. sourcefile (str) \u2014 Souce filename thats defines this object. lineno (int) \u2014 Line number. signature (Union[mkapi.core.inspect.Signature, NoneType]) \u2014 Signature instance. docstring (Union[mkapi.core.base.Docstring, NoneType]) \u2014 Docstring instance. members (list of ForwardRef('Node')) \u2014 Member objects. For example, methods of class. headless (bool) \u2014 Used in page mode. html (str) \u2014 HTML after rendering. METHOD get_markdown () \u2192 str Returns a Markdown source for docstring of this object. METHOD set_html (html) Sets HTML to Base instances recursively.","title":"MKAPI.CORE.BASE"},{"location":"api/mkapi.core.docstring/","text":"MKAPI.CORE.DOCSTRING This module provides functions that parse docstring. FUNCTION mkapi.core.docstring.section_header (line) \u2192 (str, str) Returns a tuple of (section name, style name). Parameters line (str) \u2014 Docstring line. Examples >>> section_header(\"Args:\") ('Args', 'google') >>> section_header(\"Raises\") ('Raises', 'numpy') >>> section_header(\"other\") ('', '') GENERATOR mkapi.core.docstring.split_section (doc) \u2192 Iterator[Tuple[str, str, str]] Yields a tuple of (section name, contents, style). Parameters doc (str) \u2014 Docstring Examples >>> doc = \"abc\\n\\nArgs:\\n x: X\\n\" >>> it = split_section(doc) >>> next(it) ('', 'abc', '') >>> next(it) ('Parameters', 'x: X', 'google') GENERATOR mkapi.core.docstring.split_parameter (doc) \u2192 Iterator[List[str]] Yields list of parameter string. Parameters doc (str) \u2014 Docstring FUNCTION mkapi.core.docstring.parse_parameter (lines, style) \u2192 (str, str, str) Yields (name, type, markdown). Parameters lines (list of str) \u2014 Splitted parameter docstring lines. style (str) \u2014 Docstring style. google or numpy . FUNCTION mkapi.core.docstring.parse_parameters (doc, style) \u2192 list of (str, str, str) Returns list of (name, type, markdown). FUNCTION mkapi.core.docstring.parse_raise (lines, style) \u2192 (str, str) Returns (type, markdown). FUNCTION mkapi.core.docstring.parse_raises (doc, style) \u2192 list of (str, str) Returns list of (type, markdown). FUNCTION mkapi.core.docstring.parse_returns (doc, style) \u2192 (str, str) Returns (type, markdown). FUNCTION mkapi.core.docstring.create_section (name, doc, style) \u2192 Section Returns a Section instance. FUNCTION mkapi.core.docstring.parse_property (doc, obj) Parses property's docstring to inspect type. FUNCTION mkapi.core.docstring.parse_docstring (obj) \u2192 Union[mkapi.core.base.Docstring, NoneType] Parses docstring of the object and returns a Docstring instance.","title":"docstring"},{"location":"api/mkapi.core.docstring/#mkapicoredocstring","text":"This module provides functions that parse docstring. FUNCTION mkapi.core.docstring.section_header (line) \u2192 (str, str) Returns a tuple of (section name, style name). Parameters line (str) \u2014 Docstring line. Examples >>> section_header(\"Args:\") ('Args', 'google') >>> section_header(\"Raises\") ('Raises', 'numpy') >>> section_header(\"other\") ('', '') GENERATOR mkapi.core.docstring.split_section (doc) \u2192 Iterator[Tuple[str, str, str]] Yields a tuple of (section name, contents, style). Parameters doc (str) \u2014 Docstring Examples >>> doc = \"abc\\n\\nArgs:\\n x: X\\n\" >>> it = split_section(doc) >>> next(it) ('', 'abc', '') >>> next(it) ('Parameters', 'x: X', 'google') GENERATOR mkapi.core.docstring.split_parameter (doc) \u2192 Iterator[List[str]] Yields list of parameter string. Parameters doc (str) \u2014 Docstring FUNCTION mkapi.core.docstring.parse_parameter (lines, style) \u2192 (str, str, str) Yields (name, type, markdown). Parameters lines (list of str) \u2014 Splitted parameter docstring lines. style (str) \u2014 Docstring style. google or numpy . FUNCTION mkapi.core.docstring.parse_parameters (doc, style) \u2192 list of (str, str, str) Returns list of (name, type, markdown). FUNCTION mkapi.core.docstring.parse_raise (lines, style) \u2192 (str, str) Returns (type, markdown). FUNCTION mkapi.core.docstring.parse_raises (doc, style) \u2192 list of (str, str) Returns list of (type, markdown). FUNCTION mkapi.core.docstring.parse_returns (doc, style) \u2192 (str, str) Returns (type, markdown). FUNCTION mkapi.core.docstring.create_section (name, doc, style) \u2192 Section Returns a Section instance. FUNCTION mkapi.core.docstring.parse_property (doc, obj) Parses property's docstring to inspect type. FUNCTION mkapi.core.docstring.parse_docstring (obj) \u2192 Union[mkapi.core.base.Docstring, NoneType] Parses docstring of the object and returns a Docstring instance.","title":"MKAPI.CORE.DOCSTRING"},{"location":"api/mkapi.plugins.mkdocs/","text":"MKAPI.PLUGINS.MKDOCS This module provides the MkapiPlugin class. MkapiPlugin is a MkDocs plugin that generates Python API documentation. CLASS mkapi.plugins.mkdocs.MkapiPlugin () MkapiPlugin class for API generation. METHOD on_config (config) Inserts src_dirs to sys.path . METHOD on_files (files, config) Collects plugin css ans js and appends them to files . METHOD on_page_markdown (markdown, page, config, files) Converts Markdown source to intermidiate version. METHOD on_page_content (html, page, config, files) Merges html and MkApi's node structure.","title":"mkdocs"},{"location":"api/mkapi.plugins.mkdocs/#mkapipluginsmkdocs","text":"This module provides the MkapiPlugin class. MkapiPlugin is a MkDocs plugin that generates Python API documentation. CLASS mkapi.plugins.mkdocs.MkapiPlugin () MkapiPlugin class for API generation. METHOD on_config (config) Inserts src_dirs to sys.path . METHOD on_files (files, config) Collects plugin css ans js and appends them to files . METHOD on_page_markdown (markdown, page, config, files) Converts Markdown source to intermidiate version. METHOD on_page_content (html, page, config, files) Merges html and MkApi's node structure.","title":"MKAPI.PLUGINS.MKDOCS"}]}